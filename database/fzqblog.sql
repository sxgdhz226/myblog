/*
SQLyog Ultimate v11.33 (64 bit)
MySQL - 5.7.15-log : Database - fzqblog
*********************************************************************
*/


/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
CREATE DATABASE /*!32312 IF NOT EXISTS*/`fzqblog` /*!40100 DEFAULT CHARACTER SET utf8 */;

USE `fzqblog`;

/*Table structure for table `fzqblog_ask` */

DROP TABLE IF EXISTS `fzqblog_ask`;

CREATE TABLE `fzqblog_task` (
  `ask_id` int(11) NOT NULL AUTO_INCREMENT,
  `p_category_id` int(11) DEFAULT NULL COMMENT '组ID',
  `category_id` int(11) DEFAULT NULL COMMENT '类型ID',
  `title` varchar(100) DEFAULT '' COMMENT '标题',
  `content` longtext COMMENT '内容',
  `summary` text COMMENT '内容摘要',
  `user_id` int(11) DEFAULT NULL COMMENT '作者ID',
  `user_icon` varchar(50) DEFAULT NULL COMMENT '作者头像',
  `user_name` varchar(50) DEFAULT NULL COMMENT '作者名字',
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '发表时间',
  `comment_count` int(11) DEFAULT '0' COMMENT '评论人数',
  `read_count` int(11) DEFAULT '0' COMMENT '阅读人数',
  `collection_count` int(11) DEFAULT '0' COMMENT '收藏人数',
  `like_count` int(11) DEFAULT '0' COMMENT '喜欢人数',
  `ask_image` mediumtext,
  `ask_image_thum` mediumtext COMMENT '文章缩列图',
  `mark` int(11) DEFAULT '0' COMMENT '赏分',
  `best_answer_id` int(11) DEFAULT NULL COMMENT '最佳回复id',
  `best_answer_user_id` int(11) DEFAULT NULL COMMENT '最佳答案作者ID',
  `best_answer_user_icon` varchar(50) DEFAULT NULL COMMENT '最佳作者头像',
  `best_answer_user_name` varchar(50) DEFAULT NULL COMMENT '最佳答案作者',
  `solve_type` int(1) DEFAULT '0' COMMENT '0为已解决1为解决',
  PRIMARY KEY (`ask_id`),
  KEY `idx_topic_id` (`ask_id`),
  KEY `idx_user_id` (`user_id`),
  KEY `idx_category_id` (`p_category_id`,`category_id`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8;

/*Data for the table `fzqblog_ask` */

insert  into `fzqblog_ask`(`ask_id`,`p_category_id`,`category_id`,`title`,`content`,`summary`,`user_id`,`user_icon`,`user_name`,`create_time`,`comment_count`,`read_count`,`collection_count`,`like_count`,`ask_image`,`ask_image_thum`,`mark`,`best_answer_id`,`best_answer_user_id`,`best_answer_user_icon`,`best_answer_user_name`,`solve_type`) values (8,NULL,NULL,'测试问答','<p>问答测试<br/></p>','问答测试',10035,'user_icon/10035.jpg','1','2016-08-24 00:35:14',1,36,0,0,'','',0,3,10035,'user_icon/10035.jpg','1',1),(9,NULL,NULL,'范志强你怎么这么菜','<p>煞笔<br/></p>','煞笔',10042,'user_icon/10042.jgp','sbfqz','2016-10-27 10:53:43',0,7,0,0,'','',0,NULL,NULL,NULL,NULL,0);

/*Table structure for table `fzqblog_attachment` */

DROP TABLE IF EXISTS `fzqblog_attachment`;

CREATE TABLE `fzqblog_attachment` (
  `attachment_id` int(11) NOT NULL AUTO_INCREMENT,
  `topic_id` int(11) DEFAULT NULL COMMENT '帖子ID',
  `file_name` varchar(200) DEFAULT NULL COMMENT '文件名',
  `file_url` varchar(255) DEFAULT NULL COMMENT '文件地址',
  `download_mark` int(11) DEFAULT NULL COMMENT '下载所需积分',
  `download_count` int(11) DEFAULT '0' COMMENT '下载次数',
  `topic_type` char(1) DEFAULT 'T' COMMENT 'T附件属于论坛 B属于博客',
  PRIMARY KEY (`attachment_id`),
  KEY `attachment_id` (`attachment_id`),
  KEY `attachment_topicid` (`topic_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `fzqblog_attachment` */

/*Table structure for table `fzqblog_attachment_download` */

DROP TABLE IF EXISTS `fzqblog_attachment_download`;

CREATE TABLE `fzqblog_attachment_download` (
  `attachment_id` int(11) NOT NULL DEFAULT '0' COMMENT '附件ID',
  `user_id` int(11) NOT NULL DEFAULT '0' COMMENT '下载用户ID',
  `user_icon` varchar(50) DEFAULT NULL COMMENT '用户头像',
  `user_name` varchar(50) DEFAULT NULL COMMENT '用户名',
  PRIMARY KEY (`attachment_id`,`user_id`),
  KEY `attachment_download_id` (`attachment_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `fzqblog_attachment_download` */

/*Table structure for table `fzqblog_blog` */

DROP TABLE IF EXISTS `fzqblog_blog`;

CREATE TABLE `fzqblog_blog` (
  `blog_id` int(11) NOT NULL AUTO_INCREMENT,
  `category_id` int(11) DEFAULT NULL COMMENT '类型ID',
  `title` varchar(100) DEFAULT '' COMMENT '标题',
  `content` longtext COMMENT '内容',
  `summary` text COMMENT '内容摘要',
  `user_id` int(11) DEFAULT NULL COMMENT '作者ID',
  `user_icon` varchar(50) DEFAULT NULL COMMENT '作者头像',
  `user_name` varchar(50) DEFAULT NULL COMMENT '作者名字',
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '发表时间',
  `comment_count` int(11) DEFAULT '0' COMMENT '评论人数',
  `read_count` int(11) DEFAULT '0' COMMENT '阅读人数',
  `collection_count` int(11) DEFAULT '0' COMMENT '收藏人数',
  `like_count` int(11) DEFAULT '0' COMMENT '喜欢人数',
  `blog_image` mediumtext,
  `blog_image_thum` mediumtext COMMENT '博客缩列图',
  `status` int(1) DEFAULT '0' COMMENT '0是草稿 1是发布',
  PRIMARY KEY (`blog_id`),
  KEY `idx_blog_id` (`blog_id`),
  KEY `blog_idx_category_id` (`category_id`),
  KEY `blog_index_id` (`user_id`),
  KEY `blog_index_userid_categoryid` (`blog_id`,`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=174 DEFAULT CHARSET=utf8;

/*Data for the table `fzqblog_blog` */

insert  into `fzqblog_blog`(`blog_id`,`category_id`,`title`,`content`,`summary`,`user_id`,`user_icon`,`user_name`,`create_time`,`comment_count`,`read_count`,`collection_count`,`like_count`,`blog_image`,`blog_image_thum`,`status`) values (167,0,'lucene的IndexWriter对象创建和索引策略的选择','应工作的需要（数据量大造成原有系统查询效率低），最近做了搜索引擎相关的内容，之前培训的时候对lucene即有接触，当时做的是3.x版本的，本人比较激进，毫不犹豫的选择了lucene5版本（15年刚发布的，O(∩_∩)O哈哈~）。</p><p>lucene是一个开放源代码的全文搜索引擎开发工具包，提供了简单强大的搜索引擎接口，其优点如下：</p><p>数据以索引文件的形式存储，索引文件可以跨平台，只要保证索引完整，复制到任何机器或者磁盘空间均可以查询索引内容；</p><p>在传统全文检索引擎的倒排索引的基础上，实现了分块索引，能够针对新的文件建立小文件索引，提升索引速度。然后通过与原有索引的合并，达到优化的目的；</p><p>索引的构建和查询都十分简洁，有强大的类库实现相关功能；</p><p>开发源代码，论坛和资源十分丰富。</p><p>索引的构建过程描述如下：</p><p>&nbsp;1）判断JRE版本是否为64位和是否支持堆外内存，并创建</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.1&nbsp; 如果满足条件，创建MMapDirectory，此种Directory可以有效的利用虚拟机内存地址空间&nbsp;；</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.2&nbsp; 如果不满足以上条件，判断系统是否是windows,如果满足条件，创建SimpleFSDirectory，此种directory提供了性能不太高的多线程支持，lucene推荐使用NIOFSDirectory或者MMapDirectory来替代之；</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.3&nbsp;如果以上均不满足，创建NIOFSDirectory对象，此种directory的英文说明为</p><p>[html]&nbsp;view plain&nbsp;copy</p><p>An&nbsp;FSDirectory&nbsp;implementation&nbsp;that&nbsp;uses&nbsp;java.nio&#39;s&nbsp;FileChannel&#39;s&nbsp;positional&nbsp;read,&nbsp;which&nbsp;allows&nbsp;multiple&nbsp;threads&nbsp;to&nbsp;read&nbsp;from&nbsp;the&nbsp;same&nbsp;file&nbsp;without&nbsp;synchronizing&nbsp;&nbsp;</p><p>大意是一个利用了Java&nbsp;nio中FileChannel的FSDirectory实现，允许无syschronized的对同一文件进行多线程读</p><p>&nbsp;2）词库分析器Analyzer创建（需要注意的是使用哪种Analyzer进行索引查询，创建的时候也要使用对应的索引器，否则查询结果有问题）</p><p>&nbsp;3）IndexWriterConfig对象创建,并获取IndexWriter对象</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3.1 判断是覆盖索引还是追加索引，如果是覆盖索引indexWriterConfig.setOpenMode(IndexWriterConfig.OpenMode.CREATE);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3.2 如果追加indexWriterConfig.setOpenMode(IndexWriterConfig.OpenMode.CREATE_OR_APPEND);</p><p>&nbsp;&nbsp;&nbsp; 4) 遍历根据要索引的对象列表，对单个对象的field进行lucene相关field构建，添加到Document对象中</p><p>&nbsp;&nbsp;&nbsp; 5）IndexWriter对索引进行写入；</p><p>&nbsp;&nbsp;&nbsp; 6）IndexWriter执行commit()和close()结束索引创建过程<br/></p><p>以lucene5为例，索引器的创建如下：</p><p>[java]&nbsp;view plain&nbsp;copy</p><p>/**创建索引写入器&nbsp;</p><p>&nbsp;*&nbsp;@param&nbsp;indexPath&nbsp;</p><p>&nbsp;*&nbsp;@param&nbsp;create&nbsp;</p><p>&nbsp;*&nbsp;@return&nbsp;</p><p>&nbsp;*&nbsp;@throws&nbsp;IOException&nbsp;</p><p>&nbsp;*/&nbsp;&nbsp;</p><p>public&nbsp;static&nbsp;IndexWriter&nbsp;getIndexWriter(String&nbsp;indexPath,boolean&nbsp;create)&nbsp;throws&nbsp;IOException{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;Directory&nbsp;dir&nbsp;=&nbsp;FSDirectory.open(Paths.get(indexPath,&nbsp;new&nbsp;String[0]));&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;Analyzer&nbsp;analyzer&nbsp;=&nbsp;new&nbsp;StandardAnalyzer();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;IndexWriterConfig&nbsp;iwc&nbsp;=&nbsp;new&nbsp;IndexWriterConfig(analyzer);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(create){&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}else&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE_OR_APPEND);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;IndexWriter&nbsp;writer&nbsp;=&nbsp;new&nbsp;IndexWriter(dir,&nbsp;iwc);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;writer;&nbsp;&nbsp;</p><p>} &nbsp;</p><p><br/>','应工作的需要（数据量大造成原有系统查询效率低），最近做了搜索引擎相关的内容，之前培训的时候对lucene即有接触，当时做的是3.x版本的，本人比较激进，毫不犹豫的选择了lucene5版本（15年刚发布的，O(∩_∩)O哈哈~）。lucene是一个开放源代码的全文搜索引擎开发工具包，提供了简单强大的搜索引擎接口，其优点如下：数据以索引文件的形式存储，索引文件可以跨平台，只要保证索引完整，复制到任何机......',10034,'user_icon/10034.jpg','fan220','2016-08-27 22:42:27',0,37,1,1,'',NULL,1),(168,0,'lucene的各种Field及其排序','<p style=\"margin: 0px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial; line-height: 26px; white-space: normal; background-color: rgb(255, 255, 255);\">Lucene的Field说明</p>Lucene存储对象是以document为存储单元，对象中相关的属性值则存放到Field中；</p><p>lucene中所有Field都是IndexableField接口的实现</p><p>[html]&nbsp;view plain&nbsp;copy</p><p>org.apache.lucene.index.IndexableField&nbsp;&nbsp;</p><p>&nbsp;&nbsp;</p><p>&nbsp;&nbsp;</p><p>Represents&nbsp;a&nbsp;single&nbsp;field&nbsp;for&nbsp;indexing.&nbsp;IndexWriter&nbsp;consumes&nbsp;Iterable&lt;IndexableField&gt;&nbsp;as&nbsp;a&nbsp;document.&nbsp;&nbsp;</p><p>IndexableField接口提供了一些方法，主要是对field相关属性的获取，包括</p><p>[html]&nbsp;view plain&nbsp;copy</p><p>/**&nbsp;获取field的名称&nbsp;*/&nbsp;&nbsp;</p><p>public&nbsp;String&nbsp;name();&nbsp;&nbsp;</p><p><br/></p><p>[java]&nbsp;view plain&nbsp;copy</p><p>/**&nbsp;获取field的类型fieldType&nbsp;*/&nbsp;&nbsp;</p><p>public&nbsp;IndexableFieldType&nbsp;fieldType();&nbsp;&nbsp;</p><p>&nbsp;</p><p>[java]&nbsp;view plain&nbsp;copy</p><p>/**&nbsp;&nbsp;</p><p>&nbsp;*获取当前field的权重（评分值）&nbsp;只有Field有评分的概念，如果我们想对document进行评分值的设定&nbsp;必须预先对document中对应的field值进行评分设设定*/&nbsp;&nbsp;public&nbsp;float&nbsp;boost();&nbsp;&nbsp;</p><p><br/>&nbsp;</p><p>[java]&nbsp;view plain&nbsp;copy</p><p>/**&nbsp;如果此Filed为二进制类型的，返回相应的值*/&nbsp;&nbsp;</p><p>public&nbsp;BytesRef&nbsp;binaryValue();&nbsp;&nbsp;</p><p>...</p><p>[java]&nbsp;view plain&nbsp;copy</p><p>/**&nbsp;</p><p>&nbsp;*&nbsp;创建一个用户索引此Field的TokenStream&nbsp;</p><p>&nbsp;*/&nbsp;&nbsp;</p><p>public&nbsp;TokenStream&nbsp;tokenStream(Analyzer&nbsp;analyzer,&nbsp;TokenStream&nbsp;reuse)&nbsp;throws&nbsp;IOException;&nbsp;&nbsp;</p><p><br/>所有的Field均是org.apache.lucene.document.Field的子类；</p><p>项目中我们常用的Field类型主要有IntField, LongField, FloatField, DoubleField, BinaryDocValuesField, NumericDocValuesField, SortedDocValuesField, StringField, TextField, StoredField.<br/></p><p></p><p>lucene常见Field</p><p></p><p></p><p>IntField</p><p>主要对int类型的字段进行存储，需要注意的是如果需要对InfField进行排序使用SortField.Type.INT来比较，如果进范围查询或过滤，需要采用NumericRangeQuery.newIntRange()</p><p></p><p>LongField &nbsp; &nbsp;主要处理Long类型的字段的存储，排序使用SortField.Type.Long,如果进行范围查询或过滤利用NumericRangeQuery.newLongRange()，LongField常用来进行时间戳的排序，保存System.currentTimeMillions() &nbsp; &nbsp;</p><p>FloatField &nbsp; &nbsp;对Float类型的字段进行存储，排序采用SortField.Type.Float,范围查询采用NumericRangeQuery.newFloatRange() &nbsp; &nbsp;</p><p>BinaryDocVluesField &nbsp; &nbsp;只存储不共享值，如果需要共享值可以用SortedDocValuesField &nbsp; &nbsp;</p><p>NumericDocValuesField &nbsp; &nbsp;用于数值类型的Field的排序(预排序)，需要在要排序的field后添加一个同名的NumericDocValuesField &nbsp; &nbsp;</p><p>SortedDocValuesField &nbsp; &nbsp;用于String类型的Field的排序，需要在StringField后添加同名的SortedDocValuesField &nbsp; &nbsp;</p><p>StringField &nbsp; &nbsp;用户String类型的字段的存储，StringField是只索引不分词 &nbsp; &nbsp;</p><p>TextField &nbsp; &nbsp;对String类型的字段进行存储，TextField和StringField的不同是TextField既索引又分词 &nbsp; &nbsp;</p><p>StoredField &nbsp; &nbsp;存储Field的值，可以用IndexSearcher.doc和IndexReader.document来获取此Field和存储的值 &nbsp; &nbsp;</p><p><br/></p><p>IntField使用</p><p>[java]&nbsp;view plain&nbsp;copy</p><p>package&nbsp;com.lucene.field;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;</p><p>import&nbsp;java.io.IOException;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;</p><p>&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.document.Document;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.document.Field;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.document.IntField;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.document.NumericDocValuesField;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.index.IndexWriter;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.search.IndexSearcher;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.search.MatchAllDocsQuery;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.search.Query;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.search.ScoreDoc;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.search.Sort;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.search.SortField;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.search.TopFieldDocs;&nbsp;&nbsp;</p><p>import&nbsp;org.junit.Test;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;</p><p>import&nbsp;com.lucene.index.IndexUtil;&nbsp;&nbsp;</p><p>import&nbsp;com.lucene.search.SearchUtil;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;</p><p>public&nbsp;class&nbsp;IntFieldTest&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;/**&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;保存一个intField&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;@Test&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;testIndexIntFieldStored()&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Document&nbsp;document&nbsp;=&nbsp;new&nbsp;Document();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.add(new&nbsp;IntField(&quot;intValue&quot;,&nbsp;30,&nbsp;Field.Store.YES));&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//要排序必须加同名的field，且类型为NumericDocValuesField&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.add(new&nbsp;NumericDocValuesField(&quot;intValue&quot;,&nbsp;30));&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Document&nbsp;document1&nbsp;=&nbsp;new&nbsp;Document();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document1.add(new&nbsp;IntField(&quot;intValue&quot;,&nbsp;40,&nbsp;Field.Store.YES));&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document1.add(new&nbsp;NumericDocValuesField(&quot;intValue&quot;,&nbsp;40));&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IndexWriter&nbsp;writer&nbsp;=&nbsp;null;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writer&nbsp;=&nbsp;IndexUtil.getIndexWriter(&quot;intFieldPath&quot;,&nbsp;false);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writer.addDocument(document);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writer.addDocument(document1);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IOException&nbsp;e)&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;TODO&nbsp;Auto-generated&nbsp;catch&nbsp;block&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}finally{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writer.commit();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writer.close();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IOException&nbsp;e)&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;TODO&nbsp;Auto-generated&nbsp;catch&nbsp;block&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;/**&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;测试intField排序&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;@Test&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;testIntFieldSort(){&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IndexSearcher&nbsp;searcher&nbsp;=&nbsp;SearchUtil.getIndexSearcher(&quot;intFieldPath&quot;,&nbsp;null);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//构建排序字段&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SortField[]&nbsp;sortField&nbsp;=&nbsp;new&nbsp;SortField[1];&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sortField[0]&nbsp;=&nbsp;new&nbsp;SortField(&quot;intValue&quot;,SortField.Type.INT,true);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sort&nbsp;sort&nbsp;=&nbsp;new&nbsp;Sort(sortField);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//查询所有结果&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query&nbsp;query&nbsp;=&nbsp;new&nbsp;MatchAllDocsQuery();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TopFieldDocs&nbsp;docs&nbsp;=&nbsp;searcher.search(query,&nbsp;2,&nbsp;sort);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ScoreDoc[]&nbsp;scores&nbsp;=&nbsp;docs.scoreDocs;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//遍历结果&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(ScoreDoc&nbsp;scoreDoc&nbsp;:&nbsp;scores)&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(searcher.doc(scoreDoc.doc));;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//searcher.search(query,&nbsp;results);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IOException&nbsp;e)&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;TODO&nbsp;Auto-generated&nbsp;catch&nbsp;block&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;</p><p>}&nbsp;&nbsp;</p><p>测试排序结果如下</p><p>[html]&nbsp;view plain&nbsp;copy</p><p>Document&lt;stored&lt;intValue:40&gt;&gt;&nbsp;&nbsp;</p><p>Document&lt;stored&lt;intValue:30&gt;&gt;&nbsp;&nbsp;</p><p>如果修改NumericDocValuesField对应的值，结果会随着其值的大小而改变</p><p>&nbsp;</p><p>LongField使用</p><p>[java]&nbsp;view plain&nbsp;copy</p><p>package&nbsp;com.lucene.field;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;</p><p>import&nbsp;java.io.IOException;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.document.Document;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.document.Field;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.document.LongField;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.document.NumericDocValuesField;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.index.IndexWriter;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.search.IndexSearcher;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.search.MatchAllDocsQuery;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.search.Query;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.search.ScoreDoc;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.search.Sort;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.search.SortField;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.search.TopFieldDocs;&nbsp;&nbsp;</p><p>import&nbsp;org.junit.Test;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;</p><p>import&nbsp;com.lucene.index.IndexUtil;&nbsp;&nbsp;</p><p>import&nbsp;com.lucene.search.SearchUtil;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;</p><p>public&nbsp;class&nbsp;LongFieldTest&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;/**&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;保存一个longField&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;@Test&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;testIndexLongFieldStored()&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Document&nbsp;document&nbsp;=&nbsp;new&nbsp;Document();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.add(new&nbsp;LongField(&quot;longValue&quot;,&nbsp;50L,&nbsp;Field.Store.YES));&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.add(new&nbsp;NumericDocValuesField(&quot;longValue&quot;,&nbsp;50L));&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Document&nbsp;document1&nbsp;=&nbsp;new&nbsp;Document();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document1.add(new&nbsp;LongField(&quot;longValue&quot;,&nbsp;80L,&nbsp;Field.Store.YES));&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document1.add(new&nbsp;NumericDocValuesField(&quot;longValue&quot;,&nbsp;80L));&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IndexWriter&nbsp;writer&nbsp;=&nbsp;null;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writer&nbsp;=&nbsp;IndexUtil.getIndexWriter(&quot;longFieldPath&quot;,&nbsp;false);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writer.addDocument(document);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writer.addDocument(document1);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IOException&nbsp;e)&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;TODO&nbsp;Auto-generated&nbsp;catch&nbsp;block&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}finally{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writer.commit();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writer.close();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IOException&nbsp;e)&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;TODO&nbsp;Auto-generated&nbsp;catch&nbsp;block&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;/**&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;测试longField排序&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;@Test&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;testLongFieldSort(){&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IndexSearcher&nbsp;searcher&nbsp;=&nbsp;SearchUtil.getIndexSearcher(&quot;longFieldPath&quot;,&nbsp;null);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//构建排序字段&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SortField[]&nbsp;sortField&nbsp;=&nbsp;new&nbsp;SortField[1];&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sortField[0]&nbsp;=&nbsp;new&nbsp;SortField(&quot;longValue&quot;,SortField.Type.LONG,true);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sort&nbsp;sort&nbsp;=&nbsp;new&nbsp;Sort(sortField);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//查询所有结果&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query&nbsp;query&nbsp;=&nbsp;new&nbsp;MatchAllDocsQuery();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TopFieldDocs&nbsp;docs&nbsp;=&nbsp;searcher.search(query,&nbsp;2,&nbsp;sort);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ScoreDoc[]&nbsp;scores&nbsp;=&nbsp;docs.scoreDocs;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//遍历结果&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(ScoreDoc&nbsp;scoreDoc&nbsp;:&nbsp;scores)&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//System.out.println(searcher.doc(scoreDoc.doc));;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Document&nbsp;doc&nbsp;=&nbsp;searcher.doc(scoreDoc.doc);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(doc.getField(&quot;longValue&quot;).numericValue());&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//searcher.search(query,&nbsp;results);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IOException&nbsp;e)&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;TODO&nbsp;Auto-generated&nbsp;catch&nbsp;block&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</p><p>}&nbsp;&nbsp;</p><p>运行结果如下：</p><p>[html]&nbsp;view plain&nbsp;copy</p><p>Document&lt;stored&lt;longValue:80&gt;&gt;&nbsp;&nbsp;</p><p>Document&lt;stored&lt;longValue:50&gt;&gt;&nbsp;&nbsp;</p><p><br/>FloatField使用</p><p>[java]&nbsp;view plain&nbsp;copy</p><p>package&nbsp;com.lucene.field;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;</p><p>import&nbsp;java.io.IOException;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.document.Document;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.document.Field;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.document.FloatDocValuesField;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.document.FloatField;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.index.IndexWriter;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.search.IndexSearcher;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.search.MatchAllDocsQuery;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.search.Query;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.search.ScoreDoc;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.search.Sort;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.search.SortField;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.search.TopFieldDocs;&nbsp;&nbsp;</p><p>import&nbsp;org.junit.Test;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;</p><p>import&nbsp;com.lucene.index.IndexUtil;&nbsp;&nbsp;</p><p>import&nbsp;com.lucene.search.SearchUtil;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;</p><p>public&nbsp;class&nbsp;FloatFieldTest&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;/**&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;保存一个floatField&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;@Test&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;testIndexFloatFieldStored()&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Document&nbsp;document&nbsp;=&nbsp;new&nbsp;Document();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.add(new&nbsp;FloatField(&quot;floatValue&quot;,&nbsp;9.1f,&nbsp;Field.Store.YES));&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.add(new&nbsp;FloatDocValuesField(&quot;floatValue&quot;,&nbsp;82.0f));&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Document&nbsp;document1&nbsp;=&nbsp;new&nbsp;Document();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document1.add(new&nbsp;FloatField(&quot;floatValue&quot;,&nbsp;80.1f,&nbsp;Field.Store.YES));&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document1.add(new&nbsp;FloatDocValuesField(&quot;floatValue&quot;,&nbsp;80.1f));&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IndexWriter&nbsp;writer&nbsp;=&nbsp;null;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writer&nbsp;=&nbsp;IndexUtil.getIndexWriter(&quot;floatFieldPath&quot;,&nbsp;false);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writer.addDocument(document);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writer.addDocument(document1);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IOException&nbsp;e)&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;TODO&nbsp;Auto-generated&nbsp;catch&nbsp;block&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}finally{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writer.commit();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writer.close();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IOException&nbsp;e)&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;TODO&nbsp;Auto-generated&nbsp;catch&nbsp;block&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;/**&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;测试intField排序&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;@Test&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;testFloatFieldSort(){&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IndexSearcher&nbsp;searcher&nbsp;=&nbsp;SearchUtil.getIndexSearcher(&quot;floatFieldPath&quot;,&nbsp;null);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//构建排序字段&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SortField[]&nbsp;sortField&nbsp;=&nbsp;new&nbsp;SortField[1];&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sortField[0]&nbsp;=&nbsp;new&nbsp;SortField(&quot;floatValue&quot;,SortField.Type.FLOAT,true);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sort&nbsp;sort&nbsp;=&nbsp;new&nbsp;Sort(sortField);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//查询所有结果&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query&nbsp;query&nbsp;=&nbsp;new&nbsp;MatchAllDocsQuery();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TopFieldDocs&nbsp;docs&nbsp;=&nbsp;searcher.search(query,&nbsp;2,&nbsp;sort);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ScoreDoc[]&nbsp;scores&nbsp;=&nbsp;docs.scoreDocs;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//遍历结果&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(ScoreDoc&nbsp;scoreDoc&nbsp;:&nbsp;scores)&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//System.out.println(searcher.doc(scoreDoc.doc));;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Document&nbsp;doc&nbsp;=&nbsp;searcher.doc(scoreDoc.doc);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(doc.getField(&quot;floatValue&quot;).numericValue());&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//searcher.search(query,&nbsp;results);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IOException&nbsp;e)&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;TODO&nbsp;Auto-generated&nbsp;catch&nbsp;block&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</p><p>}&nbsp;&nbsp;</p><p><br/>结果如下：</p><p>[html]&nbsp;view plain&nbsp;copy</p><p>Document&lt;stored&lt;floatValue:9.1&gt;&gt;&nbsp;&nbsp;</p><p>Document&lt;stored&lt;floatValue:80.1&gt;&gt;&nbsp;&nbsp;</p><p><br/>BinaryDocValuesField使用</p><p>[java]&nbsp;view plain&nbsp;copy</p><p>package&nbsp;com.lucene.field;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;</p><p>import&nbsp;java.io.IOException;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.document.BinaryDocValuesField;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.document.Document;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.document.Field;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.document.FloatDocValuesField;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.document.FloatField;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.document.IntField;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.document.LongField;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.document.NumericDocValuesField;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.index.IndexWriter;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.search.IndexSearcher;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.search.MatchAllDocsQuery;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.search.Query;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.search.ScoreDoc;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.search.Sort;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.search.SortField;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.search.TopFieldDocs;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.util.BytesRef;&nbsp;&nbsp;</p><p>import&nbsp;org.junit.Test;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;</p><p>import&nbsp;com.lucene.index.IndexUtil;&nbsp;&nbsp;</p><p>import&nbsp;com.lucene.search.SearchUtil;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;</p><p>public&nbsp;class&nbsp;BinaryDocValuesFieldTest&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;/**&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;保存一个BinaryDocValuesField&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;@Test&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;testIndexLongFieldStored()&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Document&nbsp;document&nbsp;=&nbsp;new&nbsp;Document();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.add(new&nbsp;BinaryDocValuesField(&quot;binaryValue&quot;,new&nbsp;BytesRef(&quot;1234&quot;.getBytes())));&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Document&nbsp;document1&nbsp;=&nbsp;new&nbsp;Document();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document1.add(new&nbsp;BinaryDocValuesField(&quot;binaryValue&quot;,new&nbsp;BytesRef(&quot;2345&quot;.getBytes())));&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IndexWriter&nbsp;writer&nbsp;=&nbsp;null;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writer&nbsp;=&nbsp;IndexUtil.getIndexWriter(&quot;binaryValueFieldPath&quot;,&nbsp;false);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writer.addDocument(document);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writer.addDocument(document1);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IOException&nbsp;e)&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;TODO&nbsp;Auto-generated&nbsp;catch&nbsp;block&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}finally{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writer.commit();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writer.close();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IOException&nbsp;e)&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;TODO&nbsp;Auto-generated&nbsp;catch&nbsp;block&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;/**&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;测试BinaryDocValuesField排序&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;@Test&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;testBinaryDocValuesFieldSort(){&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IndexSearcher&nbsp;searcher&nbsp;=&nbsp;SearchUtil.getIndexSearcher(&quot;binaryValueFieldPath&quot;,&nbsp;null);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//构建排序字段&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SortField[]&nbsp;sortField&nbsp;=&nbsp;new&nbsp;SortField[1];&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sortField[0]&nbsp;=&nbsp;new&nbsp;SortField(&quot;binaryValue&quot;,SortField.Type.STRING_VAL,true);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sort&nbsp;sort&nbsp;=&nbsp;new&nbsp;Sort(sortField);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//查询所有结果&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query&nbsp;query&nbsp;=&nbsp;new&nbsp;MatchAllDocsQuery();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TopFieldDocs&nbsp;docs&nbsp;=&nbsp;searcher.search(query,&nbsp;2,&nbsp;sort);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ScoreDoc[]&nbsp;scores&nbsp;=&nbsp;docs.scoreDocs;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//遍历结果&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(ScoreDoc&nbsp;scoreDoc&nbsp;:&nbsp;scores)&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//System.out.println(searcher.doc(scoreDoc.doc));;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Document&nbsp;doc&nbsp;=&nbsp;searcher.doc(scoreDoc.doc);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(doc);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//System.out.println(doc.getField(&quot;binaryValue&quot;).numericValue());&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//searcher.search(query,&nbsp;results);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IOException&nbsp;e)&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;TODO&nbsp;Auto-generated&nbsp;catch&nbsp;block&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</p><p>}&nbsp;&nbsp;</p><p><br/>运行结果：</p><p>[html]&nbsp;view plain&nbsp;copy</p><p>Document&lt;&gt;&nbsp;&nbsp;</p><p>Document&lt;&gt;&nbsp;&nbsp;</p><p>为什么这样呢，这是跟BinaryDocValuesField的特性决定的，只索引不存值！<br/></p><p>StringField使用</p><p>[java]&nbsp;view plain&nbsp;copy</p><p>package&nbsp;com.lucene.field;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;</p><p>import&nbsp;java.io.IOException;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.document.BinaryDocValuesField;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.document.Document;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.document.Field;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.document.FloatDocValuesField;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.document.FloatField;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.document.IntField;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.document.LongField;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.document.NumericDocValuesField;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.document.SortedDocValuesField;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.document.StringField;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.index.IndexWriter;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.search.IndexSearcher;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.search.MatchAllDocsQuery;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.search.Query;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.search.ScoreDoc;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.search.Sort;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.search.SortField;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.search.TopFieldDocs;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.util.BytesRef;&nbsp;&nbsp;</p><p>import&nbsp;org.junit.Test;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;</p><p>import&nbsp;com.lucene.index.IndexUtil;&nbsp;&nbsp;</p><p>import&nbsp;com.lucene.search.SearchUtil;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;</p><p>public&nbsp;class&nbsp;StringFieldTest&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;/**&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;保存一个StringField&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;@Test&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;testIndexLongFieldStored()&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Document&nbsp;document&nbsp;=&nbsp;new&nbsp;Document();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.add(new&nbsp;StringField(&quot;stringValue&quot;,&quot;12445&quot;,&nbsp;Field.Store.YES));&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.add(new&nbsp;SortedDocValuesField(&quot;stringValue&quot;,&nbsp;new&nbsp;BytesRef(&quot;12445&quot;.getBytes())));&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Document&nbsp;document1&nbsp;=&nbsp;new&nbsp;Document();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document1.add(new&nbsp;StringField(&quot;stringValue&quot;,&quot;23456&quot;,&nbsp;Field.Store.YES));&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document1.add(new&nbsp;SortedDocValuesField(&quot;stringValue&quot;,&nbsp;new&nbsp;BytesRef(&quot;23456&quot;.getBytes())));&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IndexWriter&nbsp;writer&nbsp;=&nbsp;null;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writer&nbsp;=&nbsp;IndexUtil.getIndexWriter(&quot;stringFieldPath&quot;,&nbsp;false);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writer.addDocument(document);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writer.addDocument(document1);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IOException&nbsp;e)&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;TODO&nbsp;Auto-generated&nbsp;catch&nbsp;block&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}finally{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writer.commit();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writer.close();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IOException&nbsp;e)&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;TODO&nbsp;Auto-generated&nbsp;catch&nbsp;block&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;/**&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;测试StringField排序&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;@Test&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;testStringFieldSort(){&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IndexSearcher&nbsp;searcher&nbsp;=&nbsp;SearchUtil.getIndexSearcher(&quot;stringFieldPath&quot;,&nbsp;null);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//构建排序字段&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SortField[]&nbsp;sortField&nbsp;=&nbsp;new&nbsp;SortField[1];&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sortField[0]&nbsp;=&nbsp;new&nbsp;SortField(&quot;stringVal&quot;,SortField.Type.STRING,true);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sort&nbsp;sort&nbsp;=&nbsp;new&nbsp;Sort(sortField);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//查询所有结果&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query&nbsp;query&nbsp;=&nbsp;new&nbsp;MatchAllDocsQuery();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TopFieldDocs&nbsp;docs&nbsp;=&nbsp;searcher.search(query,&nbsp;2,&nbsp;sort);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ScoreDoc[]&nbsp;scores&nbsp;=&nbsp;docs.scoreDocs;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//遍历结果&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(ScoreDoc&nbsp;scoreDoc&nbsp;:&nbsp;scores)&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//System.out.println(searcher.doc(scoreDoc.doc));;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Document&nbsp;doc&nbsp;=&nbsp;searcher.doc(scoreDoc.doc);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(doc);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//System.out.println(doc.getField(&quot;binaryValue&quot;).numericValue());&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//searcher.search(query,&nbsp;results);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IOException&nbsp;e)&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;TODO&nbsp;Auto-generated&nbsp;catch&nbsp;block&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</p><p>}&nbsp;&nbsp;</p><p>运行结果如下：</p><p>[html]&nbsp;view plain&nbsp;copy</p><p>Document&lt;stored,indexed,tokenized,omitNorms,indexOptions=DOCS&lt;stringValue:12445&gt;&gt;&nbsp;&nbsp;</p><p>Document&lt;stored,indexed,tokenized,omitNorms,indexOptions=DOCS&lt;stringValue:23456&gt;&gt;&nbsp;&nbsp;</p><p><br/>TextField使用</p><p>[java]&nbsp;view plain&nbsp;copy</p><p>package&nbsp;com.lucene.field;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;</p><p>import&nbsp;java.io.IOException;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.document.BinaryDocValuesField;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.document.Document;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.document.Field;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.document.FloatDocValuesField;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.document.FloatField;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.document.IntField;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.document.LongField;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.document.NumericDocValuesField;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.document.SortedDocValuesField;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.document.StringField;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.document.TextField;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.index.IndexWriter;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.search.IndexSearcher;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.search.MatchAllDocsQuery;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.search.Query;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.search.ScoreDoc;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.search.Sort;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.search.SortField;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.search.TopFieldDocs;&nbsp;&nbsp;</p><p>import&nbsp;org.apache.lucene.util.BytesRef;&nbsp;&nbsp;</p><p>import&nbsp;org.junit.Test;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;</p><p>import&nbsp;com.lucene.index.IndexUtil;&nbsp;&nbsp;</p><p>import&nbsp;com.lucene.search.SearchUtil;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;</p><p>public&nbsp;class&nbsp;TextFieldTest&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;/**&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;保存一个StringField&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;@Test&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;testIndexLongFieldStored()&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Document&nbsp;document&nbsp;=&nbsp;new&nbsp;Document();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.add(new&nbsp;TextField(&quot;textValue&quot;,&quot;12345&quot;,&nbsp;Field.Store.YES));&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.add(new&nbsp;SortedDocValuesField(&quot;textValue&quot;,&nbsp;new&nbsp;BytesRef(&quot;12345&quot;.getBytes())));&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Document&nbsp;document1&nbsp;=&nbsp;new&nbsp;Document();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document1.add(new&nbsp;TextField(&quot;textValue&quot;,&quot;23456&quot;,&nbsp;Field.Store.YES));&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document1.add(new&nbsp;SortedDocValuesField(&quot;textValue&quot;,&nbsp;new&nbsp;BytesRef(&quot;23456&quot;.getBytes())));&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IndexWriter&nbsp;writer&nbsp;=&nbsp;null;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writer&nbsp;=&nbsp;IndexUtil.getIndexWriter(&quot;textFieldPath&quot;,&nbsp;false);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writer.addDocument(document);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writer.addDocument(document1);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IOException&nbsp;e)&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;TODO&nbsp;Auto-generated&nbsp;catch&nbsp;block&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}finally{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writer.commit();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writer.close();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IOException&nbsp;e)&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;TODO&nbsp;Auto-generated&nbsp;catch&nbsp;block&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;/**&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;测试StringField排序&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;@Test&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;testStringFieldSort(){&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IndexSearcher&nbsp;searcher&nbsp;=&nbsp;SearchUtil.getIndexSearcher(&quot;textFieldPath&quot;,&nbsp;null);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//构建排序字段&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SortField[]&nbsp;sortField&nbsp;=&nbsp;new&nbsp;SortField[1];&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sortField[0]&nbsp;=&nbsp;new&nbsp;SortField(&quot;textValue&quot;,SortField.Type.STRING,true);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sort&nbsp;sort&nbsp;=&nbsp;new&nbsp;Sort(sortField);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//查询所有结果&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query&nbsp;query&nbsp;=&nbsp;new&nbsp;MatchAllDocsQuery();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TopFieldDocs&nbsp;docs&nbsp;=&nbsp;searcher.search(query,&nbsp;2,&nbsp;sort);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ScoreDoc[]&nbsp;scores&nbsp;=&nbsp;docs.scoreDocs;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//遍历结果&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(ScoreDoc&nbsp;scoreDoc&nbsp;:&nbsp;scores)&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//System.out.println(searcher.doc(scoreDoc.doc));;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Document&nbsp;doc&nbsp;=&nbsp;searcher.doc(scoreDoc.doc);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(doc);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//System.out.println(doc.getField(&quot;binaryValue&quot;).numericValue());&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//searcher.search(query,&nbsp;results);&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IOException&nbsp;e)&nbsp;{&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;TODO&nbsp;Auto-generated&nbsp;catch&nbsp;block&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</p><p>}&nbsp;&nbsp;</p><p><br/>运行结果如下：</p><p>[html]&nbsp;view plain&nbsp;copy</p><p>Document&lt;stored,indexed,tokenized&lt;textValue:23456&gt;&gt;&nbsp;&nbsp;</p><p>Document&lt;stored,indexed,tokenized&lt;textValue:12345&gt;&gt;&nbsp;&nbsp;</p><p><br/>','Lucene的Field说明Lucene存储对象是以document为存储单元，对象中相关的属性值则存放到Field中；lucene中所有Field都是IndexableField接口的实现[html] view plain copyorg.apache.lucene.index.IndexableField      Represents a single field for indexing.......',10034,'user_icon/10034.jpg','fan220','2016-08-27 22:49:33',0,25,0,0,'',NULL,1),(169,0,'我的博文','博文发表<br/>','博文发表',10035,'user_icon/10035.jpg','1','2016-09-11 03:31:39',0,36,0,0,'',NULL,1),(170,0,'nginx域名重写 不加www 转到加www','server_name www.ladyband.com ladyband.com;</p><p><br/></p><p>if ( $host != &#39;www.ladyband.com&#39; ) {</p><p><br/></p><p>rewrite &quot;^/(.*)$&quot; http://www.ladyband.com/$1 permanent;&nbsp;</p><p>}</p><p><br/>','server_name www.ladyband.com ladyband.com;if ( $host != \'www.ladyband.com\' ) {rewrite \"^/(.*)$\" http://www.ladyband.com/$1 permanent; }',10041,'user_icon/10041.jgp','抽离','2016-09-14 21:45:43',0,46,0,0,'',NULL,1),(171,0,'spring aop','切面(Aspect): &nbsp;横切关注点(跨越应用程序多个模块的功能)被模块化的特殊对象</p><p>通知(Advice): &nbsp;切面必须要完成的工作</p><p>目标(Target): 被通知的对象</p><p>代理(Proxy): 向目标对象应用通知之后创建的对象</p><p>连接点（Joinpoint）：程序执行的某个特定位置：如类某个方法调用前、调用后、方法抛出异常后等。连接点由两个信息确定：方法表示的程序执行点；相对点表示的方位。例如 ArithmethicCalculator#add() 方法执行前的连接点，执行点为 ArithmethicCalculator#add()； 方位为该方法执行前的位置</p><p>切点（pointcut）：每个类都拥有多个连接点：例如 ArithmethicCalculator 的所有方法实际上都是连接点，即连接点是程序类中客观存在的事务。AOP 通过切点定位到特定的连接点。类比：连接点相当于数据库中的记录，切点相当于查询条件。切点和连接点不是一对一的关系，一个切点匹配多个连接点，切点通过 org.springframework.aop.Pointcut 接口进行描述，它使用类和方法作为连接点的查询条件。</p><p><br/>','切面(Aspect):  横切关注点(跨越应用程序多个模块的功能)被模块化的特殊对象通知(Advice):  切面必须要完成的工作目标(Target): 被通知的对象代理(Proxy): 向目标对象应用通知之后创建的对象连接点（Joinpoint）：程序执行的某个特定位置：如类某个方法调用前、调用后、方法抛出异常后等。连接点由两个信息确定：方法表示的程序执行点；相对点表示的方位。例如 Arithm......',10034,'user_icon/10034.jpg','fan220','2016-09-29 11:20:53',0,31,0,0,'',NULL,1),(172,0,'Error configuring application ContextLoaderListener','<span style=\"font-size: 20px;\">严重: Error configuring application listener of class org.springframework.web.context.ContextLoaderListener</span></p><p><span style=\"font-size: 20px;\">java.lang.ClassNotFoundException: org.springframework.web.context.ContextLoaderListener</span></p><p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1713)</span></p><p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1558)</span></p><p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;at org.apache.catalina.core.DefaultInstanceManager.loadClass(DefaultInstanceManager.java:527)</span></p><p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;at org.apache.catalina.core.DefaultInstanceManager.loadClassMaybePrivileged(DefaultInstanceManager.java:509)</span></p><p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;at org.apache.catalina.core.DefaultInstanceManager.newInstance(DefaultInstanceManager.java:137)</span></p><p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4733)</span></p><p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5291)</span></p><p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)</span></p><p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1559)</span></p><p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1549)</span></p><p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;at java.util.concurrent.FutureTask.run(Unknown Source)</span></p><p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)</span></p><p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)</span></p><p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;at java.lang.Thread.run(Unknown Source)</span></p><p><span style=\"font-size: 20px;\">&nbsp;</span></p><p><span style=\"font-size: 20px;\">七月 18, 2014 11:38:41 下午 org.apache.catalina.core.StandardContext listenerStart</span></p><p><span style=\"font-size: 20px;\">严重: Skipped installing application listeners due to previous error(s)</span></p><p><span style=\"font-size: 20px;\">七月 18, 2014 11:38:41 下午 org.apache.catalina.core.StandardContext startInternal</span></p><p><span style=\"font-size: 20px;\">严重: Error listenerStart</span></p><p><span style=\"font-size: 20px;\">七月 18, 2014 11:38:41 下午 org.apache.catalina.core.StandardContext startInternal</span></p><p><span style=\"font-size: 20px;\">严重: Context [/UniversityServer] startup failed due to previous errors</span></p><p><span style=\"font-size: 20px;\">七月 18, 2014 11:38:41 下午 org.apache.coyote.AbstractProtocol start</span></p><p><span style=\"font-size: 20px;\">信息: Starting ProtocolHandler [&quot;http-bio-8080&quot;]</span></p><p><span style=\"font-size: 20px;\">七月 18, 2014 11:38:41 下午 org.apache.coyote.AbstractProtocol start</span></p><p><span style=\"font-size: 20px;\">信息: Starting ProtocolHandler [&quot;ajp-bio-8009&quot;]</span></p><p><span style=\"font-size: 20px;\">七月 18, 2014 11:38:41 下午 org.apache.catalina.startup.Catalina start</span></p><p><span style=\"font-size: 20px;\">信息: Server startup in 2265 ms</span></p><p><span style=\"font-size: 20px;\"><br/></span></p><p><span style=\"font-size: 20px;\"><br/></span></p><p><span style=\"font-size: 20px;\"><br/><span style=\"font-size: 16px;\">关于这个问题，到目前还没有找到问题的原因，同样的问题在CSDN上面已经有人发了帖子发问到回复时间跨度超过4年，不停地有人遇到类似的问题，但是问题却依然存在。关于场景有必要说明一下。<br/>1、Maven已经引用spring-web-3.2.4.RELEASE.jar包；<br/>2、类搜索也能搜索到；<br/>3、发布以后lib里面也有spring-web-3.2.4.RELEASE.jar</span></span></p><p><span style=\"font-size: 20px;\"><span style=\"font-size: 16px;\"><br/>4、项目使用IDEA打开运行正常。</span></span></p><p><span style=\"font-size: 20px;\"><span style=\"font-size: 16px;\"><br/></span></span></p><p><span style=\"font-size: 20px;\"><span style=\"font-size: 16px;\"><img src=\"http://www.yneit.com/wp-content/uploads/2014/07/QQ%E5%9B%BE%E7%89%8720140718235240.jpg\"/></span></span></p><p><span style=\"font-size: 20px;\"><span style=\"font-size: 16px;\"><br/></span></span></p><p><span style=\"font-size: 20px;\"><span style=\"font-size: 16px;\"><br/></span></span></p><p><br/>','严重: Error configuring application listener of class org.springframework.web.context.ContextLoaderListenerjava.lang.ClassNotFoundException: org.springframework.web.context.ContextLoaderListener    at o......',10034,'user_icon/10034.jpg','fan220','2016-10-19 10:30:36',0,0,0,0,'http://www.yneit.com/wp-content/uploads/2014/07/QQ%E5%9B%BE%E7%89%8720140718235240.jpg|',NULL,0),(173,2,'Error configuring application ContextLoaderListener','<p>							<span style=\"font-size: 20px;\">严重: Error configuring application listener of class org.springframework.web.context.ContextLoaderListener</span></p><p><span style=\"font-size: 20px;\">java.lang.ClassNotFoundException: org.springframework.web.context.ContextLoaderListener</span></p><p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1713)</span></p><p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1558)</span></p><p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;at org.apache.catalina.core.DefaultInstanceManager.loadClass(DefaultInstanceManager.java:527)</span></p><p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;at org.apache.catalina.core.DefaultInstanceManager.loadClassMaybePrivileged(DefaultInstanceManager.java:509)</span></p><p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;at org.apache.catalina.core.DefaultInstanceManager.newInstance(DefaultInstanceManager.java:137)</span></p><p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4733)</span></p><p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5291)</span></p><p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)</span></p><p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1559)</span></p><p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1549)</span></p><p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;at java.util.concurrent.FutureTask.run(Unknown Source)</span></p><p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)</span></p><p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)</span></p><p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;at java.lang.Thread.run(Unknown Source)</span></p><p><span style=\"font-size: 20px;\">&nbsp;</span></p><p><span style=\"font-size: 20px;\">七月 18, 2014 11:38:41 下午 org.apache.catalina.core.StandardContext listenerStart</span></p><p><span style=\"font-size: 20px;\">严重: Skipped installing application listeners due to previous error(s)</span></p><p><span style=\"font-size: 20px;\">七月 18, 2014 11:38:41 下午 org.apache.catalina.core.StandardContext startInternal</span></p><p><span style=\"font-size: 20px;\">严重: Error listenerStart</span></p><p><span style=\"font-size: 20px;\">七月 18, 2014 11:38:41 下午 org.apache.catalina.core.StandardContext startInternal</span></p><p><span style=\"font-size: 20px;\">严重: Context [/UniversityServer] startup failed due to previous errors</span></p><p><span style=\"font-size: 20px;\">七月 18, 2014 11:38:41 下午 org.apache.coyote.AbstractProtocol start</span></p><p><span style=\"font-size: 20px;\">信息: Starting ProtocolHandler [&quot;http-bio-8080&quot;]</span></p><p><span style=\"font-size: 20px;\">七月 18, 2014 11:38:41 下午 org.apache.coyote.AbstractProtocol start</span></p><p><span style=\"font-size: 20px;\">信息: Starting ProtocolHandler [&quot;ajp-bio-8009&quot;]</span></p><p><span style=\"font-size: 20px;\">七月 18, 2014 11:38:41 下午 org.apache.catalina.startup.Catalina start</span></p><p><span style=\"font-size: 20px;\">信息: Server startup in 2265 ms</span></p><p><span style=\"font-size: 20px;\"><br/></span></p><p><span style=\"font-size: 20px;\"><br/></span></p><p><span style=\"font-size: 20px;\"><br/><span style=\"font-size: 16px;\">关于这个问题，到目前还没有找到问题的原因，同样的问题在CSDN上面已经有人发了帖子发问到回复时间跨度超过4年，不停地有人遇到类似的问题，但是问题却依然存在。关于场景有必要说明一下。<br/>1、Maven已经引用spring-web-3.2.4.RELEASE.jar包；<br/>2、类搜索也能搜索到；<br/>3、发布以后lib里面也有spring-web-3.2.4.RELEASE.jar</span></span></p><p><span style=\"font-size: 20px;\"><span style=\"font-size: 16px;\"><br/>4、项目使用IDEA打开运行正常。</span></span></p><p><span style=\"font-size: 20px;\"><span style=\"font-size: 16px;\"><br/></span></span></p><p><span style=\"font-size: 20px;\"><span style=\"font-size: 16px;\"><img src=\"http://www.yneit.com/wp-content/uploads/2014/07/QQ%E5%9B%BE%E7%89%8720140718235240.jpg\"/></span></span></p><p><span style=\"font-size: 20px;\"><span style=\"font-size: 16px;\"><br/></span></span></p><p><span style=\"font-size: 20px;\"><span style=\"font-size: 16px;\"><br/></span></span></p><p><span style=\"font-size: 20px;\"><span style=\"font-size: 16px;\"></span></span></p><p><br/>碰到这个问题google很久也没有找到问题原因，回复的各类解答也都基本尝试没有效果。尝试删除掉Workspace也不行，最后直接删掉eclipse还是不行，至此关于eclipse上的这个问题只能说是无解。要是有人遇到同样的问题欢迎交流，期望能有合理的解答。如若有解决方案，稍后更新。 在这里很多人都是eclipse属于石器时代的工具，怎么说呢我相信用的熟悉的人都说这很强大，但是对于一个新手来说，坑爹不止一点点，为了环境、eclipse的问题消耗大量的时间，会让新手望而却步。免费开源固然很好，这也许正是免费开源所产生的综合症。<br/></p><p>众里寻他千百度，蓦然回首那人却在灯火阑珊处。刚发完帖子，现在补上解决方案：</p><p>错误原因：<br/>进入到tomcat的部署路径.metadata\\.plugins\\org.eclipse.wst.server.core\\tmp0\\wtpwebapps\\下检查了一下，发现工程部署后在WEB-INF文件夹下没有生成lib目录，正常情况下，会生成lib目录并把工程的所有依赖jar包都部署到该目录下。</p><p>解决方案：<br/>1、右键点击项目–选择Properties<br/>2、选择Deployment Assembly,在右边点击Add按钮，在弹出的窗口中选择Java Build Path Entries。点击Next，选择Maven Dependencies<br/>3、点击Finish，然后可以看到已经把Maven Dependencies添加到Web应用结构中了；<br/>操作完后，重新部署工程，不再报错了。</p><p><br/>\r\n						</p>','严重: Error configuring application listener of class org.springframework.web.context.ContextLoaderListenerjava.lang.ClassNotFoundException: org.springframework.web.context.ContextLoaderListener    at o......',10034,'user_icon/10034.jpg','fan220','2016-10-19 10:31:12',0,11,0,0,'http://www.yneit.com/wp-content/uploads/2014/07/QQ%E5%9B%BE%E7%89%8720140718235240.jpg|',NULL,1);

/*Table structure for table `fzqblog_blog_category` */

DROP TABLE IF EXISTS `fzqblog_blog_category`;

CREATE TABLE `fzqblog_blog_category` (
  `category_id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT NULL,
  `name` varchar(50) DEFAULT NULL,
  `rank` int(11) DEFAULT NULL,
  PRIMARY KEY (`category_id`),
  KEY `blog_category_id` (`category_id`),
  KEY `blog_user_id` (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

/*Data for the table `fzqblog_blog_category` */

insert  into `fzqblog_blog_category`(`category_id`,`user_id`,`name`,`rank`) values (1,10034,'生活趣事',1),(2,10034,'我碰见的bug',2);

/*Table structure for table `fzqblog_category` */

DROP TABLE IF EXISTS `fzqblog_category`;

CREATE TABLE `fzqblog_category` (
  `category_id` int(11) NOT NULL AUTO_INCREMENT,
  `pid` int(11) DEFAULT '0' COMMENT '父节点id',
  `name` varchar(30) DEFAULT NULL COMMENT '分类名称',
  `desc` varchar(500) DEFAULT NULL COMMENT '分类描述',
  `rank` int(11) DEFAULT NULL COMMENT '分类排名',
  `allow_post` int(1) DEFAULT '0' COMMENT '该分类下0允许发帖1不允许发帖',
  `show_in_bbs` char(1) DEFAULT 'Y' COMMENT '是否是论坛分类Y是N不是',
  `show_in_question` char(1) DEFAULT 'Y' COMMENT '是否是问答分类Y是N不是',
  `show_in_knowledge` char(1) DEFAULT 'Y' COMMENT '是否是知识库分类Y是N不是',
  `show_in_exam` char(1) DEFAULT 'Y' COMMENT '是否是考试区分类Y是N不是',
  PRIMARY KEY (`category_id`),
  KEY `topic_category_index_id` (`category_id`),
  KEY `idx_show_in_bbs` (`show_in_bbs`),
  KEY `idx_show_in_question` (`show_in_question`),
  KEY `idx_show_in_knowledge` (`show_in_knowledge`)
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8;

/*Data for the table `fzqblog_category` */

insert  into `fzqblog_category`(`category_id`,`pid`,`name`,`desc`,`rank`,`allow_post`,`show_in_bbs`,`show_in_question`,`show_in_knowledge`,`show_in_exam`) values (1,0,'JAVA','java类别',1,0,'Y','Y','Y','Y'),(2,0,'前台页面','前台页面',2,0,'Y','Y','Y','Y'),(3,2,'html','html',3,0,'Y','Y','Y','Y'),(4,2,'css','css',4,0,'Y','Y','Y','Y'),(5,2,'javascript','javascript',5,0,'Y','Y','Y','Y'),(6,1,'JAVASE','JAVASE',6,0,'Y','Y','Y','Y'),(7,1,'JAVAEE','JAVAEE',7,0,'Y','Y','Y','Y'),(9,0,'学习资料','学习资料',8,0,'Y','Y','Y','N'),(10,0,'博客官方','博客意见和bug提交',9,0,'Y','N','N','N'),(11,10,'博客bug提交','欢迎提交bug',10,0,'Y','N','N','N'),(12,9,'资料分享','学习资料分享',11,0,'Y','Y','Y','Y');

/*Table structure for table `fzqblog_collection` */

DROP TABLE IF EXISTS `fzqblog_collection`;

CREATE TABLE `fzqblog_collection` (
  `article_id` int(11) NOT NULL DEFAULT '0',
  `article_type` char(1) NOT NULL,
  `article_user_id` int(11) DEFAULT NULL,
  `user_id` int(11) NOT NULL,
  `title` varchar(300) DEFAULT NULL,
  `create_time` datetime DEFAULT NULL,
  PRIMARY KEY (`article_id`,`article_type`,`user_id`),
  KEY `collection_index_articleid` (`article_id`),
  KEY `collection_index_userid` (`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `fzqblog_collection` */

insert  into `fzqblog_collection`(`article_id`,`article_type`,`article_user_id`,`user_id`,`title`,`create_time`) values (95,'T',10034,10034,'弄个solr中文网怎么样','2016-09-22 09:52:51'),(95,'T',10034,10041,'弄个solr中文网怎么样','2016-10-05 01:34:07'),(96,'T',10035,10034,'时间显示应该改为中文的','2016-09-22 17:27:12'),(96,'T',10035,10041,'时间显示应该改为中文的','2016-10-08 22:53:09'),(373,'K',10000,10034,'IBM SPSS Decision Management 和 IBM WebSphere ILOG JRules 集成，第 2 部分: 本地集成方法','2016-09-27 10:17:41'),(376,'K',10000,10034,'Mybatis 通用 Mapper 1.1.0 版发布','2016-09-19 15:40:53'),(376,'K',10000,10035,'Mybatis 通用 Mapper 1.1.0 版发布','2016-09-01 12:38:03');

/*Table structure for table `fzqblog_comment` */

DROP TABLE IF EXISTS `fzqblog_comment`;

CREATE TABLE `fzqblog_comment` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `pid` int(11) DEFAULT NULL,
  `article_id` int(11) DEFAULT NULL COMMENT '文章的ID',
  `content` longtext,
  `user_id` int(11) DEFAULT NULL,
  `create_time` datetime DEFAULT NULL,
  `source_from` char(1) DEFAULT 'P' COMMENT 'P代表PC端发出',
  `article_type` char(255) DEFAULT 'T',
  `user_name` varchar(50) DEFAULT NULL,
  `user_icon` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `topic_comment_index_id` (`id`),
  KEY `topic_comment_index_pid` (`pid`),
  KEY `topic_comment_index_topicid` (`article_id`)
) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8;

/*Data for the table `fzqblog_comment` */

insert  into `fzqblog_comment`(`id`,`pid`,`article_id`,`content`,`user_id`,`create_time`,`source_from`,`article_type`,`user_name`,`user_icon`) values (1,0,376,'啦啦啦',10035,'2016-09-11 03:24:26',NULL,'K','1','user_icon/10035.jpg'),(2,0,372,'<img src=\"http://img.baidu.com/hi/jx2/j_0014.gif\"/>',10040,'2016-09-11 03:30:44',NULL,'K','时光','user_icon/10040.jgp'),(3,0,8,'啦啦啦<br/>',10035,'2016-09-11 03:32:43',NULL,'A','1','user_icon/10035.jpg'),(4,1,376,'[熊猫]',10000,'2016-09-11 12:27:14',NULL,'K','官方小编','user_icon/10000.jpg'),(5,0,92,'000<br/>',10035,'2016-09-13 16:02:34',NULL,'T','1','user_icon/10035.jpg'),(6,5,92,'<a href=\"http://www.fzqblog.top/user/10035\"  class=\"referer\"  target=\"_blank\">@1</a>  发发发[奥特曼]',10034,'2016-09-29 15:14:24',NULL,'T','fan220','user_icon/10034.jpg'),(7,0,96,'辣鸡<br/>',10034,'2016-10-10 15:58:58',NULL,'T','fan220','user_icon/10034.jpg'),(8,7,96,'0000',10034,'2016-10-13 14:43:57',NULL,'T','fan220','user_icon/10034.jpg'),(9,7,96,'<a href=\"http://www.fzqblog.top/user/10034\"  class=\"referer\"  target=\"_blank\">@fan220</a>  00000',10034,'2016-10-13 14:44:01',NULL,'T','fan220','user_icon/10034.jpg'),(10,7,96,'00000',10034,'2016-10-13 14:44:04',NULL,'T','fan220','user_icon/10034.jpg'),(11,5,92,'000000',10034,'2016-10-13 14:45:01',NULL,'T','fan220','user_icon/10034.jpg'),(12,5,92,'<a href=\"http://www.fzqblog.top/user/10034\"  class=\"referer\"  target=\"_blank\">@fan220</a>  000',10035,'2016-10-13 15:28:57',NULL,'T','1','user_icon/10035.jpg'),(13,0,92,'qwq<br/>',10035,'2016-10-13 15:45:48',NULL,'T','1','user_icon/10035.jpg'),(14,0,97,'+1<br/>',10042,'2016-10-27 10:54:57',NULL,'T','sbfqz','user_icon/10042.jgp'),(15,0,99,'图都没有<br/>',10043,'2016-11-01 10:47:13',NULL,'T','shyer','user_icon/10043.jgp'),(16,15,99,'恩恩对啊',10043,'2016-11-01 10:47:25',NULL,'T','shyer','user_icon/10043.jgp');

/*Table structure for table `fzqblog_exam` */

DROP TABLE IF EXISTS `fzqblog_exam`;

CREATE TABLE `fzqblog_exam` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `exam_title` text COMMENT '标题',
  `analyse` text COMMENT '答案解析',
  `category_id` int(11) DEFAULT NULL COMMENT '分类',
  `choose_type` int(2) DEFAULT NULL COMMENT '1是单选2是多选',
  `user_id` int(11) DEFAULT NULL COMMENT '发题人ID',
  `user_icon` varchar(50) DEFAULT NULL COMMENT '发题人头像',
  `user_name` varchar(50) DEFAULT NULL COMMENT '发题人名称',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `status` int(11) DEFAULT '0' COMMENT '0为未审核，1为审核',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

/*Data for the table `fzqblog_exam` */

insert  into `fzqblog_exam`(`id`,`exam_title`,`analyse`,`category_id`,`choose_type`,`user_id`,`user_icon`,`user_name`,`create_time`,`status`) values (1,'劫怎么打亚索','亚索主e伤害高 用闪现躲开实现反杀',1,1,10043,'user_icon/10043.jgp','shyer','2016-11-01 10:56:24',0);

/*Table structure for table `fzqblog_exam_detail` */

DROP TABLE IF EXISTS `fzqblog_exam_detail`;

CREATE TABLE `fzqblog_exam_detail` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `exam_id` int(11) DEFAULT NULL COMMENT '对应题目的id',
  `answer` varchar(500) DEFAULT NULL COMMENT '答案',
  `is_right_answer` int(1) unsigned DEFAULT NULL COMMENT '0为非正确答案，1为正确答案',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

/*Data for the table `fzqblog_exam_detail` */

insert  into `fzqblog_exam_detail`(`id`,`exam_id`,`answer`,`is_right_answer`) values (1,1,'躲q',0),(2,1,'躲w',0),(3,1,'躲e',1),(4,1,'躲r',0);

/*Table structure for table `fzqblog_knowledge` */

DROP TABLE IF EXISTS `fzqblog_knowledge`;

CREATE TABLE `fzqblog_knowledge` (
  `topic_id` int(11) NOT NULL AUTO_INCREMENT,
  `p_category_id` int(11) DEFAULT NULL COMMENT '组ID',
  `category_id` int(11) DEFAULT NULL COMMENT '类型ID',
  `title` varchar(100) DEFAULT '' COMMENT '标题',
  `content` longtext COMMENT '内容',
  `summary` text COMMENT '内容摘要',
  `user_id` int(11) DEFAULT NULL COMMENT '作者ID',
  `user_icon` varchar(50) DEFAULT NULL COMMENT '作者头像',
  `user_name` varchar(50) DEFAULT NULL COMMENT '作者名字',
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '发表时间',
  `comment_count` int(11) DEFAULT '0' COMMENT '评论人数',
  `read_count` int(11) DEFAULT '0' COMMENT '阅读人数',
  `collection_count` int(11) DEFAULT '0' COMMENT '收藏人数',
  `like_count` int(11) DEFAULT '0' COMMENT '喜欢人数',
  `topic_image` mediumtext,
  `topic_image_thum` mediumtext COMMENT '文章缩列图',
  `status` int(1) DEFAULT '0' COMMENT '0是未审核 1是审核',
  PRIMARY KEY (`topic_id`),
  KEY `idx_topic_id` (`topic_id`),
  KEY `idx_category_id` (`p_category_id`,`category_id`)
) ENGINE=InnoDB AUTO_INCREMENT=381 DEFAULT CHARSET=utf8;

/*Data for the table `fzqblog_knowledge` */

insert  into `fzqblog_knowledge`(`topic_id`,`p_category_id`,`category_id`,`title`,`content`,`summary`,`user_id`,`user_icon`,`user_name`,`create_time`,`comment_count`,`read_count`,`collection_count`,`like_count`,`topic_image`,`topic_image_thum`,`status`) values (326,1,6,'Ajax 实现级联查询','<h2 style=\"margin: 16.3px 0px 0px; font-size: 14pt;\">1 级联下拉列表</h2>\n<h3 style=\"font-size: 10.5pt; margin: 10px 0px;\">1.1 问题</h3>\n<p style=\"margin: 3px; padding: 2px; text-indent: 21pt; font-size: 10.5pt;\">使用AJAX实现级联下拉列表，实现效果如下图所示：</p>\n<p><img class=\"lazy-load\" data-original=\"\" style=\"max-width: 900px;\" src=\"http://www.fzqblog.top/upload/201608/1471958780799.png\"></p>\n<h3 style=\"font-size: 10.5pt; margin: 10px 0px;\">1.2 方案</h3>\n<p style=\"margin: 3px; padding: 2px; text-indent: 21pt; font-size: 10.5pt;\">1）city.jsp</p>\n<pre class=\"code sh_java snippet-formatted sh_sourceCode\" style=\"font-size: 14px; padding: 1em; line-height: 1.8em; overflow: auto; position: relative; border-top-left-radius: 15px; border-top-right-radius: 15px; border-bottom-right-radius: 15px; border-bottom-left-radius: 15px; box-shadow: rgb(0, 0, 0) 2px 2px 5px; -webkit-box-shadow: rgb(0, 0, 0) 2px 2px 5px; background-color: rgb(238, 238, 238);\">&lt;%@&nbsp;page&nbsp;&nbsp;contentType=\"text/html;&nbsp;charset=utf-8\"\npageEncoding=\"utf-8\"%&gt;\n&lt;html&gt;\n&lt;head&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;Insert&nbsp;title&nbsp;here&lt;/title&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;script&nbsp;type=\"text/javascript\"\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;class=\"lazy-load\" data-original=\"js/prototype-1.6.0.3.js\"&gt;&lt;/script&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;script&nbsp;type=\"text/javascript\"&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\nfunction&nbsp;getXmlHttpRequest(){\nvar&nbsp;xhr&nbsp;=&nbsp;null;\nif((typeof&nbsp;XMLHttpRequest)!=\'undefined\'){\n&nbsp;&nbsp;&nbsp;&nbsp;xhr&nbsp;=&nbsp;new&nbsp;XMLHttpRequest();\n}else&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;xhr&nbsp;=&nbsp;new&nbsp;ActiveXObject(\'Microsoft.XMLHttp\');\n}\nreturn&nbsp;xhr;\n}\n\nfunction&nbsp;change(v1){\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;xhr&nbsp;=&nbsp;getXmlHttpRequest();\n&nbsp;&nbsp;&nbsp;&nbsp;xhr.open(\'post\',\'city.do\',true);\n&nbsp;&nbsp;&nbsp;&nbsp;xhr.setRequestHeader(\"Content-Type\",\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"application/x-www-form-urlencoded\");\n&nbsp;&nbsp;&nbsp;&nbsp;xhr.onreadystatechange=function(){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//服务器返回&nbsp;yy,岳阳;cs,长沙;hh,怀化\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(xhr.readyState&nbsp;==&nbsp;4){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;txt&nbsp;=&nbsp;xhr.responseText;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;arr&nbsp;=&nbsp;txt.split(\';\');\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(\'s2\').innerHTML&nbsp;=&nbsp;\'\';\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(i=0;i&lt;arr.length;i++){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;arr1&nbsp;=&nbsp;arr[i];\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;arr2&nbsp;=&nbsp;arr1.split(\',\');\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;op&nbsp;=&nbsp;new&nbsp;Option(arr2[1],arr2[0]);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(\'s2\').options[i]&nbsp;=&nbsp;op;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;};\n&nbsp;&nbsp;&nbsp;&nbsp;xhr.send(\'name=\'&nbsp;+&nbsp;v1);\n}\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&nbsp;style=\"font-size:30px;\"&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;select&nbsp;id=\"s1\"&nbsp;style=\"width:120px;\"\n&nbsp;&nbsp;&nbsp;&nbsp;onchange=\"change(this.value);\"&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;option&nbsp;value=\"hn\"&gt;湖南&lt;/option&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;option&nbsp;value=\"bj\"&gt;北京&lt;/option&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/select&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;select&nbsp;id=\"s2\"&nbsp;style=\"width:120px;\"&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/select&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n<p style=\"margin: 3px; padding: 2px; text-indent: 21pt; font-size: 10.5pt;\">2）ActionServlet</p>\n<pre class=\"code sh_java snippet-formatted sh_sourceCode\" style=\"font-size: 14px; padding: 1em; line-height: 1.8em; overflow: auto; position: relative; border-top-left-radius: 15px; border-top-right-radius: 15px; border-bottom-right-radius: 15px; border-bottom-left-radius: 15px; box-shadow: rgb(0, 0, 0) 2px 2px 5px; -webkit-box-shadow: rgb(0, 0, 0) 2px 2px 5px; background-color: rgb(238, 238, 238);\">package&nbsp;web;\n\nimport&nbsp;java.io.IOException;\nimport&nbsp;java.io.PrintWriter;\nimport&nbsp;javax.servlet.ServletException;\nimport&nbsp;javax.servlet.http.HttpServlet;\nimport&nbsp;javax.servlet.http.HttpServletRequest;\nimport&nbsp;javax.servlet.http.HttpServletResponse;\n\npublic&nbsp;class&nbsp;ActionServlet&nbsp;extends&nbsp;HttpServlet&nbsp;{\n\npublic&nbsp;void&nbsp;service(HttpServletRequest&nbsp;request,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HttpServletResponse&nbsp;response)\n&nbsp;&nbsp;&nbsp;&nbsp;throws&nbsp;ServletException,&nbsp;IOException&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;uri&nbsp;=&nbsp;request.getRequestURI();\n&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;path&nbsp;=&nbsp;uri.substring(uri.lastIndexOf(\"/\"),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uri.lastIndexOf(\".\"));\n&nbsp;&nbsp;&nbsp;&nbsp;response.setContentType(\"text/html;charset=utf-8\");\n&nbsp;&nbsp;&nbsp;&nbsp;PrintWriter&nbsp;out&nbsp;=&nbsp;response.getWriter();\n&nbsp;&nbsp;&nbsp;&nbsp;if(path.equals(\"/city\")){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;name&nbsp;=&nbsp;request.getParameter(\"name\");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(name.equals(\"hn\")){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out.println(\"yy,岳阳;hh,怀化;cs,长沙\");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else&nbsp;if(name.equals(\"bj\")){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out.println(\"cy,朝阳;hd,海淀;dc,东城;xc,西城\");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;out.close();\n}\n}</pre>\n<p style=\"margin: 3px; padding: 2px; text-indent: 21pt; font-size: 10.5pt;\">3）访问http://localhost:8080/web13_ajax/city.jsp</p>\n<p><img class=\"lazy-load\" data-original=\"\" style=\"max-width: 900px; font-family: 微软雅黑, \'Times New Roman\'; white-space: normal;\" src=\"http://www.fzqblog.top/upload/201608/1471958780941.png\"><span style=\"font-family: 微软雅黑, \'Times New Roman\';\"></span></p>\n<p><br></p>','1 级联下拉列表1.1 问题使用AJAX实现级联下拉列表，实现效果如下图所示：1.2 方案1）city.jsp    Insert title here                function getXmlHttpRequest(){var xhr = null;if((typeof XMLHttpRequest)!=\'undefined\'){    xhr = new XMLHttpRe......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:26:21',0,0,0,0,'http://www.fzqblog.top/upload/201608/1471958780799.png|http://www.fzqblog.top/upload/201608/1471958780941.png|',NULL,1),(327,1,6,'又看到一种懒汉式单例模式的实现','<p>发上来大家瞧瞧，就是第二种方式，其他我所知道的两种也发上来了</p>\n<p>第一种，大家常见的</p>\n<pre class=\"brush:java;toolbar:false\">private&nbsp;static&nbsp;Singleton&nbsp;instance;\nprivate&nbsp;Singleton(){}\npublic&nbsp;static&nbsp;synchronized&nbsp;Singleton&nbsp;getInstance(){\n&nbsp;&nbsp;if(instance==null){\n&nbsp;&nbsp;&nbsp;&nbsp;instance&nbsp;=&nbsp;new&nbsp;Singleton();\n&nbsp;&nbsp;}\n&nbsp;&nbsp;return&nbsp;instance;\n}</pre>\n<p>第二种，JAVA多线程编程中的双重检查锁定方式（DCL）</p>\n<pre class=\"brush:java;toolbar:false\">private&nbsp;volatile&nbsp;static&nbsp;Singleton&nbsp;instance;\nprivate&nbsp;Singleton(){}\npublic&nbsp;static&nbsp;Singleton&nbsp;getInstance(){\n&nbsp;&nbsp;if(instance==null){\n&nbsp;&nbsp;&nbsp;&nbsp;synchronized(Singleton.class){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(instance==null){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instance&nbsp;=&nbsp;new&nbsp;Singleton();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;\n&nbsp;&nbsp;}\n&nbsp;&nbsp;return&nbsp;instance;\n}</pre>\n<p>第三种，内部类方式</p>\n<pre class=\"brush:java;toolbar:false\">private&nbsp;Singleton(){}\nprivate&nbsp;static&nbsp;class&nbsp;SingletonHolder(){\n&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;Singleton&nbsp;instance&nbsp;=&nbsp;new&nbsp;Singleton();\n}\npublic&nbsp;static&nbsp;Singleton&nbsp;getInstance(){\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;SingletonHolder.instance;\n}</pre>\n<p><br></p>\n<p>第一种自不必多说，第三种看之前的帖子也是一目了然 <a _class=\"lazy-load\" data-original=\"http://www.ulewo.com/knowledge/15\" href=\"http://www.ulewo.com/knowledge/15\">http://www.ulewo.com/knowledge/15</a><br></p>\n<p>第二种嘛，百度一下DCL单例模式的实现就明白，问题在于volatile关键字的意义，我就抛个砖了，看看各位大神的玉在哪儿了<br> </p>','发上来大家瞧瞧，就是第二种方式，其他我所知道的两种也发上来了第一种，大家常见的private static Singleton instance;private Singleton(){}public static synchronized Singleton getInstance(){  if(instance==null){    instance = new Singleton();  }......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:26:21',0,0,0,0,'',NULL,1),(328,1,6,'《深入理解mybatis原理》 MyBatis的二级缓存的设计原理','<div> \n <p>MyBatis的二级缓存是Application级别的缓存，它可以提高对数据库查询的效率，以提高应用的性能。本文将全面分析MyBatis的二级缓存的设计原理。</p> \n <h3> <span> <strong>1.MyBatis的缓存机制整体设计以及二级缓存的工作模式</strong> </span> </h3> \n <p> <img class=\"alignCenter\" data-original=\"\" alt=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958781836.png\"> </p> \n <p> <span> <span> 如上图所示，当开一个会话时，一个 <span> <strong> <span>SqlSession</span> </strong> </span> 对象会使用一个 <span> <strong> <span>Executor</span> </strong> </span> 对象来完成会话操作， <span> <strong>MyBatis</strong> </span> 的二级缓存机制的关键就是对这个 <span> <strong> <span>Executor</span> </strong> </span> 对象做文章。如果用户配置了\" <span> <strong> <span>cacheEnabled=true</span> </strong> </span> \"，那么 <span> <span> <strong>MyBatis</strong> </span> </span> 在为 <span> <span> <strong> <span>SqlSession</span> </strong> </span> </span> 对象创建 <span> <span> <strong> <span>Executor</span> </strong> </span> </span> 对象时，会对 <span> <span> <strong> <span>Executor</span> </strong> </span> </span> 对象加上一个装饰者： <span> <strong>CachingExecutor</strong> </span> ，这时 <span> <span> <strong> <span>SqlSession</span> </strong> </span> </span> 使用 <span> <span> <strong>CachingExecutor</strong> </span> </span> 对象来完成操作请求。 <span> <span> <strong>CachingExecutor</strong> </span> </span> 对于查询请求，会先判断该查询请求在 <span> <strong>Application</strong> </span> 级别的二级缓存中是否有缓存结果，如果有查询结果，则直接返回缓存结果；如果缓存中没有，再交给真正的 <span> <span> <strong> <span>Executor</span> </strong> </span> </span> 对象来完成查询操作，之后 <span> <span> <span> <strong>CachingExecutor</strong> </span> </span> </span> 会将真正 <span> <span> <span> <strong> <span>Executor</span> </strong> </span> </span> </span> 返回的查询结果放置到缓存中，然后在返回给用户。 </span> </span> </p> \n <p> <img class=\"alignCenter\" data-original=\"\" alt=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958782171.png\"> </p> \n <p> <span> <span> <span> <span> <strong>CachingExecutor</strong> </span> </span> </span> </span> <span> 是 <span> <span> <span> <span> <strong>Executor</strong> </span> </span> </span> </span> 的装饰者，以增强 <span> <span> <span> <span> <span> <span> <strong>Executor</strong> </span> </span> </span> </span> </span> </span> 的功能，使其具有缓存查询的功能，这里用到了设计模式中的装饰者模式， </span> </p> \n <p> <span> <span> <span> <span> <span> <strong>CachingExecutor</strong> </span> </span> </span> </span> </span> 和 <span> <span> <span> <span> <span> <span> <strong>Executor</strong> </span> </span> </span> </span> </span> </span> 的接口的关系如下类图所示： </p> \n <p> <img class=\"alignCenter\" data-original=\"\" alt=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958782463.png\"> </p> \n <h3> <span>2 . MyBatis二级缓存的划分</span> </h3> \n <p> </p> \n <p> <span> <span> <span> <span> <strong>MyBatis</strong> </span> </span> </span> </span> 并不是简单地对整个 <span> <strong>Application</strong> </span> 就只有一个 <span> <strong>Cache</strong> </span> 缓存对象，它将缓存划分的更细，即是 <span>Mapper</span> 级别的，即每一个Mapper都可以拥有一个 <span> <span> <strong>Cache</strong> </span> </span> 对象，具体如下： <br> </p> \n <p> </p> \n <h4>a.为每一个Mapper分配一个Cache缓存对象（使用&lt;cache&gt;节点配置）；</h4> \n <p> b.多个Mapper共用一个Cache缓存对象（使用&lt;cache-ref&gt;节点配置）； <br> </p> \n <p> </p> \n <div> \n  <h4>a.为每一个Mapper分配一个Cache缓存对象（使用&lt;cache&gt;节点配置）</h4> \n  <p> <span> <span> <span> <span> <span> <strong>MyBatis</strong> </span> </span> </span> </span> </span> 将 <span> <span> <strong>Application</strong> </span> </span> 级别的二级缓存细分到 <span> <strong> <span>Mapper</span> </strong> </span> 级别，即对于每一个 <span>Mapper.xml</span> ,如果在其中使用了 <span>&lt;cache&gt;</span> 节点，则 <span> <span> <span> <span> <span> <span> <strong>MyBatis</strong> </span> </span> </span> </span> </span> </span> 会为这个 <span> <span> <strong> <span>Mapper</span> </strong> </span> </span> 创建一个 <span> <span> <strong>Cache</strong> </span> </span> 缓存对象，如下图所示： </p> \n  <p> <img class=\"alignCenter\" data-original=\"\" alt=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958782567.png\"> </p> \n  <p> <span>注：&nbsp; 上述的每一个Cache对象，都会有一个自己所属的namespace命名空间，并且会将Mapper的 namespace作为它们的ID；</span> </p> \n </div> \n <p> </p> \n <div> \n  <h4>b.多个Mapper共用一个Cache缓存对象（使用&lt;cache-ref&gt;节点配置）</h4> \n  <p> <span> 如果你想让多个 <span> <span> <span> <strong> <span>Mapper</span> </strong> </span> </span> </span> 公用一个 <span> <span> <span> <strong>Cache</strong> </span> </span> </span> 的话，你可以使用 <strong> <span>&lt;cache-ref namespace=\"\"&gt;</span> </strong> 节点，来指定你的这个 <span> <span> <span> <strong> <span>Mapper</span> </strong> </span> </span> </span> 使用到了哪一个 <span> <span> <span> <span> <strong> <span>Mapper</span> </strong> </span> </span> </span> </span> 的 <span> <span> <span> <strong>Cache</strong> </span> </span> </span> 缓存。 </span> </p> \n  <p> <img class=\"alignCenter\" data-original=\"\" alt=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958782878.png\"> </p> \n </div> \n <h3> <span> <strong>3. 使用二级缓存，必须要具备的条件</strong> </span> </h3> \n <p> <span> <span> <span> <span> <span> <span> <strong>MyBatis</strong> </span> </span> </span> </span> </span> </span> <span>对二级缓存的支持粒度很细，它会指定某一条查询语句是否使用二级缓存。 </span> </p> \n <p> 虽然在 <span> <span> <span> <span> <span> <strong> <span>Mapper</span> </strong> </span> </span> </span> </span> </span> 中配置了 <span> <strong>&lt;cache&gt;</strong> </span> ,并且为此 <span> <span> <span> <span> <span> <strong> <span>Mapper</span> </strong> </span> </span> </span> </span> </span> 分配了 <span>Cache</span> 对象，这并不表示我们使用 <span> <span> <span> <span> <span> <strong> <span>Mapper</span> </strong> </span> </span> </span> </span> </span> 中定义的查询语句查到的结果都会放置到 <span> <strong> <span>Cache</span> </strong> </span> 对象之中，我们必须指定 <span> <span> <span> <span> <span> <strong> <span>Mapper</span> </strong> </span> </span> </span> </span> </span> 中的某条选择语句是否支持缓存，即如下所示，在 <span> <strong>&lt;select&gt;</strong> </span> 节点中配置 <span> <strong>useCache=\"true\"</strong> </span> ， <span> <span> <span> <span> <span> <strong> <span>Mapper</span> </strong> </span> </span> </span> </span> </span> 才会对此 <span> <strong>Select</strong> </span> 的查询支持缓存特性，否则，不会对此 <span> <span> <strong>Select</strong> </span> </span> 查询，不会经过 <span> <span> <strong> <span>Cache</span> </strong> </span> </span> 缓存。如下所示， <span> <span> <span> <strong>Select</strong> </span> </span> </span> 语句配置了 <span> <span> <strong>useCache=\"true\"</strong> </span> </span> ，则表明这条 <span> <span> <span> <span> <strong>Select</strong> </span> </span> </span> </span> 语句的查询会使用二级缓存。 </p> \n <pre class=\"brush:java;toolbar:false\">&lt;select id=\"selectByMinSalary\" resultMap=\"BaseResultMap\" parameterType=\"java.util.Map\" useCache=\"true\"&gt;</pre> \n <p> 总之，要想使某条 <span> <span> <span> <span> <strong>Select</strong> </span> </span> </span> </span> 查询支持二级缓存，你需要保证： </p> \n <p> </p> \n <h4>1.&nbsp; MyBatis支持二级缓存的总开关：全局配置变量参数 &nbsp; cacheEnabled=true</h4> \n <p>2. 该select语句所在的Mapper，配置了&lt;cache&gt; 或&lt;cached-ref&gt;节点，并且有效</p> \n <p> 3. 该select语句的参数 useCache=true <br> </p> \n <h3> <span>4. 一级缓存和二级缓存的使用顺序 </span> </h3> \n <p> <font face=\"Microsoft YaHei\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 请注意，如果你的 <span> <span> <span> <span> <span> <span> <strong>MyBatis</strong> </span> </span> </span> </span> </span> </span> 使用了二级缓存，并且你的 <span> <span> <span> <span> <span> <span> <strong> <span>Mapper</span> </strong> </span> </span> </span> </span> </span> </span> 和 <strong> <span>select</span> </strong> 语句也配置使用了二级缓存，那么在执行 <span> <strong> <span>select</span> </strong> </span> 查询的时候， </font> <font face=\"Microsoft YaHei\"> <span> <span> <span> <span> <span> <span> <strong>MyBatis</strong> </span> </span> </span> </span> </span> </span> </font> 会先从二级缓存中取输入，其次才是一级缓存，即 <font face=\"Microsoft YaHei\"> <span> <span> <span> <span> <span> <span> <strong>MyBatis</strong> </span> </span> </span> </span> </span> </span> </font> 查询数据的顺序是： </p> \n <p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 二级缓存&nbsp;&nbsp;&nbsp; ———&gt; 一级缓存——&gt; 数据库 <br> </p> \n <p></p> \n <h3> <span>5. 二级缓存实现的选择</span> </h3> \n <p> <font face=\"Microsoft YaHei\">&nbsp;&nbsp;&nbsp;</font> <font face=\"Microsoft YaHei\"> <span> <span> <span> <span> <span> <span> <strong>MyBatis</strong> </span> </span> </span> </span> </span> </span> </font> 对二级缓存的设计非常灵活，它自己内部实现了一系列的 <strong> <span>Cache</span> </strong> 缓存实现类，并提供了各种缓存刷新策略如 <strong>LRU，FIFO</strong> 等等；另外， <font face=\"Microsoft YaHei\"></font> <font face=\"Microsoft YaHei\"> <span> <span> <span> <span> <span> <span> <strong>MyBatis</strong> </span> </span> </span> </span> </span> </span> </font> 还允许用户自定义 <span> <strong> <span>Cache</span> </strong> </span> 接口实现，用户是需要实现 <strong> <span>org.apache.ibatis.cache.Cache</span> </strong> 接口，然后将 <span> <span> <strong> <span>Cache</span> </strong> </span> </span> 实现类配置在 <span> <strong>&lt;cache&nbsp; type=\"\"&gt;</strong> </span> 节点的 <strong> <span>type</span> </strong> 属性上即可；除此之外， <font face=\"Microsoft YaHei\"></font> <font face=\"Microsoft YaHei\"> <span> <span> <span> <span> <span> <span> <strong>MyBatis</strong> </span> </span> </span> </span> </span> </span> </font> 还支持跟第三方内存缓存库如 <strong> <span>Memecached</span> </strong> 的集成，总之，使用 <font face=\"Microsoft YaHei\"></font> <font face=\"Microsoft YaHei\"></font> <font face=\"Microsoft YaHei\"> <span> <span> <span> <span> <span> <span> <strong>MyBatis</strong> </span> </span> </span> </span> </span> </span> </font> 的二级缓存有三个选择: </p> \n <h4>1.MyBatis自身提供的缓存实现；</h4> \n <h4>2. 用户自定义的Cache接口实现；</h4> \n <h4>3.跟第三方内存缓存库的集成；</h4> \n <h3> <span>6.&nbsp; MyBatis自身提供的二级缓存的实现</span> </h3> \n <p> <font face=\"Microsoft YaHei\">&nbsp;&nbsp;&nbsp;&nbsp;</font> <font face=\"Microsoft YaHei\"> <span> <span> <span> <span> <span> <span> <strong>MyBatis</strong> </span> </span> </span> </span> </span> </span> </font> 自身提供了丰富的，并且功能强大的二级缓存的实现，它拥有一系列的 <span> <strong> <span>Cache</span> </strong> </span> 接口装饰者，可以满足各种对缓存操作和更新的策略。 </p> \n <p> <font face=\"Microsoft YaHei\">&nbsp;&nbsp;&nbsp;&nbsp;</font> <font face=\"Microsoft YaHei\"> <span> <span> <span> <span> <span> <span> <strong>MyBatis</strong> </span> </span> </span> </span> </span> </span> </font> 定义了大量的 <span> <strong> <span>Cache</span> </strong> </span> 的装饰器来增强 <span> <strong> <span>Cache</span> </strong> </span> 缓存的功能，如下类图所示。 </p> \n <p> <font face=\"Microsoft YaHei\"> &nbsp;&nbsp;&nbsp;&nbsp; 对于每个 <span> <strong> <span>Cache</span> </strong> </span> 而言，都有一个容量限制， </font> <font face=\"Microsoft YaHei\"></font> <font face=\"Microsoft YaHei\"> <span> <span> <span> <span> <span> <span> <strong>MyBatis</strong> </span> </span> </span> </span> </span> </span> </font> 各供了各种策略来对 <span> <span> <strong> <span>Cache</span> </strong> </span> </span> 缓存的容量进行控制，以及对 <span> <span> <strong> <span>Cache</span> </strong> </span> </span> 中的数据进行刷新和置换。 <font face=\"Microsoft YaHei\"></font> <font face=\"Microsoft YaHei\"></font> <font face=\"Microsoft YaHei\"> <span> <span> <span> <span> <span> <span> <strong>MyBatis</strong> </span> </span> </span> </span> </span> </span> </font> 主要提供了以下几个刷新和置换策略： </p> \n <p> <span> <strong>LRU：（Least Recently Used）</strong> </span> ,最近最少使用算法，即如果缓存中容量已经满了，会将缓存中最近做少被使用的缓存记录清除掉，然后添加新的记录； </p> \n <p> <span>FIFO：（First in first out）</span> ,先进先出算法，如果缓存中的容量已经满了，那么会将最先进入缓存中的数据清除掉； </p> \n <p> <span>Scheduled</span> ：指定时间间隔清空算法，该算法会以指定的某一个时间间隔将 <span> <span> <strong> <span>Cache</span> </strong> </span> </span> 缓存中的数据清空； </p> \n <p> <img class=\"alignCenter\" data-original=\"\" alt=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958783063.png\"> </p> \n <h3> <span> <p>6. 写在后面（关于涉及到的设计模式）</p> </span> </h3> \n <p></p> \n <p> 在二级缓存的设计上，MyBatis大量地运用了装饰者模式，如CachingExecutor, 以及各种Cache接口的装饰器。关于装饰者模式，读者可以阅读相关资料，我的另外一篇博文 &nbsp;&nbsp; <span> <a target=\"_blank\" href=\"http://blog.csdn.net/luanlouis/article/details/19021803\" rel=\"nofollow,noindex\">Java 设计模式 装饰者模式</a> </span> 供读者参考。 </p> \n <p> <span>本文只是讲述MyBatis二级缓存的基本原理，关于自定义二级缓存和与第三方内存库的集成，将在后续的文章中再做讨论，敬请关注！</span> </p> \n <div> \n  <p>作者的话</p> \n  <p> <span></span> <span>本文是《深入理解mybatis原理》系列的其中一篇，如果您有兴趣，请关注该系列的其他文章～</span> </p> \n  <p>觉得本文不错，顺手点个赞哦～～您的鼓励，是我继续分享知识的强大动力！</p> \n  <p>如果您觉得有不妥或者错误的地方，还请您不吝指教！</p> \n </div> \n <p>-----------------------------------------------------------------------------------------------------------------------------------------</p> \n <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 本文源自&nbsp; http://blog.csdn.net/luanlouis/，如需转载，请注明出处，谢谢！</span> \n</div>\n<p>转自：http://blog.csdn.net/luanlouis/article/details/41408341</p>','  MyBatis的二级缓存是Application级别的缓存，它可以提高对数据库查询的效率，以提高应用的性能。本文将全面分析MyBatis的二级缓存的设计原理。    1.MyBatis的缓存机制整体设计以及二级缓存的工作模式           如上图所示，当开一个会话时，一个   SqlSession   对象会使用一个   Executor   对象来完成会话操作，  MyBatis  的......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:26:23',0,0,0,0,'http://www.fzqblog.top/upload/201608/1471958781836.png|http://www.fzqblog.top/upload/201608/1471958782171.png|http://www.fzqblog.top/upload/201608/1471958782463.png|http://www.fzqblog.top/upload/201608/1471958782567.png|http://www.fzqblog.top/upload/201608/1471958782878.png|http://www.fzqblog.top/upload/201608/1471958783063.png|',NULL,1),(329,1,6,'SSH整合','<div> \n <p>SSH整合</p> \n <p>最近没怎么手头上没什么事情，不过我感觉也是好事，毕竟一直忙碌刀会生锈的。</p> \n <p>所有最近收刀，静心磨刀，不为外面的什么各种项目所迷惑。收收心，毕竟磨刀不误砍柴工。总结下Spring整合Struts2和Hibernate。</p> \n <p>上篇总结了Spring整合Struts2这次我把Hibernate加了进来，Spring这个非常强大的框架也是真真正正的算得上有个有艺术品位的框架，IOC和AOP完美结合，不仅仅可以用在WEB上面在其他的平台下运用也是非常的广泛。</p> \n <p>下面开始做帖代码：</p> \n <p>第一步建好一个web工程后添加jar包：</p> \n <p> <br> <img class=\"alignCenter\" data-original=\"\" alt=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958783598.jpg\"> <br> 然后在WEB-INF下面创建applicationContext.xml用来配置Spring容器： <br> </p> \n <pre class=\"brush:java;toolbar:false\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:aop=\"http://www.springframework.org/schema/aop\"\n xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\n http://www.springframework.org/schema/aop\n http://www.springframework.org/schema/aop/spring-aop-2.5.xsd\"&gt;\n &lt;!-- 注册接口实现类 --&gt;\n &lt;bean id=\"datasource\" class=\"org.apache.commons.dbcp.BasicDataSource\"&gt;\n  &lt;property name=\"driverClassName\" value=\"com.mysql.jdbc.Driver\"&gt;&lt;/property&gt;\n  &lt;property name=\"url\"\n   value=\"jdbc:mysql://127.0.0.1:3306/test?characterEncoding=utf-8\"&gt;&lt;/property&gt;\n  &lt;property name=\"username\" value=\"root\"&gt;&lt;/property&gt;\n  &lt;property name=\"password\" value=\"root\"&gt;&lt;/property&gt;\n &lt;/bean&gt;\n\n &lt;bean id=\"sessionFactory\"\n  class=\"org.springframework.orm.hibernate3.LocalSessionFactoryBean\"&gt;\n  &lt;property name=\"dataSource\"&gt;\n   &lt;ref bean=\"datasource\" /&gt;\n  &lt;/property&gt;\n  &lt;property name=\"hibernateProperties\"&gt;\n   &lt;props&gt;\n    &lt;prop key=\"hibernate.dialect\"&gt;\n     org.hibernate.dialect.MySQL5Dialect\n    &lt;/prop&gt;\n    &lt;prop key=\"hibernate.hbm2ddl.auto\"&gt;update&lt;/prop&gt;\n    &lt;prop key=\"hibernate.show_sql\"&gt;true&lt;/prop&gt;\n   &lt;/props&gt;\n  &lt;/property&gt;\n  &lt;property name=\"mappingResources\"&gt;\n   &lt;list&gt;\n    &lt;value&gt;/com/zdx/domain/User.hbm.xml&lt;/value&gt;\n   &lt;/list&gt;\n  &lt;/property&gt;\n &lt;/bean&gt;\n &lt;bean id=\"userDao\" class=\"com.zdx.dao.impl.UserDaoImpl\"&gt;\n  &lt;property name=\"sessionFactory\"&gt;\n   &lt;ref bean=\"sessionFactory\" /&gt;\n  &lt;/property&gt;\n &lt;/bean&gt;\n\n &lt;bean id=\"loginAction\" class=\"com.zdx.action.LoginAction\"&gt;\n  &lt;property name=\"service\" ref=\"userService\"&gt;&lt;/property&gt;\n &lt;/bean&gt;\n &lt;bean id=\"userService\" class=\"com.zdx.service.UserService\"&gt;\n  &lt;property name=\"userDao\" ref=\"userDao\"&gt;&lt;/property&gt;\n &lt;/bean&gt;\n&lt;/beans&gt;</pre> \n <p>2.修改web.xml文件：</p> \n <pre class=\"brush:java;toolbar:false\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n xmlns=\"http://java.sun.com/xml/ns/javaee\"\n xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\n id=\"WebApp_ID\" version=\"3.0\"&gt;\n &lt;display-name&gt;Spring_Struts&lt;/display-name&gt;\n\n &lt;filter&gt;\n  &lt;filter-name&gt;struts2&lt;/filter-name&gt;\n  &lt;filter-class&gt;org.apache.struts2.dispatcher.FilterDispatcher&lt;/filter-class&gt;\n &lt;/filter&gt;\n\n &lt;filter-mapping&gt;\n  &lt;filter-name&gt;struts2&lt;/filter-name&gt;\n  &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n &lt;/filter-mapping&gt;\n &lt;!-- \n listener是Servlet的监听器，他可以监听客户端的请求、服务器端的操作等，\n 通过监听器，可以自动激发一些操作，如监听到在线的数量。当增加一个HttpSession时，\n 就激发sessionCreated()方法。监听器需要知道application.xml配置文件的位置\n \n  --&gt;\n &lt;listener&gt;\n  &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;\n &lt;/listener&gt;\n &lt;context-param&gt;\n  &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n  &lt;param-value&gt;/WEB-INF/applicationContext.xml&lt;/param-value&gt;\n &lt;/context-param&gt;\n\n &lt;welcome-file-list&gt;\n  &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;\n &lt;/welcome-file-list&gt;\n&lt;/web-app&gt;</pre> \n <p>class=\"lazy-load\" data-original下面创建struts.properties:</p> \n <pre class=\"brush:java;toolbar:false\">struts.objectFactory=spring</pre> \n <p> <span>class=\"lazy-load\" data-original下面创建</span> <span>struts.xml:</span> </p> \n <pre class=\"brush:java;toolbar:false\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;!DOCTYPE struts PUBLIC\n \"-//Apache Software Foundation//DTD Struts Configuration 2.1//EN\"\n \"http://struts.apache.org/dtds/struts-2.1.dtd\"&gt;\n\n&lt;struts&gt;\n &lt;package name=\"default\" extends=\"struts-default\"&gt;\n  &lt;action name=\"loginAction_*\" class=\"loginAction\" method=\"{1}\"&gt;\n   &lt;result name=\"success\"&gt;/success.jsp&lt;/result&gt;\n   &lt;result name=\"login\"&gt;/index.jsp&lt;/result&gt;\n   &lt;result name=\"registerError\"&gt;/register.jsp&lt;/result&gt;\n  &lt;/action&gt;\n &lt;/package&gt;\n&lt;/struts&gt;</pre> \n <p>创建User.java:</p> \n <pre class=\"brush:java;toolbar:false\">package com.zdx.domain;\n\npublic class User {\n private Integer id;\n private String name;\n private String pwd;\n\n public User() {\n  // TODO Auto-generated constructor stub\n }\n\n //get、set\n\n}</pre> \n <p>配置其hbm.xml如下：</p> \n <pre class=\"brush:java;toolbar:false\">&lt;?xml version=\"1.0\"?&gt;\n&lt;!DOCTYPE hibernate-mapping PUBLIC\n \"-//Hibernate/Hibernate Mapping DTD 3.0//EN\"\n \"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd\"&gt;\n&lt;hibernate-mapping default-lazy=\"false\"&gt;\n\n &lt;class name=\"com.zdx.domain.User\" table=\"user\"&gt;\n  &lt;id name=\"id\"&gt;\n   &lt;generator class=\"native\"&gt;&lt;/generator&gt;\n  &lt;/id&gt;\n  &lt;property name=\"name\"&gt;&lt;/property&gt;\n  &lt;property name=\"pwd\"&gt;&lt;/property&gt;\n &lt;/class&gt;\n&lt;/hibernate-mapping&gt;</pre> \n <p>然后创建UserDao接口，实现类UserDaoImpl如下：</p> \n <pre class=\"brush:java;toolbar:false\">package com.zdx.dao.impl;\n\nimport java.util.List;\n\nimport org.hibernate.SessionFactory;\nimport org.springframework.orm.hibernate3.support.HibernateDaoSupport;\n\nimport com.zdx.dao.UserDao;\nimport com.zdx.domain.User;\n\npublic class UserDaoImpl extends HibernateDaoSupport implements UserDao {\n\n @Override\n public boolean insert(User user) {\n  if (this.findByName(user.getName()) == null) {\n   this.getHibernateTemplate().save(user);\n   return true;\n  }\n  return false;\n }\n\n @Override\n public User findByName(String name) {\n  User user = null;\n  List&lt;User&gt; list = this.getHibernateTemplate().find(\n    \"from User where name=?\", name);\n  if (list.size() &gt; 0) {\n   user = list.get(0);\n  }\n  return user;\n }\n\n}</pre> \n <p>业务逻辑类UserService如下：</p> \n <pre class=\"brush:java;toolbar:false\">package com.zdx.service;\n\nimport com.zdx.dao.UserDao;\nimport com.zdx.domain.User;\n\npublic class UserService {\n\n private UserDao userDao;\n\n public boolean register(User user){\n  return this.userDao.insert(user);\n }\n \n public User login(User user){\n  return this.userDao.findByName(user.getName());\n }\n \n \n public UserDao getUserDao() {\n  return userDao;\n }\n\n public void setUserDao(UserDao userDao) {\n  this.userDao = userDao;\n }\n\n}</pre> \n <p>控制层LoginAction如下：</p> \n <pre class=\"brush:java;toolbar:false\">package com.zdx.action;\n\nimport com.opensymphony.xwork2.ActionSupport;\nimport com.zdx.domain.User;\nimport com.zdx.service.UserService;\n\npublic class LoginAction extends ActionSupport {\n private User user;\n private UserService service;\n\n @Override\n public String execute() throws Exception {\n  // TODO Auto-generated method stub\n  return super.execute();\n }\n\n public String login() {\n  User userTmp = service.login(user);\n  if (userTmp == null) {\n   return LOGIN;\n  } else if (this.user.getPwd().equals(userTmp.getPwd())) {\n   return SUCCESS;\n  }\n  return LOGIN;\n }\n\n public String register() {\n  if (service.register(user)) {\n   return SUCCESS;\n  } else {\n   return \"registerError\";\n  }\n }\n\n public User getUser() {\n  return user;\n }\n\n public void setUser(User user) {\n  this.user = user;\n }\n\n public UserService getService() {\n  return service;\n }\n\n public void setService(UserService service) {\n  this.service = service;\n }\n\n}</pre> \n</div>\n<p>转自：http://come-for-dream.iteye.com/blog/2159566</p>','  SSH整合  最近没怎么手头上没什么事情，不过我感觉也是好事，毕竟一直忙碌刀会生锈的。  所有最近收刀，静心磨刀，不为外面的什么各种项目所迷惑。收收心，毕竟磨刀不误砍柴工。总结下Spring整合Struts2和Hibernate。  上篇总结了Spring整合Struts2这次我把Hibernate加了进来，Spring这个非常强大的框架也是真真正正的算得上有个有艺术品位的框架，IOC和AOP......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:26:25',0,0,0,0,'http://www.fzqblog.top/upload/201608/1471958783598.jpg|',NULL,1),(330,1,6,'又一个强大的 FIS 解决方案 jello','<div> \n <p> 又一个？是的！基于 FIS 的解决方案已经有不少，有针对后端是php 的 fisp、node.js 的 yogurt和GO 语言的 Gois，甚至更多。而接下来介绍的这个就是一个针对后端是 JAVA 采用 velocity 作为模板引擎的 <a href=\"https://github.com/fex-team/jello\" rel=\"nofollow,noindex\">jello</a> 。虽然出来有一段时间了，但是一直以来都没有很好的介绍过，希望借助这次机会能让大家更清楚地认识一下 <a href=\"https://github.com/fex-team/jello\" rel=\"nofollow,noindex\">jello</a> 。 </p> \n <h2>Features</h2> \n <h3>前后端分离</h3> \n <p>这里有两层意义的前后分离。</p> \n <ol> \n  <li> <p>前后端编写分离</p> <p>由于采用的是 velocity 作为模板引擎，前端同学只用专注于 JS、CSS 以及模板逻辑的编写，而不用太关心后端数据以及页面逻辑。而后端同学则只需专注于后端页面应该渲染哪个模板，以及获取对应的模板数据。</p> </li> \n  <li> <p>前后端开发分离</p> <p>这个是 Jello 的重点！正常来说，一个页面的正常渲染是离不开模板数据的，而页面模板数据的来源，往往都需要后端同学来提供。因此，前端的开发往往受后端的限制，需要等待后端提供一个可用的环境，然后基于此环境开发。而此环境，要让一个没有后端 j2ee 基础的同学来搭建，也是一件非常头疼的事情。</p> <p> Jello 针对这个问题，提供一个非常便利的开发环境。即：所有的 page 性质的 vm 模板文件，可以在此环境中直接预览，而且可以通过 json 或者 jsp 文件提供数据模拟。于是，项目开始前期，前后端的同学合力一起制定好数据接口，然后就可以并行独立开发了。具体操作可以查看 <a href=\"http://106.186.23.103:8080/doc/rewrite\" rel=\"nofollow,noindex\">页面预览</a> 和 <a href=\"http://106.186.23.103:8080/doc/binding\" rel=\"nofollow,noindex\">数据绑定</a> 相关的文档。 </p> </li> \n </ol> \n <h3>简化环境安装</h3> \n <p> 传统的开发，为了能够正常开发，往往需要安装一系列 j2ee 环境。而 jello 提供的开发环境，只需要 <code class=\"prettyprint\">jello server start 一个命令便能运行。实际上它是内嵌了一个简单个 tomcat 服务，在首次运行的时候，自动从服务器上下载。 </code></p>\n <code class=\"prettyprint\"> <p>因为所有的数据都是 mock 出来的，这也就无需去折腾 mysql 或者 oracle 或者其他数据库了。</p> <p> <img class=\"alignCenter\" data-original=\"\" alt=\"image2\" src=\"http://www.fzqblog.top/upload/201608/1471958785845.png\"> </p> <h3>自动性能优化</h3> <p> 我们基于 <a href=\"http://velocity.apache.org/\" rel=\"nofollow,noindex\">velocity</a> 扩展了些标签 (directive)，如：html、head、body、script、style、widget... 如果你采用我们提供的标签 (directive) 组织代码，无论按什么顺序组织，我们可以保证所有 css 内容集中在头部输出，所有的 js 集中在底部输出，以达到一个性能优化的效果。 </p> <p>另外结合打包配置，可以让多个 js/css 资源合并成一个文件，更大程度的优化性能。</p> <p> <img class=\"alignCenter\" data-original=\"\" alt=\"image1\" src=\"http://www.fzqblog.top/upload/201608/1471958787811.png\"> </p> <p>(这个示例没有配置 css 打包，请忽略。)</p> <h3>模板继承机制</h3> <p>扩展 velocity 实现类 smarty 的模板继承功能，让模板能够得到更充分的复用。</p> <p>将多个页面间相同的部分提取到一个骨架 layout.vm 文件里面，每个页面只需填充自己独有的内容。</p> <p> 此模板继承甚至比 smarty 提供的版本还要强，因为 velocity 里面可以支持条件语句。比如这个 <a href=\"http://106.186.23.103:8080/doc/layout\" rel=\"nofollow,noindex\">Demo</a> . </p> <pre class=\"brush:java;toolbar:false\"><code class=\"language-velocity\" data-lang=\"velocity\"><span class=\"cp\">#</span><span class=\"nf\">set</span><span class=\"p\">($</span><span class=\"nv\">layout</span> <span class=\"o\">=</span> <span class=\"s2\">\"page/layout/2columns-with-left-sidebar.vm\"</span><span class=\"p\">)</span><span class=\"x\"></span>\n<span class=\"cp\">#</span><span class=\"nf\">set</span><span class=\"p\">($</span><span class=\"nv\">param</span> <span class=\"o\">=</span> <span class=\"p\">$</span><span class=\"nv\">request</span><span class=\"p\">.</span><span class=\"nv\">getParameter</span><span class=\"p\">(</span><span class=\"s2\">\"layout\"</span><span class=\"p\">))</span><span class=\"x\"></span>\n\n<span class=\"cp\">#</span><span class=\"nf\">if</span><span class=\"p\"> ($</span><span class=\"nv\">param</span><span class=\"p\">.</span><span class=\"nv\">equals</span><span class=\"p\">(</span><span class=\"s2\">\"right\"</span><span class=\"p\">))</span><span class=\"x\"></span>\n<span class=\"x\"> </span><span class=\"cp\">#</span><span class=\"nf\">set</span><span class=\"p\">($</span><span class=\"nv\">layout</span> <span class=\"o\">=</span> <span class=\"s2\">\"page/layout/2columns-with-right-sidebar.vm\"</span><span class=\"p\">)</span><span class=\"x\"></span>\n<span class=\"cp\">#</span><span class=\"nf\">end</span><span class=\"x\"></span>\n\n<span class=\"cp\">#</span><span class=\"nf\">if</span><span class=\"p\"> ($</span><span class=\"nv\">param</span><span class=\"p\">.</span><span class=\"nv\">equals</span><span class=\"p\">(</span><span class=\"s2\">\"both\"</span><span class=\"p\">))</span><span class=\"x\"></span>\n<span class=\"x\"> </span><span class=\"cp\">#</span><span class=\"nf\">set</span><span class=\"p\">($</span><span class=\"nv\">layout</span> <span class=\"o\">=</span> <span class=\"s2\">\"page/layout/3columns.vm\"</span><span class=\"p\">)</span><span class=\"x\"></span>\n<span class=\"cp\">#</span><span class=\"nf\">end</span><span class=\"x\"></span>\n\n<span class=\"cp\">#</span><span class=\"nf\">extends</span><span class=\"p\">($</span><span class=\"nv\">layout</span><span class=\"p\">)</span><span class=\"x\"></span>\n<span class=\"x\"> ...</span>\n<span class=\"cp\">#</span><span class=\"nf\">end</span><span class=\"x\"></span>\n</code></pre><code class=\"language-velocity\" data-lang=\"velocity\"> <p> <img class=\"alignCenter\" data-original=\"\" alt=\"image3\" src=\"http://www.fzqblog.top/upload/201608/1471958789772.png\"> </p> <h3>模块化开发</h3> <p>提供模块化开发机制，支持像想写 node.js 一样的方式去写页面 js。可以遵循 commonjs 规范任意拆分代码，而不用关心性能问题。</p> <pre class=\"brush:java;toolbar:false\"><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">\'bootstrap\'</span><span class=\"p\">);</span>\n<span class=\"kd\">var</span> <span class=\"nx\">$</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">\'jquery\'</span><span class=\"p\">);</span>\n<span class=\"kd\">var</span> <span class=\"nx\">alert</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">\'libs/alert\'</span><span class=\"p\">);</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">opt</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n <span class=\"c1\">// from velocity data</span>\n <span class=\"kd\">var</span> <span class=\"nx\">vm</span> <span class=\"o\">=</span> <span class=\"nx\">opt</span><span class=\"p\">.</span><span class=\"nx\">vm</span><span class=\"p\">;</span>\n <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nx\">vm</span><span class=\"p\">.</span><span class=\"nx\">btn</span><span class=\"p\">).</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">\'click\'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"s1\">\'&lt;pre&gt;\'</span> <span class=\"o\">+</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"nx\">vm</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">,</span> <span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">\'&lt;/pre&gt;\'</span><span class=\"p\">);</span>\n <span class=\"p\">});</span>\n\n <span class=\"c1\">// ....</span>\n<span class=\"p\">});</span>\n</code></pre><code class=\"language-javascript\" data-lang=\"javascript\"> <p> 以上代码来自 <a href=\"https://github.com/2betop/jello-demo\" rel=\"nofollow,noindex\">jello-demo</a> 下面的 /page/examples/data.js, 可以直接在线体验 <a href=\"http://106.186.23.103:8080/examples/data\" rel=\"nofollow,noindex\">运行结果</a> 。 </p> <h3>组件化开发</h3> <p> 提供组件化机制，可以将页面间复用率比较高的内容，封装成组件（widget），然后通过 #widget() 标签使用，支持传入局部变量， 更多关于组件的使用，请参看 <a href=\"http://106.186.23.103:8080/doc/widget\" rel=\"nofollow,noindex\">jello-demo</a> 中文档。 </p> <h3>更多 features.</h3> <p> 因为是基于fis的二次开发，还有更多的 fetaures 也可以在 jello 中使用，如：前端三种语言能力、资源压缩、异构语言支持、静态资源加 md5 戳 &amp; cdn 部署 等等。具体请查看fis 官网。 </p> <h2>Getting started</h2> <p> 如果以上的 features 也打动了你，不妨从一个简单的 <a href=\"http://106.186.23.103:8080/doc/widget\" rel=\"nofollow,noindex\">demo</a> 开始 jello 之旅吧。 </p> \n    <ol> \n     <li> <p>安装 jello</p> <pre class=\"brush:java;toolbar:false\"><code class=\"language-text\" data-lang=\"text\">npm install -g jello\n</code></pre><code class=\"language-text\" data-lang=\"text\"> </code></li>\n     <code class=\"language-text\" data-lang=\"text\"> <li> <p>安装插件</p> <pre class=\"brush:java;toolbar:false\"><code class=\"language-text\" data-lang=\"text\">npm install -g fis-parser-marked\nnpm install -g fis-parser-utc\nnpm install -g fis-parser-sass\nnpm install -g fis-packager-depscombine\n</code></pre><code class=\"language-text\" data-lang=\"text\"> </code></li><code class=\"language-text\" data-lang=\"text\"> <li> <p>下载 demo</p> <pre class=\"brush:java;toolbar:false\"><code class=\"language-text\" data-lang=\"text\">npm install -g lights\nlights install jello-demo\n\n#  或者\n\ngit clone https://github.com/2betop/jello-demo.git\n</code></pre><code class=\"language-text\" data-lang=\"text\"> </code></li><code class=\"language-text\" data-lang=\"text\"> <li> <p>进入当前目录后发布代码</p> <pre class=\"brush:java;toolbar:false\"><code class=\"language-text\" data-lang=\"text\">jello release\njello server start\n</code></pre><code class=\"language-text\" data-lang=\"text\"> </code></li><code class=\"language-text\" data-lang=\"text\"> <li> <p>自动打开浏览器预览页面</p> </li> </code></code></code></code>\n    </ol><code class=\"language-text\" data-lang=\"text\"><code class=\"language-text\" data-lang=\"text\"><code class=\"language-text\" data-lang=\"text\"> </code></code></code></code></code></code>\n</div>\n<p><code class=\"prettyprint\"><code class=\"language-velocity\" data-lang=\"velocity\"><code class=\"language-javascript\" data-lang=\"javascript\"><code class=\"language-text\" data-lang=\"text\"><code class=\"language-text\" data-lang=\"text\"><code class=\"language-text\" data-lang=\"text\">转自：http://fex.baidu.com/blog/2014/11/another-fis-solusition-jello/</code></code></code></code></code></code></p>\n<code class=\"prettyprint\"><code class=\"language-velocity\" data-lang=\"velocity\"><code class=\"language-javascript\" data-lang=\"javascript\"><code class=\"language-text\" data-lang=\"text\"><code class=\"language-text\" data-lang=\"text\"><code class=\"language-text\" data-lang=\"text\"> </code></code></code></code></code></code>','   又一个？是的！基于 FIS 的解决方案已经有不少，有针对后端是php 的 fisp、node.js 的 yogurt和GO 语言的 Gois，甚至更多。而接下来介绍的这个就是一个针对后端是 JAVA 采用 velocity 作为模板引擎的 jello 。虽然出来有一段时间了，但是一直以来都没有很好的介绍过，希望借助这次机会能让大家更清楚地认识一下 jello 。   Features  前后......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:26:30',0,0,0,0,'http://www.fzqblog.top/upload/201608/1471958785845.png|http://www.fzqblog.top/upload/201608/1471958787811.png|http://www.fzqblog.top/upload/201608/1471958789772.png|',NULL,1),(331,1,6,'javaBean动作元素和EL输出','<div> \n <p>一:javaBean是方便java实现web编程的一种组件,相当于将类中的属性设置为私有的方式;通过set和get方法来设置和获取属性的值,最主要的是要回使用当做元素设置和获取参数&nbsp;</p> \n <p>要求 &nbsp;;</p> \n <pre class=\"brush:java;toolbar:false\">1,使用java类来封装,\n2,使用set和get方法</pre> \n <h4>1, 例子:使用javaBean的set和get方式;</h4> \n <pre class=\"brush:java;toolbar:false\">package bean;\n\npublic class User {\n\n private int id;\n private String userName;\n private String userPwd;\n\n public int getId() {\n  \n  return id;\n }\n\n public void setId(int id) {\n  this.id = id;\n }\n\n public String getUserName() {\n  return userName;\n }\n\n public void setUserName(String userName) {\n  this.userName = userName;\n }\n\n public String getUserPwd() {\n  return userPwd;\n }\n\n public void setUserPwd(String userPwd) {\n  this.userPwd = userPwd;\n }\n\n}</pre> \n <h4>2,在jsp页面中使用javaBean(重点)</h4> \n <p>声明和初始化一个Bean属性</p> \n <pre class=\"brush:java;toolbar:false\">&lt;jsp:useBean id=\"a\" class=\"bean.User\" scope=\"request\"&gt;&lt;/jsp:useBean&gt;</pre> \n <h4>jsp:uesBean;标示标准动作</h4> \n <h4>id=\"a\";声明标示符a,设置属性的name与id的名字是一样的</h4> \n <h4>class=\" \";javaBean的set和get方法</h4> \n <h4>scope;标示javaBean的作用域范围 &nbsp;默认本页 &nbsp;,request session application</h4> \n <pre class=\"brush:java;toolbar:false\">&lt;jsp:setProperty name=\"a\" property=\"id\" value=\"4\"/&gt;</pre> \n <h4>setProperty ;设置属性的值</h4> \n <h4>name;需要通过javaBean设置的name和标示动作中的id是一样的</h4> \n <h4>property;需要修改方法名中含有id的</h4> \n <h4>value;将其值设置为4</h4> \n <pre class=\"brush:java;toolbar:false\">&lt;jsp:getProperty  name=\"a\" property=\"id\"/&gt;</pre> \n <h4>getProperty;获取设置的属性</h4> \n <h4>name;需要通过javaBean设置的name和标示动作中的id是一样的</h4> \n <h4>property;获取标示为id中的方法</h4> \n <pre class=\"brush:java;toolbar:false\">${a.id}</pre> \n <h4>向浏览器输出获取到的a.id的值</h4> \n <h4>3,property中的id如何解析成java代码中的User类的getId()和setId()方法</h4> \n <h4>1), javaBean会先将property的值首字母变成大写,</h4> \n <h4>2),反射寻找类的方法</h4> \n <p>3),然后根据setProperty和getproperty来判断是set还是get方法,如果是setProperty就在id的就编程了setId ,如果是getProperty就在id的就编程了getId ,</p> \n <h4>4,javaBean的作用域和javaBean的forw转发</h4> \n <p>pageContext 本页</p> \n <p>request &nbsp; &nbsp;一次请求中</p> \n <p>session &nbsp;一次回话中</p> \n <p>application &nbsp; 程序开始到结束</p> \n <p>转发;</p> \n <pre class=\"brush:java;toolbar:false\">&lt;jsp:forward page=\"demo2.jsp\"&gt;转发到demo2.jsp的页面\n&lt;jsp:param value=\"abcdef\" name=\"aaa\" /&gt;将name的值为abcdef也转发过去,相当于request.setAttribute(\"aaa\", user);user的值为abcdef\n&lt;/jsp:forward&gt;</pre> \n <h4>jsp脚本获取和动作元素获取例子;关键代码如下;</h4> \n <pre class=\"brush:java;toolbar:false\">User user = new User();\n  user.setId(100);\n  user.setUserName(\"王文\");\n  user.setUserPwd(\"wangwen\");\n\n  request.setAttribute(\"userA\", user);\n\n&lt;jsp:forward page=\"demo2.jsp\"&gt;\n  &lt;jsp:param value=王文\" name=\"aaa\" /&gt;\n &lt;/jsp:forward&gt;</pre> \n <h4>5,使用jsp脚本来获取值 &nbsp; &nbsp;在demo2.jsp中获取;</h4> \n <pre class=\"brush:java;toolbar:false\">先获得请求参数和参数值\n &lt;%\n  User user = (User) request.getAttribute(\"userA\");\n  String value = request.getParameter(\"aaa\");\n %&gt;\n \n  &lt;%--使用脚本元素取值 --%&gt;\n 姓名:&lt;%=user.getUserName()%&gt;\n 编号:&lt;%=user.getId()%&gt;\n 密码:&lt;%=user.getUserPwd()%&gt;\n &lt;%=value%&gt;</pre> \n <p>姓名:王文 编号:100 密码:wangwen &nbsp; 王文</p> \n <h4>6,使用EL表达是来获取值</h4> \n <p> 必须要先设置request.setAttribute(\"userA\", user);否者获取不到 </p> \n <pre class=\"brush:java;toolbar:false\">姓名:${userA.userName}\n编号:${userA.id }\n密码:${userA.userPwd}</pre> \n <p>${param}获取forwrad转发过来时传递的参数param</p> \n <p>姓名:王文 编号:100 密码:wangwen {aaa=王文}</p> \n <h4>7,使用javaBean的动作元素来设置和获取值</h4> \n <pre class=\"brush:java;toolbar:false\">用户id设置和获取\n&lt;jsp:useBean id=\"a\" class=\"cjl.bean.User\" scope=\"request\"&gt;&lt;/jsp:useBean&gt;\n  &lt;jsp:setProperty name=\"a\" property=\"id\" value=\"4\"/&gt;\n  &lt;jsp:getProperty  name=\"a\" property=\"id\"/&gt;\n 姓名id设置和获取\n  &lt;jsp:useBean id=\"b\" class=\"cjl.bean.User\" scope=\"request\"&gt;&lt;/jsp:useBean&gt;\n  &lt;jsp:setProperty name=\"b\" property=\"userName\" value=\"王文\"/&gt;\n  &lt;jsp:getProperty  name=\"b\" property=\"userName\"/&gt;\n  密码的设置和获取\n  &lt;jsp:useBean id=\"c\" class=\"cjl.bean.User\" scope=\"request\"&gt;&lt;/jsp:useBean&gt;\n  &lt;jsp:setProperty name=\"c\" property=\"userPwd\" value=\"wangwen\"/&gt;\n  &lt;jsp:getProperty  name=\"c\" property=\"userPwd\"/&gt;</pre> \n <p>在任何页面都可以获取到;与会话相似</p> \n <pre class=\"brush:java;toolbar:false\">javaBean用户id: ${a.id }\n      javaBean姓名:${b.userName }\n      javaBean姓名:${c.userPwd }</pre> \n <p>javaBean用户id:4</p> \n <p>javaBean姓名:王文</p> \n <p>javaBean姓名:wangwen</p> \n <h4>javaBean的总结:</h4> \n <p> <img alt=\"*\" class=\"lazy-load\" data-original=\"http://www.ulewo.com/images/grey.gif\"> JavaBean 是可在多个应用程序中重复使用的组件 </p> \n <p> <img alt=\"*\" class=\"lazy-load\" data-original=\"http://www.ulewo.com/images/grey.gif\"> useBean 动作可在 JSP 页面中提供 JavaBean 组件 </p> \n <p> <img alt=\"*\" class=\"lazy-load\" data-original=\"http://www.ulewo.com/images/grey.gif\"> setProperty 动作用于设置 Bean 的属性值 </p> \n <p> <img alt=\"*\" class=\"lazy-load\" data-original=\"http://www.ulewo.com/images/grey.gif\"> getProperty 动作用于获取 Bean 的值 </p> \n <p> <img alt=\"*\" class=\"lazy-load\" data-original=\"http://www.ulewo.com/images/grey.gif\"> forward 动作用于将用户的请求转发给其他页面 </p> \n <p> <img alt=\"*\" class=\"lazy-load\" data-original=\"http://www.ulewo.com/images/grey.gif\"> include 动作用于将一个页面嵌入当前 JSP 页面 </p> \n</div>\n<p>转自：http://baihe747.iteye.com/blog/2161959</p>','  一:javaBean是方便java实现web编程的一种组件,相当于将类中的属性设置为私有的方式;通过set和get方法来设置和获取属性的值,最主要的是要回使用当做元素设置和获取参数   要求  ;  1,使用java类来封装,2,使用set和get方法  1, 例子:使用javaBean的set和get方式;  package bean;public class User { private ......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:26:30',0,0,0,0,'',NULL,1),(332,1,6,'springmvc与ejb整合','<div> \n <h2>一、企业开发模式</h2> \n <p> <span></span> <span>&nbsp; &nbsp;目前javaEE应用的开发方式大致可以分为两种：一种以Spring、Hibernate等开源框架为基础即所谓的轻量级JavaEE应用；另一种则以EJB3+JPA为基础配合一些前端框架如JSF、struts2、SpringMvc等等的经典JavaEE开发模式。由于EJB2.0使用相对比较复杂，目前使用的情况来说很多企业基本上使用的是ssh架构，EJB3.0做了改善之后开始以spring+ejb+jpa的组合方式进行开发。</span> </p> \n <h2>二、SpringMvc+ejb整合</h2> \n <h3>1.通过工厂的方式</h3> \n <pre class=\"brush:java;toolbar:false\">public class EJBFactory\n{\n public static Object lookup(String ejbRefName)\n      {\n       try{\n  InitialContext ctx=new InitialContext();\n         return ctx.lookup(\"java:comp/env/\"+ejbRefName);\n&lt;span style=\"white-space:pre\"&gt; &lt;/span&gt; }\n      catch(NamingException e)\n       {\n         e.printStackTrace();\n       }\n    }\n}</pre> \n <h3>2.通过Spring将两者结合</h3> \n <h4>方法一、通过spring提供的ejb代理对象</h4> \n <pre class=\"brush:java;toolbar:false\">&lt;bean id=\"myComponent\"\n class=\"org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean\"&gt;\n    &lt;property name=\"jndiName\" value=\"ejb/myBean\"/&gt;\n    &lt;property name=\"businessInterface\" value=\"com.mycom.MyComponent\"/&gt;\n&lt;/bean&gt;\n \n&lt;bean id=\"myController\" class=\"com.mycom.myController\"&gt;\n    &lt;property name=\"myComponent\" ref=\"myComponent\"/&gt;\n&lt;/bean&gt;</pre> \n <h4>方法二、通过&lt;jee:local-slsb&gt; 或者 &lt;jee:remote-slsb&gt;</h4> \n <pre class=\"brush:java;toolbar:false\">&lt;jee:local-slsb id=\"myComponent\" jndi-name=\"ejb/myBean\"\n        business-interface=\"com.mycom.MyComponent\"/&gt;\n \n&lt;bean id=\"myController\" class=\"com.mycom.myController\"&gt;\n    &lt;property name=\"myComponent\" ref=\"myComponent\"/&gt;\n&lt;/bean&gt;</pre> \n <h2>三、总结</h2> \n <p> <span> <span>不管以哪种方式组合，最根本的还是需要通过jndi去查找相应的ejb,只不过三种方式是在jndi查找的基础上进行了封装，如工厂方法是将jdni查找的过程进行了封装；Spring提供了两种方法，一个是工厂构造出相应的ejb代理对象，这种方法是spring容器经常使用的一种方法；一种是通过拦截器实现，当有ejb请求是相应的拦截器会将请求传递给jndi查找到的ejb。三种方法都可以，只不过相对而言通过spring的方式更有效率更简单，好多问题spring容器都给我们解决了。</span> </span> <span> </span> </p> \n</div>\n<p>转自：http://blog.csdn.net/leimengyuanlian/article/details/41622041</p>','  一、企业开发模式       目前javaEE应用的开发方式大致可以分为两种：一种以Spring、Hibernate等开源框架为基础即所谓的轻量级JavaEE应用；另一种则以EJB3+JPA为基础配合一些前端框架如JSF、struts2、SpringMvc等等的经典JavaEE开发模式。由于EJB2.0使用相对比较复杂，目前使用的情况来说很多企业基本上使用的是ssh架构，EJB3.0做了改善之......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:26:31',0,0,0,0,'',NULL,1),(333,1,6,'Tomcat7源码分析（上）——启动过程和类加载器','<div> \n <p>上篇Java的文章中我将Java Servlet的笔记整理出来，其中简单介绍了Servlet的技术和相关概念。这篇文章我们来以Tomcat的源码为例，看看Servlet的容器怎么来实现。当然，这也是我本人较早时候的一个源码分析笔记，使用的Tomcat版本是7.0。</p> \n <h4>0. Tomcat简介</h4> \n <p>Tomcat，全名Apache Tomcat，是Apache Jakarta下的一个子项目。Tomcat是对Servlet API定义的容器的一个完整实现，同时它也不仅仅是一个容器，也完全可以当做一个纯Java实现的HTTP服务器来使用。按照维基百科最早的记载，是在1999年发布了3.0.x版本，可以说是一个比较早的Servlet容器实现。最重要的，Tomcat是开源的，并且完整性很好，我们本文以Tomcat为例，进行分析。</p> \n <p>当然，其它优秀的servlet容器还有很多，如Jetty等。</p> \n <h4>1. 启动过程</h4> \n <p>不管是操作系统，还是应用程序，都要从无到有，有一个循序渐进的启动过程。Tomcat也不例外，也是一切从头开始。嵌入其它应用，通过代码启动在新版本的Tomcat中也是支持的，但本文这里已最常见的命令行启动为例开始介绍。</p> \n <p>我们打开Tomcat的压缩包，里面有startup.sh脚本和为了支持Windows环境的.bat文件，Tomcat启停的奥义就在这里。startup.sh里有一句：</p> \n <pre class=\"brush:java;toolbar:false\">exec \"$PRGDIR\"/\"$EXECUTABLE\" start \"$@\"</pre> \n <p>其中的$EXECUTABLE是在上面赋值的catalina.sh，也就是说会去执行catalina.sh，而且紧随其后的参数是start，我们继续看catalina.sh这个脚本，里面有这么一行开启的段落：</p> \n <pre class=\"brush:java;toolbar:false\">elif [ \"$1\" = \"start\" ] ; then</pre> \n <p>最终的执行语句是：</p> \n <pre class=\"brush:java;toolbar:false\">eval \"\\\"$_RUNJAVA\\\"\" \"\\\"$LOGGING_CONFIG\\\"\" $LOGGING_MANAGER $JAVA_OPTS $CATALINA_OPTS \\\n -Djava.endorsed.dirs=\"\\\"$JAVA_ENDORSED_DIRS\\\"\" -classpath \"\\\"$CLASSPATH\\\"\" \\\n -Dcatalina.base=\"\\\"$CATALINA_BASE\\\"\" \\\n -Dcatalina.home=\"\\\"$CATALINA_HOME\\\"\" \\\n -Djava.io.tmpdir=\"\\\"$CATALINA_TMPDIR\\\"\" \\\n org.apache.catalina.startup.Bootstrap \"$@\" start \\\n &gt;&gt; \"$CATALINA_OUT\" 2&gt;&amp;1 \"&amp;\"</pre> \n <p>而$_RUNJAVA就是系统环境下的的java，忽略掉中间的参数不管，我们可以看到启动的Java类是org.apache.catalina.startup.Bootstrap。</p> \n <pre class=\"brush:java;toolbar:false\">_RUNJAVA=\"$JRE_HOME\"/bin/java</pre> \n <p>而这个org.apache.catalina.startup.Bootstrap类里面有一个main方法，这和我们简单直接写的一个HelloWorld类编译执行的原理是一样的。</p> \n <p> 这里，我们可以有一个结论，在读任何系统的源码时，都将有一个入口，把握住了入口就把握住了一切。而任何用java运行起来的应用最终也都会有一个public class和一个main，这是绝对的，虽然servlet开发不需关注，只要针对API编程即可，但即使这样最终还是通过servlet的container来满足这一点。 </p> \n <p>也就是这样，Tomcat启动了。</p> \n <h4>2. Bootstrap类</h4> \n <p> 上文书说到org.apache.catalina.startup.Bootstrap <strong>的</strong> main方法得到执行。找到对应的tomcat源代码，我们看到其中可以分为2大块：静态对象daemon的创建和初始化、根据命令行参数对daemon调用对应的方法。 </p> \n <p>先看第一块，从daemon的声明我们可以看出其就是一个Bootstrap的对象，在其为null的时候需要新创建一个，并且执行init()方法，初始化后将其赋值给daemon。我们这里更进一步，看看Bootstrap的这个init()方法到底做了哪些事情。</p> \n <pre class=\"brush:java;toolbar:false\">public void init()\n  throws Exception\n {\n  // Set Catalina path\n  setCatalinaHome();\n  setCatalinaBase();\n  initClassLoaders();\n  Thread.currentThread().setContextClassLoader(catalinaLoader);\n  SecurityClassLoad.securityClassLoad(catalinaLoader);\n\n  // Load our startup class and call its process() method\n  if (log.isDebugEnabled())\n   log.debug(\"Loading startup class\");\n  Class&lt;?&gt; startupClass =\n   catalinaLoader.loadClass\n   (\"org.apache.catalina.startup.Catalina\");\n  Object startupInstance = startupClass.newInstance();\n\n  // Set the shared extensions class loader\n  if (log.isDebugEnabled())\n   log.debug(\"Setting startup class properties\");\n  String methodName = \"setParentClassLoader\";\n  Class&lt;?&gt; paramTypes[] = new Class[1];\n  paramTypes[0] = Class.forName(\"java.lang.ClassLoader\");\n  Object paramValues[] = new Object[1];\n  paramValues[0] = sharedLoader;\n  Method method =\n   startupInstance.getClass().getMethod(methodName, paramTypes);\n  method.invoke(startupInstance, paramValues);\n\n  catalinaDaemon = startupInstance;\n }</pre> \n <p>而这个方法，又可以分为两大部分：</p> \n <ul> \n  <li> <span>前5条语句，用来初始化catalina类加载器相关环境的变量，然后初始化各个类加载器对象，包括commonLoader、sharedLoader，其中最重要的就是catalinaLoader，将其设置为Bootstrap的一个属性值。</span> </li> \n  <li>从第六条语句开始，使用前面已经构件好的catalinaLoader加载tomcat最核心的对象，那就是org.apache.catalina.startup.Catalina类的对象catalinaDaemon，并以反射的方式调用其setParentClassLoader方法，把sharedLoader作为参数传入。</li> \n </ul> \n <p>我们看到这个过程中，Bootstrap类持有的几个对象（静态的daemon、非静态的catalinaDaemon、commonLoader、sharedLoader、catalinaLoader）都得到了创建和必要的初始化。</p> \n <p>那么接下来我们看main方法的后半部分。比如刚刚启动，我们得到的命令行参数是start，那么会执行如下这段代码：</p> \n <pre class=\"brush:java;toolbar:false\">else if (command.equals(\"start\")) {\n                daemon.setAwait(true);\n                daemon.load(args);\n                daemon.start();\n            }</pre> \n <p>会分别调用Bootstrap类的daemon对象的setAwait()、load()和start()三个方法。这三个方法我们略微深入一些，发现是从Bootstrap的方法到Catalina方法的一个调用，而且中间都是用了反射方式。至于这3个方法最终具体做了什么，我们这里先不细说，后面会分块做详细整理，不过可以简单了解下，其中：</p> \n <ul> \n  <li> <span>setAwait()是设置了Catalina对象的一个属性值，其作用是告诉服务器启动后保持运行状态，并开启特定端口监听后续发来的指令，直到收到SHUTDOWN指令，做关闭服务器处理。</span> </li> \n  <li>load()则是加载和初始化。对整个Tomcat服务器相关的配置文件进行加载和解析处理，并对Tomcat的各个组件进行初始化配置操作。</li> \n  <li>start()，这个其实不用多说，就是正式启动Catalina，或者说启动了Tomcat服务器的核心工作。</li> \n </ul> \n <p>以此为例，对于Bootstrap的其它命令，比如stop等，本文就不想详细叙述了，感兴趣的可以按照这个路子去查看源代码。</p> \n <h4>3. Tomcat中的类加载器</h4> \n <p> 了解Java和JVM的各位朋友一定知道，现代的JVM中通常有三层默认的类加载器，分别是bootstrap类加载器、扩展类加载器和系统类加载器。这三者每两者间都是父子关系，即前者是后者的父亲或者双亲类加载器，并由此构建了一个“双亲委派关系”，或叫“代理”关系。关于JVM和Java类加载器，我本人争取在后面有机会单独给大家介绍，这里先简单提一下，感兴趣的可以先参考这篇文章： <a href=\"http://www.ibm.com/developerworks/cn/java/j-lo-classloader\" target=\"_blank\" rel=\"nofollow,noindex\">http://www.ibm.com/developerworks/cn/java/j-lo-classloader</a> </p> \n <p>除了Java环境自身的三层类加载器，前面提到的，在Tomcat中主要有commonLoader、catalinaLoader、sharedLoader这几个类加载器。细看源码，实际上这几个loader都是Tomcat中的org.apache.catalina.loader.StandardClassLoader类。StandardClassLoader直接继承于java.net中的URLClassLoader类，最终继承于java.lang.ClassLoader类。</p> \n <p>而除了这三个loader外，Tomcat中还有个关键的ClassLoader，我也在这里一起介绍，那就是org.apache.catalina.loader.WebappClassLoader类。在实际的Tomcat实例中，会由多个WebappClassLoader类对象，就像其名字说描述的，一个Web app，就有一个这样的loader。</p> \n <p>此节 上面的第一段中提到，JVM中已经给我们提供了3层类加载器，并通过java.lang.ClassLoader 的loadClass()方法实现逻辑，我们可以知道这3层类加载器中使用了“双亲委派”的方式来加载和定义类，从IBM那篇文章中我们也可以看到这一点。这样做的方式，一来大大提高了系统的灵活性和可扩展性，拓宽了Java类定义的空间，二来按照“双亲委派”模式，java.lang包中的系统类只能由系统自身加载，提高了系统的安全性。</p> \n <p>对于一般的Java应用开发来讲，我们其实并不需要太过关注JVM所提供的运行环境，不必关注ClassLoader。但在Tomcat中，为了提高系统的灵活性，引入了commonLoader、sharedLoader、catalinaLoader；为了支持和分隔多个web应用，使用了WebappClassLoader。</p> \n <ul> \n  <li> <span>Tomcat中的系统类加载器。Tomcat也是一个Java应用，他也是在最初系统提供的几层类加载器环境下运行起来的。那么Tomcat的一些最基本的类，也和其它简单Java应用一样，是通过系统的类加载器来加载的，比如默认配置下的tomcat/bin目录下的bootstrap.jar、tomcat-juli.jar、commons-daemon.jar这几个jar包中的类。</span> </li> \n  <li>Tomcat的Common Loader。Common Loader是Tomcat在系统类加载器之上建立起来的，其父loader是系统类加载器。Common Loader负责上面几个jar包外的Tomcat的大部分java类，通常情况下是tomcat/lib下的所有jar包。</li> \n  <li>Webapp Class Loader。这个类加载器可以说是Tomcat种最重要的Class Loader，它创造了各个Web app空间。在实现上，它打破了系统默认规则，或者说是打破了java.lang.ClassLoader逻辑中的“双亲委派”模式，提供了一套自定义的类加载流程。默认情况下，对于一个未加载过的类，WebappClassLoader会先让系统加载java.lang.Object等Java本身的基础类，如果不是基础类则优先在当前Web app范围内查找并加载，如果没加载到，再交给common loader走标准的双亲委派模式加载。</li> \n </ul> \n <p>对于上面这三点做一些说明：</p> \n <ul> \n  <li> <span> 在tomcat/conf目录的catalina.properties中有common.loader、server.loader、shared.loader的配置，这分别对应着commonLoader、catalinaLoader和sharedLoader。我们可以看到，默认情况下，serverl.loader和shared.loader的配置是空的，这意味着此两者在运行时和commonLoader相同。实际上，在Tomcat5.5之后的版本中，做了简化，只有commonLoader具备实际意义。而在5.5及之前的版本中，三者各不相同，各有分工。可参看官方文档作对比： <a title=\"Tomcat 5.5 Class Loader\" href=\"http://tomcat.apache.org/tomcat-5.5-doc/class-loader-howto.html\" target=\"_blank\" rel=\"nofollow,noindex\">Tomcat-5.5-ClassLoader</a> 、 <a title=\"Tomcat 7.0 Class Loader\" href=\"http://tomcat.apache.org/tomcat-7.0-doc/class-loader-howto.html\" target=\"_blank\" rel=\"nofollow,noindex\">Tomcat-7.0-ClassLoader</a> 。 </span> </li> \n  <li>WebappClassLoader的代理关系或者说类查找加载顺序，其实是可以通过delegate来进行配置的。如果配置不同，代码在查找类时会走不同的路劲。</li> \n </ul> \n <p>以上，Tomcat7.0的类加载器结构图总体来看大致如下：</p> \n <pre class=\"brush:java;toolbar:false\">      Bootstrap\n          |\n       System\n          |\n       Common\n       /     \\\n  Webapp1   Webapp2 ...</pre> \n <p>有关Tomcat的启动过程和类加载器，本文先总结至此，后面的文章将继续对Tomcat的主体部分基于源代码作分析。</p> \n</div>\n<p>转自：http://www.molotang.com/articles/628.html</p>','  上篇Java的文章中我将Java Servlet的笔记整理出来，其中简单介绍了Servlet的技术和相关概念。这篇文章我们来以Tomcat的源码为例，看看Servlet的容器怎么来实现。当然，这也是我本人较早时候的一个源码分析笔记，使用的Tomcat版本是7.0。  0. Tomcat简介  Tomcat，全名Apache Tomcat，是Apache Jakarta下的一个子项目。Tomca......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:26:31',0,0,0,0,'',NULL,1),(334,1,6,'实现简单配置免重启的servlet单入口','<div> \n <p> <span> </span></p>\n <p>用servlet做一些游戏的后台挺不错，不过每个servlet都要在web.xml中配置路径映射也很麻烦，而且每次修改都得重启服务器。其实如果我们实现servlet单入口，即只定义一个Servlet，然后在这个Servlet中处理转发，就可以免去这些麻烦了。下面是一些步骤。</p>  \n <p></p> \n <p>1、定义处理器接口IAction。真正的处理器都继承自这个接口，接口很简单，只有一个方法，</p> \n <pre class=\"brush:java;toolbar:false\">import javax.servlet.http.HttpServletRequest;\n\n/**\n * Action接口，用于执行真正的处理操作\n */\npublic interface IAction {\n    public String execute(HttpServletRequest request);\n}</pre> \n <p>2、编写调度的Servlet，主要代码：</p> \n <pre class=\"brush:java;toolbar:false\">// Action后缀，如/First对应FirstAction类\nprivate static final String ACTION_EXT=\"Action\";\n// 自定义Action处理器所在的包名\nprivate static final String PACKAGE_NAME=\"com.xxx.\";\n\n-----------------\n\nprotected void processRequest(HttpServletRequest request, HttpServletResponse response)\n   throws ServletException, IOException {\n response.setContentType(\"text/html;charset=UTF-8\");\n PrintWriter out = response.getWriter();\n // 根据url找到对应的action\n String uri=request.getRequestURI();\n String path=request.getContextPath();\n String actionName=uri.substring(path.length()+1)+ACTION_EXT;\n String fullActionName=PACKAGE_NAME+actionName;\n IAction action=null;\n try {\n  Class&lt;?&gt; ref=Class.forName(fullActionName);\n  action=(IAction)ref.newInstance();\n }\n catch (Exception e)\n {\n }\n if (action!=null)\n {\n  out.println(action.execute(request));\n }\n else\n {\n  out.println(\"Error: \"+actionName+\" not found.\");\n }\n}</pre> \n <p>3、配置，</p> \n <pre class=\"brush:java;toolbar:false\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;web-app version=\"3.1\" xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\"&gt;\n &lt;servlet&gt;\n  &lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt;\n  &lt;servlet-class&gt;lib.DispatcherServlet&lt;/servlet-class&gt;\n &lt;/servlet&gt;\n &lt;servlet-mapping&gt;\n  &lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt;\n  &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n &lt;/servlet-mapping&gt;\n &lt;session-config&gt;\n  &lt;session-timeout&gt;\n   30\n  &lt;/session-timeout&gt;\n &lt;/session-config&gt;\n&lt;/web-app&gt;</pre> \n <p>让DispatcherServlet接管所有的url。</p> \n <span>之后编写的Action就可以不用在XML中配置了，也不用重启服务器，</span> \n <p>很灵活。</p> \n</div>\n<p>转自：http://my.oschina.net/lonewolf/blog/348210</p>','     用servlet做一些游戏的后台挺不错，不过每个servlet都要在web.xml中配置路径映射也很麻烦，而且每次修改都得重启服务器。其实如果我们实现servlet单入口，即只定义一个Servlet，然后在这个Servlet中处理转发，就可以免去这些麻烦了。下面是一些步骤。     1、定义处理器接口IAction。真正的处理器都继承自这个接口，接口很简单，只有一个方法，  import......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:26:31',0,0,0,0,'',NULL,1),(335,1,6,'spring web put与delete方法的调用','<div> \n <p> 在form中，method只用GET/POST。如果使用 <span>PUT/DELETE呢</span> </p> \n <p>在spring 的web应用中使用PUT/DELETE访问方式:代码如下：</p> \n <pre class=\"brush:java;toolbar:false\">&lt;form th:action=\"@{/app/account/update}\" method=\"post\"&gt;\n   &lt;input type=\"hidden\" name=\"_method\" value=\"PUT\" /&gt;\n   &lt;input type=\"submit\" value=\"submit\" /&gt;\n  &lt;/form&gt;</pre> \n <p> 将你要的访问方式如下&lt;input type=\"hidden\" name=\"_method\" value=\"PUT\" /&gt;放到form中，并设置form的方式 <span>method=\"post\"。</span> </p> \n <p>为什么是这样呢？</p> \n <p> <span>因为在页面访问要通过一个spring过滤器：</span> <span>HiddenHttpMethodFilter</span> </p> \n <p>代码如下：</p> \n <pre class=\"brush:java;toolbar:false\">public class HiddenHttpMethodFilter extends OncePerRequestFilter {\n\n /** Default method parameter: {@code _method} */\n public static final String DEFAULT_METHOD_PARAM = \"_method\";\n\n private String methodParam = DEFAULT_METHOD_PARAM;\n<span style=\"line-height: 1.5;\">\n\n      @Override\n protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n   throws ServletException, IOException {\n        //当method的方式为post并且</span><span style=\"line-height: 1.5; font-family: Helvetica, Tahoma, Arial, sans-serif; white-space: normal; background-color: #ffffff;\">_method不为空</span><span style=\"line-height: 1.5;\">\n  String paramValue = request.getParameter(this.methodParam);\n  if (\"POST\".equals(request.getMethod()) &amp;&amp; StringUtils.hasLength(paramValue)) {\n   String method = paramValue.toUpperCase(Locale.ENGLISH);//转大写英文\n   //关键之处\n    HttpServletRequest wrapper = new HttpMethodRequestWrapper(request, method);\n   filterChain.doFilter(wrapper, response);\n  }\n  else {\n   filterChain.doFilter(request, response);\n  }\n }\n\n //method转换\n</span> /**\n  * Simple {@link HttpServletRequest} wrapper that returns the supplied method for\n  * {@link HttpServletRequest#getMethod()}.\n  */\n private static class HttpMethodRequestWrapper extends HttpServletRequestWrapper {\n\n  private final String method;\n\n  public HttpMethodRequestWrapper(HttpServletRequest request, String method) {\n   super(request);\n   this.method = method;\n  }\n\n  @Override\n  public String getMethod() {\n   return this.method;\n  }\n }\n\n｝</pre> \n <p>这样一看就明明白白了。。。</p> \n</div>\n<p>转自：http://dk05408.iteye.com/blog/2159714</p>','   在form中，method只用GET/POST。如果使用 PUT/DELETE呢   在spring 的web应用中使用PUT/DELETE访问方式:代码如下：             将你要的访问方式如下放到form中，并设置form的方式 method=\"post\"。   为什么是这样呢？   因为在页面访问要通过一个spring过滤器： HiddenHttpMethodFilter  ......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:26:32',0,0,0,0,'',NULL,1),(336,1,6,'四步提升数据访问层缓存部署','<div> \n <div> \n  <p>MyBatis提供自己的缓存部署，不过如果需要，它也允许在第三方帮助下集成MyBatis数据访问层。</p> \n  <p>本文会从一下角度论述MyBatis：</p> \n  <p> &nbsp; &nbsp; 概览：这个部分会讨论你为什么需要持续性，MyBatis上的缓存如何提升应用程序的功能。（需要建立代码环境，这有利于更好地理解缓存）。 </p> \n  <p> MyBatis上的Ehache部署：可以帮助提升数据访问层的性能（下文会给出代码）。 </p> \n  <p> MyBatis上的Hazelcast部署：可以帮助部署数据访问层（下文会给出代码）。 </p> \n  <p> MyBatis上的操作系统缓存部署：可以帮助提升数据访问层性能（下文会给出代码）。 </p> \n  <p> Memcache上的缓存部署：为什么需要使用它，它是如何提升数据访问层性能的？ </p> \n  <p> 总结：对以上四种部署的总结，归纳各自的优势和不足。 </p> \n  <p>点击这里访问代码</p> \n  <p>概览</p> \n  <p>之所以出现对持久性的需求，是因为很多应用程序都被开发和部署在包含基于浏览器的客户端、Web应用程序服务器和后端数据库的多层环境中。这些应用程序需要通过与后端数据库的交流按需服务网页，这是由它们动态本质决定的。持久性出现了，并发展成这些应用程序中的一部分，成了实现高可扩展性和高性能的必要条件。</p> \n  <p>通 过持久性，应用程序有一个数据访问层，它可以提供对数据库的简单访问，但是，如果应用程序通过反复访问数据的形式按需服务网页，应用程序的性能就会降低。 持久性框架提供了一个内置的缓存特性，但有时这还不够（对于数据库检索、需要不同的锁定模型来说，一个单独价值的最大规模化远远不够。）</p> \n  <p> MyBatis为什么应用程序而设计？ </p> \n  <p>要 回答这个问题，需要先了解一下MyBatis的背景。MyBatis的前身是iBatis，iBatis框架的创建者离开了创建团队，因为劳动协议的关 系，他们必须继续产品研发，但要冠以新的名字，于是就有了MyBatis。为了了解你是需要MyBatis，你需要看看下面的表格：</p> \n </div> \n <table border=\"0\" cellspacing=\"3\" cellpadding=\"0\"> \n  <tbody> \n   <tr> \n    <td> <h4>问题</h4> </td> \n    <td> <p> <span>是否适合部署</span> <span>MyBatis</span> <strong> <span>(</span> </strong> <strong> <span> 是或否 <span>)</span> </span> </strong> </p> </td> \n    <td> <p> 是否适合目前使用的持久性架构 <span>(</span> 是或否 <span>)</span> </p> </td> \n   </tr> \n   <tr> \n    <td> <h4>1</h4> </td> \n    <td> <p> 架构时 <span>Java</span> 平台标准版的一部分吗？ <span>(JSE)</span> ？ <span>&nbsp;</span> </p> </td> \n    <td> <p>否</p> </td> \n   </tr> \n   <tr> \n    <td> <h4>2</h4> </td> \n    <td> <p> 是开源部署吗？ <span></span> </p> </td> \n    <td> <p>是</p> </td> \n   </tr> \n   <tr> \n    <td> <h4>3</h4> </td> \n    <td> <p> 框架支持实行任意的 <span>SQL</span> 语句吗？ <span>&nbsp;</span> </p> </td> \n    <td> <p>是</p> </td> \n   </tr> \n   <tr> \n    <td> <h4>4</h4> </td> \n    <td> <p> 框架支持批处理的多个语句吗？ <span></span> </p> </td> \n    <td> <p>是</p> </td> \n   </tr> \n   <tr> \n    <td> <h4>5</h4> </td> \n    <td> <p> 框架支持把查询数据自动映射到 <span>Java</span> 对象吗？ <span>&nbsp;</span> </p> </td> \n    <td> <p>是</p> </td> \n   </tr> \n   <tr> \n    <td> <h4>6</h4> </td> \n    <td> <p> 框架支持修改独立于 <span>Java</span> 代码的查询吗？ <span>&nbsp;</span> </p> </td> \n    <td> <p>是</p> </td> \n   </tr> \n   <tr> \n    <td> <h4>7</h4> </td> \n    <td> <p>容易学会吗？</p> </td> \n    <td> <p>是</p> </td> \n   </tr> \n   <tr> \n    <td> <h4>8</h4> </td> \n    <td> <p> 它可以直接把 <span>Java</span> 对象映射到数据表中吗（是 <span>ORM</span> 解决方案吗）？ </p> </td> \n    <td> <p>是</p> </td> \n   </tr> \n   <tr> \n    <td> <h4>9</h4> </td> \n    <td> <p>它提供针对数据规模变化的适应性吗？</p> </td> \n    <td> <p>是</p> </td> \n   </tr> \n   <tr> \n    <td> <h4>10</h4> </td> \n    <td> <p> 是依赖 <span>SQL</span> 的吗？ </p> </td> \n    <td> <p>是</p> </td> \n   </tr> \n   <tr> \n    <td> <h4>11</h4> </td> \n    <td> <p> 提供 <span>performance</span> 吗？ </p> </td> \n    <td> <p>是</p> </td> \n   </tr> \n   <tr> \n    <td> <h4>12</h4> </td> \n    <td> <p>他提供跨不同关系型数据库中的可移植性吗？</p> </td> \n    <td> <p>是</p> </td> \n   </tr> \n   <tr> \n    <td> <h4>13</h4> </td> \n    <td> <p>它有社区的支持和文档吗？</p> </td> \n    <td> <p>是</p> </td> \n   </tr> \n   <tr> \n    <td> <h4>是</h4> </td> \n    <td> <h4>12</h4> </td> \n   </tr> \n   <tr> \n    <td> <h4>否</h4> </td> \n    <td> <h4>1</h4> </td> \n   </tr> \n  </tbody> \n </table> \n <div> \n  <p>请填上你现在使用的持久性架构的答案，像上表一样填上是和否，然后对比一下结果。无论哪种架构获胜，它都有利于你了解MyBatis。</p> \n  <p>如果你选择MyBatis，以下是一些优点和缺点：</p> \n </div> \n <table border=\"0\" cellspacing=\"3\" cellpadding=\"0\"> \n  <tbody> \n   <tr> \n    <td> <h4>优点</h4> </td> \n    <td> <h4>缺点</h4> </td> \n   </tr> \n   <tr> \n    <td> <p> 开发者使用 <span>SQL</span> ， <span>iBATIS</span> 使用 <span>Java</span> 数据库连接器执行， </p> </td> \n    <td> <p>没有合适的查询语言</p> </td> \n   </tr> \n   <tr> \n    <td> <p> 一个 <span>SQL Mapper</span> ，支持摆脱（ <span>N+1</span> ）查询 </p> </td> \n    <td> <p> 不会生成 <span>SQL.</span> </p> </td> \n   </tr> \n   <tr> \n    <td> <p>自动映射对象属性到准备好的语句参数，提供结果集到对象的自动映射</p> </td> \n    <td> <p>没有透明持久对象</p> </td> \n   </tr> \n   <tr> \n    <td> <p> <span>MyBatis</span> <span> 提供针对数据库操作的交易管理，如果没有其他的交易管理器可用的话。 <span>MyBatis</span> 可以使用外部交易管理，比如 </span> <span>Spring, EJB CMT</span> <span>等。</span> </p> </td> \n    <td> <p>不了解对象身份</p> </td> \n   </tr> \n  </tbody> \n </table> \n <div> \n  <p>下 面总结一下：MyBatis主要针对SQL环境，即便SQL查询面临微调，但MyBatis仍然有用。MyBatis不应该用于既有应用程序又有数据库设 计的环境中，因为这样的用例中，需要修改应用程序适应数据库，反之亦然。在这种情景下，你应该构建一个全对象-关系的应用程序，也可以选择其他ORM工 具。</p> \n  <p> 什么时候应用程序使用MyBatis缓存？ </p> \n  <p>对这个问题的回答是：当你的应用程序 在短时间内，对数据库中的大数据集反复提出访问要求的时候。缓存并不是只针对大数据应用的，虽然数据量很重要，并且影响着应用程序的性能，但是缓存的出现 主要是满足数据被频繁地刷新的需求。如果你要访问的是不会改变“值”的大规模数据集，那么你不需要访问数据库，你只需访问中间层（缓存层）就可以了。一定 要记住，数据库操作是要耗费时间的，而每一毫秒对高性能应用程序来说都很重要。</p> \n  <p> 为什么缓存要使用第三方库？ </p> \n  <p>第三方库具备多种优势：缓存曾的单独价值的最大型号远大于默认的，提供不同锁定模型，一些允许和其他编程语言集成，提供map-reduce机制等等。</p> \n  <p>教程要求:</p> \n </div> \n <ul> \n  <li> <span>&nbsp;Java SE 1.6 或更高</span> </li> \n  <li> <span>&nbsp;一个 IDE</span> </li> \n  <li> <span>&nbsp;Maven 2.0 或更高</span> </li> \n  <li> <span>&nbsp;一个web应用程序服务器</span> </li> \n </ul> \n <div> \n  <p>下面是应用程序的概览，为了能够注入到它们的EJB组件中，每一个EJB项目都依赖整个项目）：</p> \n  <p>IDE概览和架构高级概览：</p> \n </div> \n <p> <img class=\"breakLine\" data-original=\"\" alt=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958792776.jpg\"> </p> \n <p> <img class=\"alignCenter\" data-original=\"\" alt=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958792977.jpg\"> </p> \n <div> \n  <p>CacherPoc项目展示了可能被部署和回顾的行为。下面是创建CacherPoc应用程序时需要的一些步骤：</p> \n  <p>1. 创建新的Maven Web应用程序并将它命名为CacherPoc</p> \n </div> \n <pre class=\"brush:java;toolbar:false\">view sourceprint？1.&lt;dependency&gt;2.&lt;groupId&gt;log4j&lt;/groupId&gt;3.&lt;artifactId&gt;log4j&lt;/artifactId&gt;4.&lt;version&gt;1.2.17&lt;/version&gt;5.&lt;/dependency&gt;</pre> \n <p>2. 为pom.xml配置log4j库:</p> \n <pre class=\"brush:java;toolbar:false\">view sourceprint？1.&lt;a href=\"EhCacheServlet？action=listEmployee\" &gt;2.Show All Employee Items with EHCache3.&lt;/a&gt;</pre> \n <p>3. 在 index.jsp文件中 （项目默认创建的） 你需要给每一个servlet添加链接链接，Servlet会从我们的样本ejb项目中注入EJB（EhCachePoc, HazelCastPoc, OSCachePoc and MemcachedPoc） :</p> \n <pre class=\"brush:java;toolbar:false\">     view sourceprint？01.@WebServlet(\"/EhCacheServlet\")02.public class EhCacheServlet extends HttpServlet {03. 04.private static Logger logger = Logger.getLogger(EhCacheServlet.class);05. 06.private static final String LIST_USER = \"/listEmployee.jsp\";07. 08.@Override09.protected void doGet(HttpServletRequest req, HttpServletResponse resp) throwsServletException, IOException {10.String forward = LIST_USER;11.List&lt;Employee&gt; results = new ArrayList&lt;Employee&gt;();12.req.setAttribute(\"employees\", results);13.RequestDispatcher view = req.getRequestDispatcher(forward);14.view.forward(req, resp);15.}16. 17.}</pre> \n <div> \n  <p>以下展示的是上文提到的servlet的例子：</p> \n  <p>这样，缓存层的一切就都设置好了。</p> \n </div> \n</div>\n<p>转自：http://www.thebigdata.cn/JieJueFangAn/12635.html</p>','     MyBatis提供自己的缓存部署，不过如果需要，它也允许在第三方帮助下集成MyBatis数据访问层。   本文会从一下角度论述MyBatis：        概览：这个部分会讨论你为什么需要持续性，MyBatis上的缓存如何提升应用程序的功能。（需要建立代码环境，这有利于更好地理解缓存）。     MyBatis上的Ehache部署：可以帮助提升数据访问层的性能（下文会给出代码）。   ......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:26:33',0,0,0,0,'http://www.fzqblog.top/upload/201608/1471958792776.jpg|http://www.fzqblog.top/upload/201608/1471958792977.jpg|',NULL,1),(337,1,6,'Spring Aop 切点表达式','<div> \n <p>在Spring AOP&nbsp;中，通常需要借助AspectJ&nbsp;的切点表达式语言来定义切点。重要的是Spring&nbsp;中仅支持AspectJ切点指示器的一个子集。</p> \n <table>\n   Spring&nbsp;支持的AspectJ的切点指示器 \n  <tbody>\n   <tr> \n    <td>AspectJ&nbsp;指示器</td> \n    <td>描述</td> \n   </tr> \n   <tr> \n    <td>args()</td> \n    <td>限制连接点匹配参数为执行类型的执行方法</td> \n   </tr> \n   <tr> \n    <td>@args()</td> \n    <td>限制连接点匹配参数由执行注解标注的执行方法</td> \n   </tr> \n   <tr> \n    <td>execution()</td> \n    <td>匹配连接点的执行方法</td> \n   </tr> \n   <tr> \n    <td>this()</td> \n    <td>限制连接点匹配AOP代理的Bean引用类型为指定类型的Bean</td> \n   </tr> \n   <tr> \n    <td>target()</td> \n    <td>限制连接点匹配目标对象为指定类型的类</td> \n   </tr> \n   <tr> \n    <td>@target()</td> \n    <td>限制连接点匹配目标对象被指定的注解标注的类</td> \n   </tr> \n   <tr> \n    <td>within()</td> \n    <td>限制连接点匹配匹配指定的类型</td> \n   </tr> \n   <tr> \n    <td>@within()</td> \n    <td>限制连接点匹配指定注解标注的类型</td> \n   </tr> \n   <tr> \n    <td>@annotation</td> \n    <td>限制匹配带有指定注解的连接点</td> \n   </tr> \n  </tbody>\n </table> \n <p>Spring AOP&nbsp;中常用的是：</p> \n <pre class=\"brush:java;toolbar:false\">execution(modifiers-pattern? ret-type-pattern declaring-type-pattern? name-pattern(param-pattern)\n          throws-pattern?)</pre> \n <p>匹配所有</p> \n <p>execution(\"* *.*(..)\")</p> \n <p>匹配所有以set开头的方法</p> \n <p>execution(\"* *.set*(..))</p> \n <p>匹配指定包下所有的方法</p> \n <p>execution(\"*&nbsp;com.david.biz.service.impl.*(..))</p> \n <p>匹配指定包以及其子包下的所有方法</p> \n <p>execution(\"* com.david..*(..)\")</p> \n <p>匹配指定包以及其子包下&nbsp;参数类型为String&nbsp;的方法</p> \n <p>execution(\"* com.david..*(java.lang.String))</p> \n <pre class=\"brush:java;toolbar:false\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n xmlns:p=\"http://www.springframework.org/schema/p\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n xmlns:context=\"http://www.springframework.org/schema/context\" xmlns:tx=\"http://www.springframework.org/schema/tx\"\n xmlns:aop=\"http://www.springframework.org/schema/aop\" xmlns:jee=\"http://www.springframework.org/schema/jee\"\n xmlns:task=\"http://www.springframework.org/schema/task\"\n xsi:schemaLocation=\"\n  http://www.springframework.org/schema/beans\n  http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n  http://www.springframework.org/schema/context\n  http://www.springframework.org/schema/context/spring-context-3.0.xsd\n  http://www.springframework.org/schema/aop \n  http://www.springframework.org/schema/aop/spring-aop-3.0.xsd\n  http://www.springframework.org/schema/tx\n  http://www.springframework.org/schema/tx/spring-tx-3.0.xsd\n  http://www.springframework.org/schema/jee \n  http://www.springframework.org/schema/jee/spring-jee-3.0.xsd\n  http://www.springframework.org/schema/task  \n http://www.springframework.org/schema/task/spring-task-3.1.xsd  \n  \"&gt;\n &lt;context:component-scan base-package=\"com.david.*\"/&gt;\n &lt;aop:aspectj-autoproxy /&gt;\n &lt;context:property-placeholder location=\"classpath:META-INF/config.properties\" /&gt;\n &lt;!-- 定义数据源 --&gt;\n &lt;bean id=\"dataSource\" class=\"com.mchange.v2.c3p0.ComboPooledDataSource\"\n  destroy-method=\"close\"&gt;\n  &lt;property name=\"driverClass\" value=\"${jdbc.ams.driver}\" /&gt;\n  &lt;property name=\"jdbcUrl\" value=\"${jdbc.ams.url}\" /&gt;\n  &lt;property name=\"user\" value=\"${jdbc.ams.username}\" /&gt;\n  &lt;property name=\"password\" value=\"${jdbc.ams.password}\" /&gt;\n  &lt;property name=\"initialPoolSize\" value=\"${initialSize}\" /&gt;\n  &lt;property name=\"minPoolSize\" value=\"${minPoolSize}\" /&gt;\n  &lt;property name=\"maxPoolSize\" value=\"${maxActive}\" /&gt;\n  &lt;property name=\"acquireIncrement\" value=\"${acquireIncrement}\" /&gt;\n  &lt;property name=\"maxIdleTime\" value=\"${maxIdleTime}\" /&gt;\n &lt;/bean&gt;\n\n &lt;!-- 定义jdbc模板类 --&gt;\n &lt;bean id=\"jdbcTemplate\" class=\"org.springframework.jdbc.core.JdbcTemplate\"&gt;\n  &lt;property name=\"dataSource\" ref=\"dataSource\" /&gt;\n &lt;/bean&gt;\n\n &lt;bean id=\"sqlMapClient\" class=\"org.springframework.orm.ibatis.SqlMapClientFactoryBean\"&gt;\n  &lt;property name=\"dataSource\" ref=\"dataSource\" /&gt;\n  &lt;property name=\"configLocation\" value=\"classpath:META-INF/sqlmap/sqlmap.xml\" /&gt;\n &lt;/bean&gt;\n\n &lt;tx:advice id=\"txAdvice\" transaction-manager=\"transactionManager\"&gt;\n  &lt;tx:attributes&gt;\n   &lt;tx:method name=\"addBook\" propagation=\"REQUIRED\" /&gt;\n   &lt;tx:method name=\"addUserBook\" propagation=\"MANDATORY\" /&gt;\n   &lt;tx:method name=\"deleteBook\" propagation=\"REQUIRES_NEW\" /&gt;\n   &lt;tx:method name=\"addNewBook\" propagation=\"NEVER\" /&gt;\n   &lt;tx:method name=\"addUser\" propagation=\"NESTED\" /&gt;\n  &lt;/tx:attributes&gt;\n &lt;/tx:advice&gt;\n &lt;bean id=\"transactionManager\"\n  class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"&gt;\n  &lt;property name=\"dataSource\" ref=\"dataSource\" /&gt;\n &lt;/bean&gt;\n \n&lt;/beans&gt;</pre> \n <pre class=\"brush:java;toolbar:false\">@Service(\"bookService\")\npublic class BookServiceImpl implements BookService {\n\n private static final Logger logger   = LogManager.getLogger(BookServiceImpl.class);\n public static final String  ADD_BOOK = \"insert into t_book(id,name) values(1,\'duck-j2ee\')\";\n\n public static final String  DELETE_BOOK = \"delete from  t_book where id=1\";\n\n private JdbcTemplate  jdbcTemplate;\n @Autowired\n private BookDao    bookDao;\n\n public void addBook() throws Exception {\n  Book book = new Book();\n  book.setName(\"ibatis\");\n  book.setPrice(11);\n  bookDao.insert(book);\n  throw new UnRollbackException(\"受检查异常，不会回滚\");\n }\n\n public void deleteBook(int id) {\n  try {\n   bookDao.deleteById(id);\n  } catch (SQLException e) {\n   logger.error(\"\", e);\n  }\n }\n\n @LoggingRequired\n public void addNewBook(String name, int price) {\n  try {\n   Book book = new Book();\n   book.setName(name);\n   book.setPrice(price);\n   bookDao.insert(book);\n   List&lt;Book&gt; lists = bookDao.selectAll();\n   System.out.println(lists);\n  } catch (SQLException e) {\n   logger.error(\"\", e);\n  }\n }\n\n public void addUserBook() {\n  jdbcTemplate.execute(\"insert into t_book(id,name) values(3,\'UserBook\')\");\n }\n\n /**\n  * Setter method for property &lt;tt&gt;jdbcTemplate&lt;/tt&gt;.\n  *\n  * @param jdbcTemplate value to be assigned to property jdbcTemplate\n  */\n public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {\n  this.jdbcTemplate = jdbcTemplate;\n }\n\n /**\n  * @see com.david.biz.service.BookService#queryAll()\n  */\n public List&lt;Book&gt; queryAll() {\n  try {\n   return bookDao.selectAll();\n  } catch (SQLException e) {\n   logger.error(\"\", e);\n  }\n  return null;\n }\n\n}</pre> \n <pre class=\"brush:java;toolbar:false\">/**\n * execution（modifiers-pattern? ret-type-pattern declaring-type-pattern? name-pattern（param-pattern）\n    throws-pattern?）\n *arg()  限制连接点匹配参数为指定类型的执行方法\n *@args() 限制连接点匹配参数由执行注解标注的执行\n *execution() 用于匹配连接点的执行方法\n *this() 限制连接点匹配AOP代理的Bean引用为执行类型的类\n *target() 限制连接点匹配目标对象为指定类型的类\n *@target() 限制连接点匹配特定的执行对象，这些对象应具备指定的注解类型\n *@annotation（）限制匹配带有指定注解的连接点\n *\n *\n *\n * @author zhangwei_david\n * @version $Id: LogAspect.java, v 0.1 2014年11月29日 下午1:10:13 zhangwei_david Exp $\n */\n@Component\n@Aspect\npublic class LogAspect {\n private static final Logger logger = LogManager.getLogger(LogAspect.class);\n\n /**\n  * 匹配参数是任何类型，任何数量 且在com,david.biz包或子包下的方法\n  */\n @Pointcut(\"args(..)&amp;&amp;within(com.david.biz..*)\")\n public void arg() {\n\n }\n\n @Pointcut(\"@args(com.david.aop.LoggingRequired)\")\n public void annotationArgs() {\n\n }\n\n @Pointcut(\"@annotation(com.david.aop.LoggingRequired)\")\n public void logRequiredPointcut() {\n\n }\n\n @Pointcut(\"args(java.lang.String,*)\")\n public void argsWithString() {\n\n }\n\n @Pointcut(\"target(com.david.biz.service.impl.BookServiceImpl)\")\n public void targetPointcut() {\n\n }\n\n @Pointcut(\"@target(org.springframework.stereotype.Service)\")\n public void targetAnnotation() {\n\n }\n\n // @Around(\"execution(* org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(..))\")\n // public Object aa(ProceedingJoinPoint pjp) throws Throwable {\n //  try {\n //   Object retVal = pjp.proceed();\n //   System.out.println(retVal);\n //   return retVal;\n //  } catch (Exception e) {\n //   System.out.println(\"异常\");\n //   return null;\n //  }\n // }\n @Before(value = \"logRequiredPointcut()\")\n public void before(JoinPoint joinPoint) {\n  LogUtils.info(logger,\n   \" 连接点表达式@annotation(com.david.aop.LoggingRequired) - method={0} has been visited\",\n   joinPoint.getSignature().getName());\n }\n\n @Before(value = \"arg()\")\n public void beforeArg(JoinPoint joinPoint) {\n  LogUtils.info(logger,\n   \"连接点表达式：args(..)&amp;&amp;within(com.david.biz..*)  method ={0}, args ={1},target={2}\",\n   joinPoint.getSignature().getName(), ToStringBuilder.reflectionToString(\n    joinPoint.getArgs(), ToStringStyle.SHORT_PREFIX_STYLE), joinPoint.getTarget()\n    .getClass().getName());\n }\n\n @Before(value = \"argsWithString()\")\n public void beforeArgWithString(JoinPoint joinPoint) {\n  LogUtils.info(logger, \"连接点表达式：args(java.lang.String,*)  method={0} ,args ={1},target={2}\",\n   joinPoint.getSignature().getName(), ToStringBuilder.reflectionToString(\n    joinPoint.getArgs(), ToStringStyle.SHORT_PREFIX_STYLE), joinPoint.getTarget()\n    .getClass().getName());\n }\n\n @Before(value = \"annotationArgs()\")\n public void beforeAnnotationArgs(JoinPoint joinPoint) {\n  LogUtils\n   .info(\n    logger,\n    \"连接点表达式：@args(com.david.annotation.validate.Length,*)  method={0} ,args ={1},target={2}\",\n    joinPoint.getSignature().getName(), ToStringBuilder.reflectionToString(\n     joinPoint.getArgs(), ToStringStyle.SHORT_PREFIX_STYLE), joinPoint.getTarget()\n     .getClass().getName());\n }\n\n @Before(value = \"targetPointcut()\")\n public void beforeTarget(JoinPoint joinPoint) {\n  LogUtils\n  .info(\n   logger,\n   \"连接点表达式：target(com.david.biz.service.impl.BookServiceImpl)  method={0} ,args ={1},target={2}\",\n   joinPoint.getSignature().getName(), ToStringBuilder.reflectionToString(\n    joinPoint.getArgs(), ToStringStyle.SHORT_PREFIX_STYLE), joinPoint.getTarget()\n    .getClass().getName());\n }\n\n @Before(value = \" targetAnnotation()\")\n public void beforeTargetAnnotation(JoinPoint joinPoint) {\n  LogUtils\n   .info(\n    logger,\n    \"连接点表达式：@target(org.springframework.stereotype.Service)  method={0} ,args ={1},target={2}\",\n    joinPoint.getSignature().getName(), ToStringBuilder.reflectionToString(\n     joinPoint.getArgs(), ToStringStyle.SHORT_PREFIX_STYLE), joinPoint.getTarget()\n     .getClass().getName());\n }\n}</pre> \n <pre class=\"brush:java;toolbar:false\">/**\n *\n * @author zhangwei_david\n * @version $Id: T.java, v 0.1 2014年12月1日 上午9:35:44 zhangwei_david Exp $\n */\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(locations = \"file:H:/workspace4study/WebApp/class=\"lazy-load\" data-original/main/webapp/WEB-INF/applicationContext.xml\")\npublic class BookServiceTest {\n\n    @Autowired\n    private BookService bookService;\n\n    @Test\n    public void testB() {\n        bookService.addNewBook(\"Junit  Test\", 1000);\n    }\n\n}</pre> \n <pre class=\"brush:java;toolbar:false\">2014-12-01 11:14:39  [ main:1577 ] - [ INFO ]   连接点表达式@annotation(com.david.aop.LoggingRequired) - method=addNewBook has been visited\n2014-12-01 11:14:39  [ main:1587 ] - [ INFO ]  连接点表达式：args(..)&amp;&amp;within(com.david.biz..*)  method =addNewBook, args =Object[][{Junit  Test,1000}],target=com.david.biz.service.impl.BookServiceImpl\n2014-12-01 11:14:39  [ main:1588 ] - [ INFO ]  连接点表达式：args(java.lang.String,*)  method=addNewBook ,args =Object[][{Junit  Test,1000}],target=com.david.biz.service.impl.BookServiceImpl\n2014-12-01 11:14:39  [ main:1588 ] - [ INFO ]  连接点表达式：target(com.david.biz.service.impl.BookServiceImpl)  method=addNewBook ,args =Object[][{Junit  Test,1000}],target=com.david.biz.service.impl.BookServiceImpl\n2014-12-01 11:14:39  [ main:1589 ] - [ INFO ]  连接点表达式：@target(org.springframework.stereotype.Service)  method=addNewBook ,args =Object[][{Junit  Test,1000}],target=com.david.biz.service.impl.BookServiceImpl\n2014-12-01 11:14:39  [ main:1589 ] - [ INFO ]  连接点表达式：args(..)&amp;&amp;within(com.david.biz..*)  method =insert, args =Object[][{Book[id=0,name=Junit  Test,price=1000]}],target=com.david.biz.dao.impl.BookDaoImpl\n2014-12-01 11:14:39  [ main:1590 ] - [ INFO ]  连接点表达式：@args(com.david.annotation.validate.Length,*)  method=insert ,args =Object[][{Book[id=0,name=Junit  Test,price=1000]}],target=com.david.biz.dao.impl.BookDaoImpl\n2014-12-01 11:14:39  [ main:1591 ] - [ INFO ]  连接点表达式：args(java.lang.String,*)  method=insert ,args =Object[][{demo.insert,Book[id=0,name=Junit  Test,price=1000]}],target=com.ibatis.sqlmap.engine.impl.SqlMapClientImpl</pre> \n</div>\n<p>转自：http://zhangwei-david.iteye.com/blog/2162096</p>','  在Spring AOP 中，通常需要借助AspectJ 的切点表达式语言来定义切点。重要的是Spring 中仅支持AspectJ切点指示器的一个子集。     Spring 支持的AspectJ的切点指示器           AspectJ 指示器     描述             args()     限制连接点匹配参数为执行类型的执行方法             @args()   ......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:26:33',0,0,0,0,'',NULL,1),(338,1,6,'Tomcat 8.0.11 移动端访问报400错误问题','<div> \n <p>用java写了一组接口，同时给web，ios，android调用，web端访问正常，但ios访问会报400，打断点进行调试，ios的请求根本都到不了controller的代码中，也就是说在tomcat进行http request解析的时候就报错，并将错误返回给客户端了，具体的错误如下：</p> \n <pre class=\"brush:java;toolbar:false\">01-Dec-2014 11:08:11.688 INFO [http-apr-8080-exec-3] org.apache.coyote.http11.AbstractHttp11Processor.process Error parsing HTTP request header\n Note: further occurrences of HTTP header parsing errors will be logged at DEBUG level.</pre> \n <p> <span></span> <span>查看对应的类代码，其中涉及的方法如下：</span> </p> \n <pre class=\"brush:java;toolbar:false\">public SocketState process(SocketWrapper&lt;S&gt; socketWrapper)\n  throws IOException {\n  RequestInfo rp = request.getRequestProcessor();\n  rp.setStage(org.apache.coyote.Constants.STAGE_PARSE);\n\n  // Setting up the I/O\n  setSocketWrapper(socketWrapper);\n  getInputBuffer().init(socketWrapper, endpoint);\n  getOutputBuffer().init(socketWrapper, endpoint);\n\n  // Flags\n  keepAlive = true;\n  comet = false;\n  openSocket = false;\n  sendfileInProgress = false;\n  readComplete = true;\n  if (endpoint.getUsePolling()) {\n   keptAlive = false;\n  } else {\n   keptAlive = socketWrapper.isKeptAlive();\n  }\n\n  if (disableKeepAlive()) {\n   socketWrapper.setKeepAliveLeft(0);\n  }\n\n  while (!getErrorState().isError() &amp;&amp; keepAlive &amp;&amp; !comet &amp;&amp; !isAsync() &amp;&amp;\n    httpUpgradeHandler == null &amp;&amp; !endpoint.isPaused()) {\n\n   // Parsing the request header\n   try {\n    setRequestLineReadTimeout();\n\n    if (!getInputBuffer().parseRequestLine(keptAlive)) {\n     if (handleIncompleteRequestLineRead()) {\n      break;\n     }\n    }\n\n    if (endpoint.isPaused()) {\n     // 503 - Service unavailable\n     response.setStatus(503);\n     setErrorState(ErrorState.CLOSE_CLEAN, null);\n    } else {\n     keptAlive = true;\n     // Set this every time in case limit has been changed via JMX\n     request.getMimeHeaders().setLimit(endpoint.getMaxHeaderCount());\n     // Currently only NIO will ever return false here\n     if (!getInputBuffer().parseHeaders()) {\n      // We\'ve read part of the request, don\'t recycle it\n      // instead associate it with the socket\n      openSocket = true;\n      readComplete = false;\n      break;\n     }\n     if (!disableUploadTimeout) {\n      setSocketTimeout(connectionUploadTimeout);\n     }\n    }\n   } catch (IOException e) {\n    if (getLog().isDebugEnabled()) {\n     getLog().debug(\n       sm.getString(\"http11processor.header.parse\"), e);\n    }\n    setErrorState(ErrorState.CLOSE_NOW, e);\n    break;\n   } catch (Throwable t) {\n    ExceptionUtils.handleThrowable(t);\n    UserDataHelper.Mode logMode = userDataHelper.getNextMode();\n    if (logMode != null) {\n     String message = sm.getString(\n       \"http11processor.header.parse\");\n     switch (logMode) {\n      case INFO_THEN_DEBUG:\n       message += sm.getString(\n         \"http11processor.fallToDebug\");\n       //$FALL-THROUGH$\n      case INFO:\n       getLog().info(message);\n       break;\n      case DEBUG:\n       getLog().debug(message);\n     }\n    }\n    // 400 - Bad Request\n    response.setStatus(400);\n    setErrorState(ErrorState.CLOSE_CLEAN, t);\n    getAdapter().log(request, response, 0);\n   }\n\n   if (!getErrorState().isError()) {\n    // Setting up filters, and parse some request headers\n    rp.setStage(org.apache.coyote.Constants.STAGE_PREPARE);\n    try {\n     prepareRequest();\n    } catch (Throwable t) {\n     ExceptionUtils.handleThrowable(t);\n     if (getLog().isDebugEnabled()) {\n      getLog().debug(sm.getString(\n        \"http11processor.request.prepare\"), t);\n     }\n     // 500 - Internal Server Error\n     response.setStatus(500);\n     setErrorState(ErrorState.CLOSE_CLEAN, t);\n     getAdapter().log(request, response, 0);\n    }\n   }\n\n   if (maxKeepAliveRequests == 1) {\n    keepAlive = false;\n   } else if (maxKeepAliveRequests &gt; 0 &amp;&amp;\n     socketWrapper.decrementKeepAlive() &lt;= 0) {\n    keepAlive = false;\n   }\n\n   // Process the request in the adapter\n   if (!getErrorState().isError()) {\n    try {\n     rp.setStage(org.apache.coyote.Constants.STAGE_SERVICE);\n     getAdapter().service(request, response);\n     // Handle when the response was committed before a serious\n     // error occurred.  Throwing a ServletException should both\n     // set the status to 500 and set the errorException.\n     // If we fail here, then the response is likely already\n     // committed, so we can\'t try and set headers.\n     if(keepAlive &amp;&amp; !getErrorState().isError() &amp;&amp; (\n       response.getErrorException() != null ||\n         (!isAsync() &amp;&amp;\n         statusDropsConnection(response.getStatus())))) {\n      setErrorState(ErrorState.CLOSE_CLEAN, null);\n     }\n     setCometTimeouts(socketWrapper);\n    } catch (InterruptedIOException e) {\n     setErrorState(ErrorState.CLOSE_NOW, e);\n    } catch (HeadersTooLargeException e) {\n     // The response should not have been committed but check it\n     // anyway to be safe\n     if (response.isCommitted()) {\n      setErrorState(ErrorState.CLOSE_NOW, e);\n     } else {\n      response.reset();\n      response.setStatus(500);\n      setErrorState(ErrorState.CLOSE_CLEAN, e);\n      response.setHeader(\"Connection\", \"close\"); // TODO: Remove\n     }\n    } catch (Throwable t) {\n     ExceptionUtils.handleThrowable(t);\n     getLog().error(sm.getString(\n       \"http11processor.request.process\"), t);\n     // 500 - Internal Server Error\n     response.setStatus(500);\n     setErrorState(ErrorState.CLOSE_CLEAN, t);\n     getAdapter().log(request, response, 0);\n    }\n   }\n\n   // Finish the handling of the request\n   rp.setStage(org.apache.coyote.Constants.STAGE_ENDINPUT);\n\n   if (!isAsync() &amp;&amp; !comet) {\n    if (getErrorState().isError()) {\n     // If we know we are closing the connection, don\'t drain\n     // input. This way uploading a 100GB file doesn\'t tie up the\n     // thread if the servlet has rejected it.\n     getInputBuffer().setSwallowInput(false);\n    } else if (expectation &amp;&amp;\n      (response.getStatus() &lt; 200 || response.getStatus() &gt; 299)) {\n     // Client sent Expect: 100-continue but received a\n     // non-2xx final response. Disable keep-alive (if enabled)\n     // to ensure that the connection is closed. Some clients may\n     // still send the body, some may send the next request.\n     // No way to differentiate, so close the connection to\n     // force the client to send the next request.\n     getInputBuffer().setSwallowInput(false);\n     keepAlive = false;\n    }\n    endRequest();\n   }\n\n   rp.setStage(org.apache.coyote.Constants.STAGE_ENDOUTPUT);\n\n   // If there was an error, make sure the request is counted as\n   // and error, and update the statistics counter\n   if (getErrorState().isError()) {\n    response.setStatus(500);\n   }\n   request.updateCounters();\n\n   if (!isAsync() &amp;&amp; !comet || getErrorState().isError()) {\n    if (getErrorState().isIoAllowed()) {\n     getInputBuffer().nextRequest();\n     getOutputBuffer().nextRequest();\n    }\n   }\n\n   if (!disableUploadTimeout) {\n    if(endpoint.getSoTimeout() &gt; 0) {\n     setSocketTimeout(endpoint.getSoTimeout());\n    } else {\n     setSocketTimeout(0);\n    }\n   }\n\n   rp.setStage(org.apache.coyote.Constants.STAGE_KEEPALIVE);\n\n   if (breakKeepAliveLoop(socketWrapper)) {\n    break;\n   }\n  }\n\n  rp.setStage(org.apache.coyote.Constants.STAGE_ENDED);\n\n  if (getErrorState().isError() || endpoint.isPaused()) {\n   return SocketState.CLOSED;\n  } else if (isAsync() || comet) {\n   return SocketState.LONG;\n  } else if (isUpgrade()) {\n   return SocketState.UPGRADING;\n  } else {\n   if (sendfileInProgress) {\n    return SocketState.SENDFILE;\n   } else {\n    if (openSocket) {\n     if (readComplete) {\n      return SocketState.OPEN;\n     } else {\n      return SocketState.LONG;\n     }\n    } else {\n     return SocketState.CLOSED;\n    }\n   }\n  }\n }</pre> \n <p> <span></span> <span>而报错的地方则是在：</span> </p> \n <pre class=\"brush:java;toolbar:false\">// Currently only NIO will ever return false here\n     if (!getInputBuffer().parseHeaders()) {\n      // We\'ve read part of the request, don\'t recycle it\n      // instead associate it with the socket\n      openSocket = true;\n      readComplete = false;\n      break;\n     }\n     if (!disableUploadTimeout) {\n      setSocketTimeout(connectionUploadTimeout);\n     }\n的时候抛出了异常，对应的catch块代码如下：\n catch (Throwable t) {\n    ExceptionUtils.handleThrowable(t);\n    UserDataHelper.Mode logMode = userDataHelper.getNextMode();\n    if (logMode != null) {\n     String message = sm.getString(\n       \"http11processor.header.parse\");\n     switch (logMode) {\n      case INFO_THEN_DEBUG:\n       message += sm.getString(\n         \"http11processor.fallToDebug\");\n       //$FALL-THROUGH$\n      case INFO:\n       getLog().info(message);\n       break;\n      case DEBUG:\n       getLog().debug(message);\n     }\n    }\n    // 400 - Bad Request\n    response.setStatus(400);\n    setErrorState(ErrorState.CLOSE_CLEAN, t);\n    getAdapter().log(request, response, 0);\n   }</pre> \n <p>错误日志的输出，是配置在LocalStrings.properties中的，相关的两个属性：</p> \n <pre class=\"brush:java;toolbar:false\">http11processor.fallToDebug=\\n Note\\: further occurrences of HTTP header parsing errors will be logged at DEBUG level.\nhttp11processor.header.parse=Error parsing HTTP request header</pre> \n <p> <span></span> <span>找到对应的</span> <span>getInputBuffer().parseHeaders()</span> </p> \n <pre class=\"brush:java;toolbar:false\">public boolean parseHeaders()\n  throws IOException {\n  if (!parsingHeader) {\n   throw new IllegalStateException(\n     sm.getString(\"iib.parseheaders.ise.error\"));\n  }\n\n  HeaderParseStatus status = HeaderParseStatus.HAVE_MORE_HEADERS;\n\n  do {\n   status = parseHeader();\n   // Checking that\n   // (1) Headers plus request line size does not exceed its limit\n   // (2) There are enough bytes to avoid expanding the buffer when\n   // reading body\n   // Technically, (2) is technical limitation, (1) is logical\n   // limitation to enforce the meaning of headerBufferSize\n   // From the way how buf is allocated and how blank lines are being\n   // read, it should be enough to check (1) only.\n   if (pos &gt; headerBufferSize\n     || buf.length - pos &lt; socketReadBufferSize) {\n    throw new IllegalArgumentException(\n      sm.getString(\"iib.requestheadertoolarge.error\"));\n   }\n  } while ( status == HeaderParseStatus.HAVE_MORE_HEADERS );\n  if (status == HeaderParseStatus.DONE) {\n   parsingHeader = false;\n   end = pos;\n   return true;\n  } else {\n   return false;\n  }\n }</pre> \n <pre class=\"brush:java;toolbar:false\">可知此处涉及了两个缓冲区大小，headerBufferSize和socketReadBufferSize，如果读取时数据的长度大于这两个值，就会报iib.requestheadertoolarge.error即Request header is too large，在网上搜索时，有的是因为这个设置导致的400，解决方法就是修改Tomcat的server.xml，\n在&lt;Connector port=\"8080\" protocol=\"HTTP/1.1\"\n connectionTimeout=\"20000\"    redirectPort=\"8443\" /&gt;的配置中增加maxHttpHeaderSize的配置</pre> \n <p> <span></span> <span>在org.apache.coyote.http11.AbstractHttp11Protocol类中定义了其默认值：</span> </p> \n <pre class=\"brush:java;toolbar:false\">/**\n Maximum size of the HTTP message header.  */ \nprivate int maxHttpHeaderSize = 8 * 1024;\n/**\nMaximum size of the post which will be saved when processing certain  requests, such as a POST. */ \nprivate int maxSavePostSize = 4 * 1024;\n/**\n* Specifies a different (usually  longer) connection timeout during data  upload. */ \nprivate int connectionUploadTimeout = 300000;\n /**\nMaximum size of trailing headers in bytes */ \nprivate int maxTrailerSize = 8192;\n/**\n Maximum size of extension information in chunked encoding */ \nprivate int maxExtensionSize = 8192;\n/**Maximum amount of request body to swallow.*/\nprivate int maxSwallowSize = 2 * 1024 * 1024;</pre> \n <p> <span></span> <span>其他参数设置介绍：</span> <a href=\"http://tomcat.apache.org/tomcat-8.0-doc/config/ajp.html\" rel=\"nofollow,noindex\">http://tomcat.apache.org/tomcat-8.0-doc/config/ajp.html</a> </p> \n <p>----------------------------------------分隔线-------------------------------------------------</p> \n <p>各种配置尝试后，最终发现问题是因为ios发送http请求时自己添加的User-Agent中的字符编码导致的tomcat在解析http header的时候出错导致的。并非是因为tomcat这边的配置导致的。</p> \n</div>\n<p>转自：http://bsr1983.iteye.com/blog/2162165</p>','  用java写了一组接口，同时给web，ios，android调用，web端访问正常，但ios访问会报400，打断点进行调试，ios的请求根本都到不了controller的代码中，也就是说在tomcat进行http request解析的时候就报错，并将错误返回给客户端了，具体的错误如下：  01-Dec-2014 11:08:11.688 INFO [http-apr-8080-exec-3] ......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:26:34',0,0,0,0,'',NULL,1),(339,1,6,'[原]Java之美[从菜鸟到高手演变]之spring框架初识','<div> \n <h4>初识轻量级Java开源框架 --- Spring</h4> \n <p> 作者 <span>：egg</span> </p> \n <p> 微博 <span sizset=\"33\" sizcache=\"2\"> : <a target=\"_blank\" href=\"http://weibo.com/xtfggef\" rel=\"nofollow,noindex\">http://weibo.com/xtfggef</a> </span> </p> \n <p> 出处: <span sizset=\"34\" sizcache=\"2\"> <a target=\"_blank\" href=\"http://blog.csdn.net/zhangerqing\" rel=\"nofollow,noindex\">http://blog.csdn.net/zhangerqing</a> </span> </p> \n <p> spring是一个轻量级Java框架，其核心思想就是DI（Dependency Injection，即依赖注入）和IoC（Inversion of Control，即控制反转），因为其开源、低侵入性，现在已经席卷了很大一部分市场，其最大竞争对手乃是JavaEE框架EJB。EJB3.0以前，由于其笨重以及使用繁琐，被人们无奈弃用，取而代之就是spring，但是spring也有它的局限性，就是spring对分布式的支持不好，但是EJB在这方面很有优势，而且当前EJB3.0简化了操作，使用不再繁琐，竞争力进一步提升。所以，当前轻量级的JavaWeb项目，很多都是使用的spring，我们有必要把它学好！本章系 <span> <strong>Java之美[从菜鸟到高手演变]系列</strong> </span> 之spring框架初识，我希望大家和我一起，再次回顾下Spring的基础知识，积极提出宝贵的意见和建议！本次学习使用的是Spring4.1 版本。 </p> \n <h2>Modules</h2> \n <p> <img class=\"alignCenter\" data-original=\"\" alt=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958794586.jpg\"> </p> \n <p>从这幅图中我们可以看出来Spring的整体架构，主要分为六大模块</p> \n <h3>Core Container</h3> \n <p>核心部分分为4大块，spring-core, spring-beans, spring-context, spring-expression. 其中core和bean是整个框架的核心，提供了基础的DI和IoC功能。 Context建立在core和beans模块之上，提供一种类似JNDI且以框架的方式来操作对象的方式。Context模块从beans模块继承它的功能同时增加了国际化支持，如资源绑定等，同时，Context模块也支持JavaEE功能，如EJB，JMX和基本的远程调用。ApplicationContext接口是context模块的焦点。expression是一种很强大的expression language，支持在运行时查询和操作对象的属性，我们会在后面的文章中举些例子来说明spring expression language的用法。</p> \n <h3>AOP and instrumentation</h3> \n <p>Aop模块提供了面向切面编程的实现，和AspectJ集成。</p> \n <h3>Messaging</h3> \n <p>Messaging是spring4新增加的模块，包含了一部分主要的基于message的应用的实现。</p> \n <h3>Data Access/Integration</h3> \n <p>Data access顾名思义，是spring对数据层提供的支持，是功能比较丰富的模块。提供了包括JDBC，事物，ORM，JMS等一系列实现。</p> \n <h3>Web</h3> \n <p>Web模块主要提供面向web的一些实现，例如多文件上传，servlet监听器以及spring mvc方面的支持。</p> \n <h3>Test</h3> \n <p>Test模块主要是针对spring的各个模块做各种各样的测试，包括单元测试、集成测试等等。</p> \n <p>关于各个模块具体的解释及作用我们会在后面的文章中一一提到，也请有兴趣的读者自行去查阅spring官方文档，获得更详细的说明。</p> \n <h2>第一个Spring小程序</h2> \n <p>新建一个User类，一个UserDao类以及一个测试类：</p> \n <p>User.java</p> \n <pre class=\"brush:java;toolbar:false\">package com.adam.java.spring.po;\n\npublic class User {\n private String name;\n private int age;\n private int score;\n public String getName() {\n  return name;\n }\n public void setName(String name) {\n  this.name = name;\n }\n public int getAge() {\n  return age;\n }\n public void setAge(int age) {\n  this.age = age;\n }\n public int getScore() {\n  return score;\n }\n public void setScore(int score) {\n  this.score = score;\n }\n \n public String toString(){\n  return \"tostring from user\";\n }\n}</pre> \n <p>UserDao.java</p> \n <pre class=\"brush:java;toolbar:false\">package com.adam.java.spring.dao;\n\nimport com.adam.java.spring.po.User;\n\npublic class UserDao {\n private User user;\n \n public void add(){\n  System.out.println(\"add from userdao\");\n  System.out.println(user.toString());\n }\n\n public User getUser() {\n  return user;\n }\n\n public void setUser(User user) {\n  this.user = user;\n }\n\n \n}</pre> \n <p>DITest.java</p> \n <pre class=\"brush:java;toolbar:false\">package com.adam.java.spring;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\nimport com.adam.java.spring.dao.UserDao;\n\npublic class DITest {\n\n @SuppressWarnings(\"resource\")\n public static void main(String[] args) {\n  ApplicationContext atx = new ClassPathXmlApplicationContext(\"beans.xml\");\n  UserDao userDao = (UserDao) atx.getBean(\"userDao\");\n  userDao.add();\n }\n\n}</pre> \n <p>一个配置文件beans.xml</p> \n <pre class=\"brush:java;toolbar:false\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"&gt;\n\n&lt;bean id=\"user\" class=\"com.adam.java.spring.po.User\"/&gt;\n&lt;bean id=\"userDao\" class=\"com.adam.java.spring.dao.UserDao\"&gt;\n &lt;property name=\"user\" ref=\"user\"/&gt;\n&lt;/bean&gt;\n&lt;/beans&gt;</pre> \n <p>执行测试类，得出如下输出：</p> \n <pre class=\"brush:java;toolbar:false\">add from userdao\ntostring from user</pre> \n</div>\n<p>转自：http://blog.csdn.net/zhangerqing/article/details/8546049</p>','  初识轻量级Java开源框架 --- Spring   作者 ：egg    微博  : http://weibo.com/xtfggef     出处:  http://blog.csdn.net/zhangerqing     spring是一个轻量级Java框架，其核心思想就是DI（Dependency Injection，即依赖注入）和IoC（Inversion of Control，即......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:26:35',0,0,0,0,'http://www.fzqblog.top/upload/201608/1471958794586.jpg|',NULL,1),(340,1,6,'从godaddy购买ssl证书以及如何应用到tomcat上','<div> \n <p>折腾了几个小时，因为就没一个完整的说的对的。</p> \n <p>大体过程是生成keystore和csr，然后提交csr给godaddy，下载tomcat版本的证书，把证书导入到自己的keystore。</p> \n <p>下面是具体过程。</p> \n <p>准备工作是把jdk的bin文件夹加入到path里面，保证能访问到keytool（或者直接进入这个文件夹执行命令）</p> \n <p>1.访问</p> \n <p>https://www.digicert.com/easy-csr/keytool.htm</p> \n <p>填写必要的信息，尤其是common name，是网站域名.结果是生成命令，拷贝到命令行里面直接之行，会生成一个jks文件和一个csr文件，注意jks文件其实就是.keystore,名字不同而已。</p> \n <p>注意这里要记住密码。</p> \n <p>2.csr文件内容提交到godaddy，然后下载tomcat版本。</p> \n <p>3.下面先解释一下压缩包里面几个文件的含义。</p> \n <p>根据</p> \n <p>http://serverfault.com/questions/578025/discerning-godaddy-ssl-certificate-types</p> \n <p>的说明：</p> \n <p>gd_bundle-g2-g1.crt: Go Daddy Certificate Bundles - G2 With Cross to G1, includes Root</p> \n <p>gdig2.crt: Go Daddy Secure Server Certificate (Intermediate Certificate) - G2</p> \n <p>随机id.crt: Your certificate</p> \n <p>4.下面开始导入这几个文件到.keystore文件（或者说是jks文件）</p> \n <p>正常给人的感觉是分别导入</p> \n <p>gd_bundle-g2-g1.crt</p> \n <p>gdig2.crt</p> \n <p>xxxxxx.crt（压缩包里面一个随机id.crt的文件）</p> \n <p>是可以的，godaddy的文档貌似也是这么解释的，实际上不是。</p> \n <p>需要访问</p> \n <p>https://certs.godaddy.com/repository</p> \n <p>下载gdroot-g2.crt，作为root CA进行签名。</p> \n <p>对我来说是：</p> \n <p>keytool -import -alias root -keystore tomcat.keystore -storepass 密码 -trustcacerts -file gdroot-g2.crt</p> \n <p>keytool -import -alias intermed -keystore tomcat.keystore -storepass 密码 -trustcacerts -file gdig2.crt</p> \n <p>keytool -import -alias server -keystore tomcat.keystore -storepass 密码-trustcacerts -file 随机id.crt （注意这里alias是server，是因为最早生成keystore的时候，alias是server，很多文档写的tomcat，因为开始生成keystore使用的alias是tomcat）</p> \n <p>需要注意的是，如果直接把gd_bundle-g2-g1.crt作为root，会报告错误：无法从回复中建立链（Failed to establish chain from reply）</p> \n <p>然后把这个tomcata.keystore(我没有叫tomcat.jks主要是为了以后看起来明确这个文件是干什么的)，以及密码配置到server.xml即可。</p> \n <p>&lt;Connector port=\"443\" protocol=\"org.apache.coyote.http11.Http11Protocol\"</p> \n <p>maxThreads=\"150\" SSLEnabled=\"true\" scheme=\"https\" secure=\"true\"</p> \n <p>clientAuth=\"false\" sslProtocol=\"TLS\"&nbsp; keystoreFile=\"路径/tomcat.keystore\" keystorePass=\"密码\"/&gt;</p> \n <p>现在浏览器访问，不会再报告ssl不安全了。</p> \n</div>\n<p>转自：http://flashing.iteye.com/blog/2162315</p>','  折腾了几个小时，因为就没一个完整的说的对的。  大体过程是生成keystore和csr，然后提交csr给godaddy，下载tomcat版本的证书，把证书导入到自己的keystore。  下面是具体过程。  准备工作是把jdk的bin文件夹加入到path里面，保证能访问到keytool（或者直接进入这个文件夹执行命令）  1.访问  https://www.digicert.com/easy-......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:26:35',0,0,0,0,'',NULL,1),(341,1,6,'JSP验证码','<div> \n <h2>1、login.jsp登陆界面</h2> \n <pre class=\"brush:java;toolbar:false\">&lt;%@ page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\"\n pageEncoding=\"ISO-8859-1\"%&gt;\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\"&gt;\n&lt;title&gt;Login Page&lt;/title&gt;\n\n&lt;script language=\"javascript\"&gt;\n function loadImage()\n {\n  document.getElementById(\"randImage\").class=\"lazy-load\" data-original=\"image.jsp?\"+Math.random();\n }\n&lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n&lt;form action=\"validate.jsp\" method=\"post\"&gt;\n&lt;table cellspacing=\"1\" cellpadding=\"3\" border=\"0\"&gt;\n &lt;tr&gt;\n  &lt;td colspan=\"2\"&gt;Please enter your verification code&lt;/td&gt;\n &lt;/tr&gt;\n &lt;tr&gt;\n  &lt;td&gt;&lt;input type=\"text\" name=\"vcode\"/&gt;&lt;/td&gt;\n  &lt;td&gt;&lt;img class=\"lazy-load\" data-original=\"image.jsp\" id=\"randImage\"/&gt;&lt;/td&gt;\n &lt;/tr&gt;\n &lt;tr&gt;\n  &lt;td colspan=\"2\"&gt;&lt;a href=\"javascript:loadImage()\"&gt;Change an image&lt;/a&gt;&lt;/td&gt;\n &lt;/tr&gt;\n &lt;tr&gt;\n  &lt;td colspan=\"2\"&gt;&lt;input type=\"submit\" value=\"Submit\"/&gt;&lt;/td&gt;\n &lt;/tr&gt;\n&lt;/table&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre> \n <h2>2、image.jsp生成验证码图片的jsp文件</h2> \n <pre class=\"brush:java;toolbar:false\">&lt;%@ page language=\"java\"%&gt;\n&lt;%@ page import=\"java.awt.*,java.awt.image.*,java.util.*\" %&gt;\n&lt;%@ page import=\"java.io.OutputStream,javax.imageio.*\"%&gt;\n\n&lt;%!\n Color getRandColor(int fc,int bc){\n  if(fc&gt;255){\n   fc=255;\n  }\n  if(bc&gt;255){\n   bc=255;\n  }\n  Random random=new Random();\n  int r=fc+random.nextInt(bc-fc);\n  int g=fc+random.nextInt(bc-fc);\n  int b=fc+random.nextInt(bc-fc);\n  \n  return new Color(r,g,b);\n }\n%&gt;\n&lt;%\n //本地无缓存,每次自动刷新\n response.addHeader(\"pragma\", \"No-cashe\");\n response.addHeader(\"cashe-control\",\"no-cashe\");\n response.setDateHeader(\"expires\",0);\n \n int width=60,height=20;\n BufferedImage bimg=new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);\n Graphics g=bimg.getGraphics();\n g.setColor(getRandColor(200,250));\n g.fillRect(0, 0, width, height);\n g.setColor(getRandColor(160,200));\n Random rand=new Random();\n for(int i=0;i&lt;200;i++){\n  int x=rand.nextInt(width);\n  int y=rand.nextInt(height);\n  int w=rand.nextInt(12);\n  int h=rand.nextInt(12);\n  g.drawLine(x, y, x+w, y+h);\n }\n \n String srand=\"\";\n g.setFont(new Font(\"Times New Roman\",Font.PLAIN,18));\n for(int i=0;i&lt;4;i++){\n  String num=String.valueOf(rand.nextInt(10));\n  srand+=num;\n  g.setColor(new Color(20+rand.nextInt(110),20+rand.nextInt(110),20+rand.nextInt(110)));\n  g.drawString(num, 13*i+6, 16);\n }\n \n session.setAttribute(\"srand\", srand);\n \n OutputStream os=response.getOutputStream();\n ImageIO.write(bimg, \"jpeg\", os);\n \n os.flush();\n os.close();\n os=null;\n g.dispose();\n \n //这两句非常重要，如果没有会报错\n out.clear();\n out=pageContext.popBody();\n%&gt;</pre> \n <h2>3、validate.jsp对验证码进行验证</h2> \n <pre class=\"brush:java;toolbar:false\">&lt;%@ page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\"\n pageEncoding=\"ISO-8859-1\"%&gt;\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\"&gt;\n&lt;title&gt;Validate Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;%\n String str=(String)session.getAttribute(\"srand\");\n String incode=request.getParameter(\"vcode\");\n if(str.equals(incode)){\n  out.println(\"&lt;font size=\\\"+3\\\" color=\\\"#000\\\"&gt;The verification is right!&lt;/font&gt;&lt;br/&gt;\");\n  out.println(\"&lt;font size=\\\"+4\\\" color=\\\"#FF0000\\\"&gt;Welcone to the page!&lt;/font&gt;&lt;br/&gt;&lt;hr/&gt;\");\n }else{\n  out.println(\"&lt;font size=\\\"+4\\\" color=\\\"#FF0000\\\"&gt;\"\n    +\"Sorry the verification code is not right&lt;/font&gt;&lt;/br&gt;&lt;hr&gt;\");\n }\n out.println(\"&lt;br/&gt;&lt;a href=\\\"login.jsp\\\"&gt;Back to the login page&lt;/a&gt;\");\n%&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre> \n <h2>4、结果</h2> \n <img class=\"alignCenter\" data-original=\"\" alt=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958795902.png\"> \n <p> <img class=\"alignCenter\" data-original=\"\" alt=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958796100.png\"> </p> \n <p> <img class=\"alignCenter\" data-original=\"\" alt=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958796346.png\"> </p> \n</div>\n<p>转自：http://blog.csdn.net/cjc211322/article/details/41719247</p>','  1、login.jsp登陆界面  Login Page function loadImage() {  document.getElementById(\"randImage\").class=\"lazy-load\" data-original=\"image.jsp?\"+Math.random(); }   Please enter your verification code          ......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:26:36',0,0,0,0,'http://www.fzqblog.top/upload/201608/1471958795902.png|http://www.fzqblog.top/upload/201608/1471958796100.png|http://www.fzqblog.top/upload/201608/1471958796346.png|',NULL,1),(342,1,6,'详解Spring MVC 4之ViewResolver视图解析器','<div> \n <p>所有的We MVC框架都有一套它自己的解析视图的机制，Spring MVC也不例外，它使用ViewResolver进行视图解析，让用户在浏览器中渲染模型。ViewResolver是一种开箱即用的技术，能够解析JSP、Velocity模板和XSLT等多种视图。</p> \n <p>Spring处理视图最重要的两个接口是ViewResolver和View。ViewResolver接口在视图名称和真正的视图之间提供映射； 而View接口则处理请求将真正的视图呈现给用户。</p> \n <p> &nbsp;1.几种常见的ViewResolver视图解析器 </p> \n <p>在Spring MVC 4控制器中，所有的处理方法必须返回一个逻辑视图名称，无论是显式的（返回String，View或ModelAndView）还是隐式的。Spring中的视图由视图解析器处理这个逻辑视图名称，Spring有以下几种视图解析器：</p> \n <p> <span>AbstractCachingViewResolver</span> <span>：用来缓存视图的抽象视图解析器。通常情况下，视图在使用前就准备好了。继承改解析器就能够使用视图缓存。</span> </p> \n <p> <span></span> <span>XmlViewResolver</span> <span>&nbsp;：XML视图解析器。它实现了ViewResolver接口，接受相同DTD定义的XML配置文件作为Spring的XML bean工厂。</span> </p> \n <p> <span></span> <span>ResourceBundleViewResolver</span> <span>：它使用了ResourceBundle定义下的bean，实现了ViewResolver接口，指定了绑定包的名称。通常情况下，配置文件会定义在classpath下的properties文件中，默认的文件名字是views.properties。</span> </p> \n <p> <span></span> <span>UrlBasedViewResolver</span> <span>：它简单实现了ViewResolver接口，它不用显式定义，直接影响逻辑视图到URL的映射。它让你不用任何映射就能通过逻辑视图名称访问资源。</span> </p> \n <p> <span></span> <span>InternalResourceViewResolver</span> <span>：国际化视图解析器。</span> </p> \n <p> <span></span> <code class=\"prettyprint\"><span style=\"font-family:arial, helvetica, sans-serif;font-size:16px;\">VelocityViewResolver</span> <span>&nbsp;/</span> <code class=\"prettyprint\"><span style=\"font-family:arial, helvetica, sans-serif;font-size:16px;\">FreeMarkerViewResolver</span> <span>：Velocity或FreeMarker视图解析器。</span> </code></code></p>\n <code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <span></span> <span>ContentNegotiatingViewResolver</span> <span>：内容谈判视图解析器</span> </p> <p>在JSP视图技术中，Spring MVC经常会使用 UrlBasedViewResolver视图解析器，该解析器会将视图名称翻译成URL并通过RequestDispatcher处理请求后渲染视图。</p> <pre class=\"brush:java;toolbar:false\"><span style=\"font-family:arial, helvetica, sans-serif;font-size:16px;\">&lt;bean id=\"viewResolver\"<br>        class=\"org.springframework.web.servlet.view.UrlBasedViewResolver\"&gt;<br>    &lt;property name=\"viewClass\" value=\"org.springframework.web.servlet.view.JstlView\"/&gt;<br>    &lt;property name=\"prefix\" value=\"/WEB-INF/views/\"/&gt;<br>    &lt;property name=\"suffix\" value=\".jsp\"/&gt;&lt;/bean&gt;<br></span></pre> <p>假如我们配置了如上所示的URL视图解析器，我们返回了一个叫“favmvc”的视图名称，视图解析器就会将请求转发到RequestDispatcher，然后跳转到/WEB-INF/views/favmvc.jsp页面。</p> <p>假如我们想要在应用中使用不同的视图技术，我们就应该使用 ResourceBundleViewResolver。</p> <pre class=\"brush:java;toolbar:false\"><span style=\"font-family:arial, helvetica, sans-serif;font-size:16px;\">&lt;bean id=\"viewResolver\"<br>        class=\"org.springframework.web.servlet.view.ResourceBundleViewResolver\"&gt;<br>    &lt;property name=\"basename\" value=\"views\"/&gt;<br>    &lt;property name=\"defaultParentView\" value=\"parentView\"/&gt;&lt;/bean&gt;<br></span></pre> <p>ResourceBundleViewResolver对于每个要处理的视图，都会检查 ResourceBundle中basename的唯一性，它使用 [viewname].(class)作为视图类，[viewname].url作为视图的url。</p> <p> &nbsp;2. 链式视图解析器（Chaining ViewResolvers） </p> <p>Spring支持同时配置多个视图解析器，也就是链式视图解析器。这样，在某些情况下，就能够重写某些视图。如果我们配置了多个视图解析器，并想要给视图解析器排序的话，设定 order 属性就可以指定解析器执行的顺序。order的值越高，解析器执行的顺序越晚。</p> <p>下面代码所示的例子由两个视图解析器组成。 InternalResourceViewResolver总是最后一个执行，而 XmlViewResolver则指定解析XML视图（InternalResourceViewResolver不支持Excel视图）。</p> <pre class=\"brush:java;toolbar:false\"><span style=\"font-family:arial, helvetica, sans-serif;font-size:16px;\">&lt;bean id=\"jspViewResolver\" class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"&gt;<br>    &lt;property name=\"viewClass\" value=\"org.springframework.web.servlet.view.JstlView\"/&gt;<br>    &lt;property name=\"prefix\" value=\"/WEB-INF/jsp/\"/&gt;<br>    &lt;property name=\"suffix\" value=\".jsp\"/&gt;&lt;/bean&gt;&lt;bean id=\"excelViewResolver\" class=\"org.springframework.web.servlet.view.XmlViewResolver\"&gt;<br>    &lt;property name=\"order\" value=\"1\"/&gt;<br>    &lt;property name=\"location\" value=\"/WEB-INF/views.xml\"/&gt;&lt;/bean&gt;&lt;!-- in views.xml --&gt;&lt;beans&gt;<br>    &lt;bean name=\"report\" class=\"org.springframework.example.ReportExcelView\"/&gt;&lt;/beans&gt;<br></span></pre> <p>如果视图解析器没有指定视图的话，Spring就会检查其它的视图解析器，直到有一个完整的包含视图的视图解析器。如果一个完整的视图解析器也没有找到的话，Spring就会抛出 ServletException。</p> <p>视图解析器规定如果没有找到视图就返回null。但不是所有的视图解析器都这么做，因为在某些情况下，解析器并不能检测是否存在视图。比如InternalResourceViewResolver在内部使用RequestDispatcher时，调度转发是判断JSP是否存在的唯一方法，但该action却只能执行一次。VelocityViewResolver和其它的一些解析器也这样，区分这些视图解析器能否在找不到视图的情况下返回null，最好的方法就是看官方文档中它是否支持了。由于 InternalResourceViewResolver总会返回视图，在视图链中使用InternalResourceViewResolver就能让你避免这些问题。</p> <h4>3. &nbsp;重定向视图</h4> <p>在controller控制器中强制重定向的方法就是创建并返回Spring的RedirectView实例。在这种情况下，DispatcherServlet不再使用正常的视图机制，因为它已经返回了重定向视图，DispatcherServlet只是告诉视图去显示。</p> <p>RedirectView会调用 HttpServletResponse.sendRedirect()方法，然后它就作为HTTP重定向返回给客户端浏览器。默认情况下，所有的模板属性变量都认为是重定向URL，其余的属性自动附加为查询参数。</p> <p> redirect前缀 </p> <p>尽管RedirectView工作机制很好，但如果控制器本身创建RedirectView时，毫无疑问控制器本身知道该如何重定向。这样做并不好，控制器不应该关心响应如何处理，它只是处理被注入的视图名称。</p> <p>当我们在返回视图名称时，如果使用了“redirect：”前缀（如“redirect : /login”），UrlBasedViewResolver视图控制器会识别这是一次特殊的重定向，并把redirect后面的视图名称当做重定向的地址。</p> <p> <span>假如我们在http://favccxx.com应用中返回“redirect:/favboy”视图时， 系统会重定向到http://favccxx.com/favboy。但如果我们返回了“redirect:http://favsoft.me”这样的视图时，系统会重定向到http://</span> favsoft <span>.me的视图上。</span> </p> <p> forward前缀 </p> <p>forward前缀视图是另一种通过URLBasedViewResolver机制处理到的转向机制，它在视图名称周围创建InternalResourceView，因此这个前缀跟InternalResourceViewResolver和InternalResourceView无关。但这个前缀在你想使用其它视图技术但想强制通过Servlet/JSP引擎处理资源进行转向时是有用的。</p> <p></p> <p> &nbsp;redirect与forward的区别 &nbsp; &nbsp; </p> <p> redirect方式相当 于\"response.sendRedirect()\".这种方式外部特征就是浏览器地址栏最后显示的路径是转发后的新的路径.工作方式是这样的，服务器端会首先发一个response给浏览器，然后浏览器收到这个response后再发一个requeset给服务器，然后服务器发新的response给浏览器。这时页面收到的request是一个新从浏览器发来的.这种方式的结果是： </p> <p>A.在转发前后有两个不同的request对象,转发前后的两个控制器在request上的参数(request.getParameter())和request属性(request.getAttribute())不能共享。</p> <p>B.如果转发前后的两个控制器都配置在spring 拦截器范围内,这样拦截器会拦截前后两个request,即会拦截两次。</p> <p>C.最后返回到浏览器后,因为地址栏显示的是转发后的url，所以刷新页面时只会执行后面的url映射的控制器。</p> <p> forward方式相当于 request.getRequestDispatcher().forward(request,response) .这种方式的外部特征是浏览器地址显示的路径是转发前的路径。工作方式是这样，forward 发生在服务器内部,在前一个控制器处理完毕后,直接进入下一个控制器处理，并将最后的response发给浏览器。这种方式的结果是： </p> <p>A.转发前后是同一个request,后一个控制器可共享前一个控制器的参数与属性。</p> <p>B.因为是同一个request，拦截器只会拦截前一个url，如果前一个url在映射时未配置到拦截器拦截，则拦截后一个url，即只拦截一次。</p> <p>C.最后返回到浏览器后,因为地址栏显示的是转发前的url，所以刷新页面时会依次执行前后两个控制器。</p> <p>总结：本文介绍了Spring MVC 4中常见的几种视图解析器，以及如何配置视图解析器包括链式视图解析器，最后除了正常视图映射机制外，我们还能够通过redirect/forward视图转向机制完成视图的重定向。本文偏向原理性介绍，关于视图解析机制在工作中的使用，并没有做过多的介绍，目的是让读者能够了解ViewResolver的工作机制。</p> <p></p> </code></code>\n</div>\n<p><code class=\"prettyprint\"><code class=\"prettyprint\">转自：http://favccxx.blog.51cto.com/2890523/1585720</code></code></p>\n<code class=\"prettyprint\"><code class=\"prettyprint\"> </code></code>','  所有的We MVC框架都有一套它自己的解析视图的机制，Spring MVC也不例外，它使用ViewResolver进行视图解析，让用户在浏览器中渲染模型。ViewResolver是一种开箱即用的技术，能够解析JSP、Velocity模板和XSLT等多种视图。  Spring处理视图最重要的两个接口是ViewResolver和View。ViewResolver接口在视图名称和真正的视图之间提供映......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:26:37',0,0,0,0,'',NULL,1),(343,1,6,'关于tomcat的日志框架','<div> \n <h2> <em>1.</em> 摘要 </h2> \n <p>最近部门在做监控工具的时候碰到的一个打印日志的问题。</p> \n <h2> <em>2.</em> 背景 </h2> \n <ul> \n  <li>应用部署在tomcat中，使用log4j作为日志框架。</li> \n  <li>监控工具使用javaagent的方式随tomcat启动，同样使用log4j作为日志框架。</li> \n </ul> \n <h2> <em>3.</em> 现象 </h2> \n <ul> \n  <li>在tomcat目录下放置log4j jar包和log4j.properties文件，启动服务后发现监控工具日志正常，原有应用的日志不见了。</li> \n  <li>只放置jar包，保留应用中的log4j.properties，所有日志都没有了。</li> \n  <li>只放jar包，agent启动时sleep100秒，两边日志都正常了。</li> \n </ul> \n <h2> <em>4.</em> 原因 </h2> \n <ol> \n  <li>javaagent的premain和java main在同一个jvm中执行，使用的是system classloader。</li> \n  <li>system classloader的搜索路径是启动命令行里的classpath(-cp)。</li> \n  <li> <p>tomcat webapps下的应用是由WebappClassLoader加载的，搜索路径是WEB-INF/classes,WEB-INF/lib，找不到则调用父加载器，继承关系如下：</p> \n   <div data-settings=\"minimize scroll-mouseover\"> \n    <div data-settings=\"mouseover overlay hide delay\"> \n     <div> \n      <p></p> \n      <p></p> \n      <p></p> \n      <p></p> \n      <p></p> \n      <p></p> \n     </div> \n    </div> \n    <p> </p>\n    <pre class=\"brush:java;toolbar:false\">Bootstrap\n      |\n   System\n      |\n   Common\n   /     \\\nWebapp1   Webapp2 ...</pre> \n    <table> \n     <tbody>\n      <tr> \n       <td> \n        <div> \n         <p> <span>Bootstrap</span> </p> \n         <p> <span></span> <span>|</span> </p> \n         <p> <span></span> <span>System</span> </p> \n         <p> <span></span> <span>|</span> </p> \n         <p> <span></span> <span>Common</span> </p> \n         <p> <span></span> <span>/</span> <span>&nbsp;&nbsp;&nbsp;&nbsp;</span> <span>\\</span> </p> \n         <p> <span>Webapp1&nbsp;&nbsp;</span> <span>Webapp2</span> <span>.</span> <span>.</span> <span>.</span> </p> \n        </div> </td> \n      </tr> \n     </tbody>\n    </table> \n   </div> <p>默认情况下（直接类引用的方式），父加载器是感知不到子加载器的，或者说，java agent加载不了webapps下的jar，webapps可以加载system classpath下的jar。</p> </li> \n  <li> <p>log4j加载log4j.properties时会先取thread context classloader的classpath。如果由java agent初始化，会找system classpath；如果由webapp初始化，则会找webapp classpath（WEB_INF/classes），所以sleep一段时间有奇效。</p> </li> \n  <li> <p>tomcat的日志使用了jdk提供的logging框架，具体实现是由$CATALINA_HOME/bin/tomcat-juli.jar提供，这个jar包在catalina.sh里被加入到system classpath:</p> \n   <div data-settings=\"minimize scroll-mouseover\"> \n    <div data-settings=\"mouseover overlay hide delay\"> \n     <div> \n      <p></p> \n      <p></p> \n      <p></p> \n      <p></p> \n      <p></p> \n      <p></p> \n     </div> \n    </div> \n    <p> </p>\n    <pre class=\"brush:java;toolbar:false\">rem Add tomcat-juli.jar to classpath  \nrem tomcat-juli.jar can be over-ridden per instance  \nif not exist \"%CATALINA_BASE%\\bin\\tomcat-juli.jar\" goto juliClasspathHome  \nset \"CLASSPATH=%CLASSPATH%;%CATALINA_BASE%\\bin\\tomcat-juli.jar\"</pre> \n    <table> \n     <tbody>\n      <tr> \n       <td> \n        <div> \n         <p> <span>rem</span> <span>Add</span> <span>tomcat</span> <span>-</span> <span>juli</span> <span>.</span> <span>jar</span> <span>to</span> <span>classpath&nbsp;&nbsp;</span> </p> \n         <p> <span>rem</span> <span>tomcat</span> <span>-</span> <span>juli</span> <span>.</span> <span>jar</span> <span>can</span> <span>be</span> <span>over</span> <span>-</span> <span>ridden</span> <span>per</span> <span>instance&nbsp;&nbsp;</span> </p> \n         <p> <span>if</span> <span>not</span> <span>exist</span> <span>\"%CATALINA_BASE%\\bin\\tomcat-juli.jar\"</span> <span>goto</span> <span>juliClasspathHome&nbsp;&nbsp;</span> </p> \n         <p> <span>set</span> <span>\"CLASSPATH=%CLASSPATH%;%CATALINA_BASE%\\bin\\tomcat-juli.jar\"</span> <span>&nbsp;&nbsp;</span> </p> \n        </div> </td> \n      </tr> \n     </tbody>\n    </table> \n   </div> <p>$CATALINA_HOME/conf/logging.properties文件配置了tomcat本身的日志系统，包含juli file和console两部分，console被输出为catalina.out，juli file包含localhost_xxx、host_manager等。</p> </li> \n </ol> \n <h2> <em>5.</em> 解决方案 </h2> \n <ol> \n  <li> <p>在代码里使用java.util.logging，$CATALINA_HOME/conf/logging.properties里新增一个输出的handler，agent就可以直接使用这套日志系统了。</p> </li> \n  <li> <p> 配置tomcat使用log4j，所有日志通过apache common-logging输出，具体参考 <a href=\"http://tomcat.apache.org/tomcat-7.0-doc/logging.html\" rel=\"nofollow,noindex\">这里</a> </p> <p> </p><p>根据官方文档里的说明，这里对原有的tomcat-juli做了修改，主要是增加了apache common logging。也就是说juli由system classloader加载，log4j由common classloader加载，由acl完成logger实现类的转移。</p> </li> \n </ol> \n <h2> <em>6.</em> 参考资料 </h2> \n</div>\n<p>转自：http://blog.2baxb.me/关于tomcat的日志框架/</p>','   1. 摘要   最近部门在做监控工具的时候碰到的一个打印日志的问题。   2. 背景      应用部署在tomcat中，使用log4j作为日志框架。   监控工具使用javaagent的方式随tomcat启动，同样使用log4j作为日志框架。     3. 现象      在tomcat目录下放置log4j jar包和log4j.properties文件，启动服务后发现监控工具日志正常，原......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:26:37',0,0,0,0,'',NULL,1),(344,1,6,'Mybatis 分页插件 3.3.0 发布','<div> \n <p> <a href=\"http://www.oschina.net/news/57249/git-osc-android-and-iphone-app-opensource\" target=\"_blank\" rel=\"nofollow,noindex\">Git@OSC 的 Android 和 iOS 客户端全面开源</a> </p> \n <p> 如果你也在用Mybatis，建议尝试该分页插件，这个一定是 <strong>最方便</strong> 使用的分页插件。 </p> \n <p>该插件目前支持Oracle,Mysql,MariaDB,SQLite,Hsqldb,PostgreSQL六种数据库分页。 </p> \n <p>经过近4个月的完善和反馈，3.3.0版本已经稳定，该版本相对3.2.3进行了大量的重构和完善。</p> \n <h3>v3.3.0</h3> \n <ol> \n  <li> <p>对MappedStatement对象进行缓存，包括count查询的MappedStatement以及分页查询的MappedStatement，分页查询改为预编译查询。</p> </li> \n  <li> <p>独立的SqlUtil类，由于原来的PageHelper太复杂，因此将拦截器外的其他代码独立到SqlUtil中，方便查看代码和维护。SqlUtil中增加Parser接口，提供一个抽象的SimpleParser实现，不同数据库的分页代码通过继承SimpleParser实现。</p> </li> \n  <li> <p> 特殊的Parser实现类SqlParser类，这是一个独立的java类，主要提供了 <strong>更高性能的count查询</strong> sql，可以根据sql自动改为count(*)查询，自动去除不需要的order by语句，如果需要使用该类，只要把该类放到SqlUtil类相同的包下即可， <strong>同时需要引入Jar包jsqlparser-0.9.1.jar</strong> 。 </p> </li> \n  <li> <p>增强的PageInfo类，PageInfo类包含了分页几乎所有需要用到的属性值，减少了对分页逻辑的过多投入。</p> </li> \n  <li> <p>分页合理化，自动处理pageNum的异常情况。例如当pageNum&lt;=0时，会设置pageNum=1，然后查询第一页。当pageNum&gt;pages(总页数)时，自动将pageNum=pages，查询最后一页。</p> </li> \n  <li> <p>增加对PostgreSQL,MariaDB,SQLite支持。其中MariaDB,SQLite和Mysql分页一样。</p> </li> \n </ol> \n <p> 历史更新： <a href=\"http://git.oschina.net/free/Mybatis_PageHelper/wikis/Changelog\" target=\"_blank\" rel=\"nofollow,noindex\"> </a></p>\n <p><a href=\"http://git.oschina.net/free/Mybatis_PageHelper/wikis/Changelog\" target=\"_blank\" rel=\"nofollow,noindex\">http://git.oschina.net/free/Mybatis_PageHelper/wikis/Changelog</a></p>\n <p> </p> \n <p> 如何使用： <a href=\"http://git.oschina.net/free/Mybatis_PageHelper/wikis/HowToUse\" target=\"_blank\" rel=\"nofollow,noindex\">http://git.oschina.net/free/Mybatis_PageHelper/wikis/HowToUse</a> </p> \n <p>这个版本已经实现了所有可能想到的改进，经过4个月的完善，可能已经是最后的版本了。</p> \n <p>如果各位发现仍然可以大幅提升性能和使用性的方法，欢迎告知。</p> \n <p>本插件目前支持6种数据库，其中Mysql,MariaDB,SQLite使用的是同一种分页。</p> \n <p>这6种数据库中，除了SQLite没有经过完整测试外，其他的数据库全部测试通过。</p> \n <p> 由于每增加一种数据库支持，都需要 <strong>安装数据库</strong> 并进行完整的测试，对个人来说压力比较大，所以除非有新的开发者加入，暂时不会添加对mssql和db2的支持。如果您有兴趣，欢迎参与！ </p> \n</div>\n<p>转自：http://www.oschina.net/news/57619/mybatis-pager-helper-3-3-0</p>','   Git@OSC 的 Android 和 iOS 客户端全面开源    如果你也在用Mybatis，建议尝试该分页插件，这个一定是 最方便 使用的分页插件。   该插件目前支持Oracle,Mysql,MariaDB,SQLite,Hsqldb,PostgreSQL六种数据库分页。   经过近4个月的完善和反馈，3.3.0版本已经稳定，该版本相对3.2.3进行了大量的重构和完善。  v3.3.......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:26:38',0,0,0,0,'',NULL,1),(345,1,6,'安全的复杂之处：安全web请求的架构','<div> \n <p> <span>借助于Spring Security的强大基础配置功能以及内置的认证功能，我们在前面讲述的三步配置是很快就能完成的；它们的使用是通过添加</span> <span>auto-config</span> <span>属性和</span> <span>http</span> <span>元素实现的。</span> </p> \n <p>但不幸的是，应用实现的考量、架构的限制以及基础设施集成的要求可能使你的Spring Security实现远较这个简单的配置所提供的复杂。很多用户一使用比基本配置复杂的功能就会遇到麻烦，那是因为他们不了解这个产品的架构以及各个元素是如何协同工作以实现一个整体的。</p> \n <p>理解web请求的整体流程以及它们是如何穿越实现功能的拦截器链，对我们成功了解Spring Security的高级话题至关重要。记住认证和授权的基本概念，因为它们贯穿我们要保护的系统架构的始终。</p> \n <p> <img class=\"alignCenter\" data-original=\"\" alt=\"\" title=\"点击查看原始大小图片\" src=\"http://www.fzqblog.top/upload/201608/1471958798455.png\"> </p> \n <h3> <span>请求是怎样被处理的？</span> </h3> \n <p>Spring Security的架构在很大程度上依赖代理（delegates）和servlet过滤器，来实现环绕在web应用请求前后的功能层。</p> \n <p>Servlet过滤器（Servlet Filter，实现javax.servlet.Filter接口的类）被用来拦截用户请求来进行请求之前或之后的处理，或者干脆重定向这个请求，这取决于servlet过滤器的功能。在JBCP Pets在线商店中，最终的目标servlet是Spring MVC&nbsp;分发servlet，但是在理论上它可能是任何一个web servlet。下面的图描述了一个servlet过滤器是如何封装一个用户请求的：</p> \n <div> \n  <p> <img class=\"alignCenter\" data-original=\"\" alt=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958800303.png\"> </p> \n  <p>Spring Security在XML配置文件中的自动配置属性，建立了十个servlet过滤器，它们通过使用Java EE的servlet过滤器链按顺序组合起来。Filter chain是Java EE Servlet API的一个概念，通过接口javax.servlet.FilterChain进行定义，它允许在web应用中的一系列的servlet过滤器能够应用于任何给定的请求。</p> \n </div> \n <p>与生活中金属制定的链类似，每一个servelt过滤器代表链上的一环，它会进行方法的调用以处理用户的请求。请求穿过整个过滤器链，按顺序调用每个过滤器。</p> \n <div> \n  <p> <img class=\"alignCenter\" data-original=\"\" alt=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958801680.png\"> </p> \n  <p>正如你能从链这个词汇中推断出的那样，servlet请求按照一定的顺序从一个过滤器到下一个穿过整个过滤器链，最终到达目标servlet。与之相对的是，当servelt处理完请求并返回一个response时，过滤器链按照相反的顺序再次穿过所有的过滤器。</p> \n </div> \n <p>Spring Security使用了过滤器链的概念并实现了自己抽象，提供了VirtualFilterChain，它可以根据Spring Security XML配置文件中设置的URL模式动态的创建过滤器链（可以将它与标准的Java EE过滤器链进行对比，后者需要在web应用的部署描述文件中进行设置）。</p> \n <p>【Servlet过滤器除了能够如它的名字所描述的那样进行过滤功能（或阻止请求）以外，还可以用于很多其他的目的。实际上，很多的servlet过滤器的功能类似于在web运行的环境中对请求进行AOP式的代理拦截，因为它们可以允许一些功能在任何发往servelt容器的请求处理之前或之后执行。过滤器能实现的多功能在Spring Security中页得到了体现，因为很多过滤器实际上并不直接影响用户的请求。】</p> \n <p>自动配置的选项为你建立了十个Spring Security的过滤器。理解这些过滤器的默认行为以及它们在哪里以及如何配置的，对使用Spring Security的高级功能至关重要。</p> \n <p>这些过滤器以及它们使用的顺序，在下面的表格中进行了描述。大多数这些过滤器在我们完善JBCP Pets在线商店的过程中都会被再次提到，所以如果你现在不明白它们的确切功能也不必担心。</p> \n <table cellspacing=\"0\" cellpadding=\"0\" border=\"1\"> \n  <tbody> \n   <tr> \n    <td> <p>过滤器名称</p> </td> \n    <td> <p>描述</p> </td> \n   </tr> \n   <tr> \n    <td> <p>o.s.s.web.context.SecurityContextPersistenceFilter</p> </td> \n    <td> <p>负责从SecurityContextRepository获取或存储SecurityContext。SecurityContext代表了用户安全和认证过的session。</p> </td> \n   </tr> \n   <tr> \n    <td> <p>o.s.s.web.authentication.logout.LogoutFilter</p> </td> \n    <td> <p>监控一个实际为退出功能的URL（默认为/j_spring_security_logout），并且在匹配的时候完成用户的退出功能。</p> </td> \n   </tr> \n   <tr> \n    <td> <p>o.s.s.web.authentication.UsernamePasswordAuthenticationFilter</p> </td> \n    <td> <p>监控一个使用用户名和密码基于form认证的URL（默认为/j_spring_security_check），并在URL匹配的情况下尝试认证该用户。</p> </td> \n   </tr> \n   <tr> \n    <td> <p>o.s.s.web.authentication.ui.DefaultLoginPageGeneratingFilter</p> </td> \n    <td> <p>监控一个要进行基于forn或OpenID认证的URL（默认为/spring_security_login），并生成展现登录form的HTML</p> </td> \n   </tr> \n   <tr> \n    <td> <p>o.s.s.web.authentication.www.BasicAuthenticationFilter</p> </td> \n    <td> <p>监控HTTP&nbsp;基础认证的头信息并进行处理</p> </td> \n   </tr> \n   <tr> \n    <td> <p>o.s.s.web.savedrequest.</p> <p>RequestCacheAwareFilter</p> </td> \n    <td> <p>用于用户登录成功后，重新恢复因为登录被打断的请求。</p> </td> \n   </tr> \n   <tr> \n    <td> <p>o.s.s.web.servletapi.</p> <p>SecurityContextHolderAwareRequest</p> <p>Filter</p> </td> \n    <td> <p>用一个扩展了HttpServletRequestWrapper的子类（o.s.s.web. servletapi.SecurityContextHolderAwareRequestWrapper）包装HttpServletRequest。它为请求处理器提供了额外的上下文信息。</p> </td> \n   </tr> \n   <tr> \n    <td> <p>o.s.s.web.authentication.</p> <p>AnonymousAuthenticationFilter</p> </td> \n    <td> <p>如果用户到这一步还没有经过认证，将会为这个请求关联一个认证的token，标识此用户是匿名的。</p> </td> \n   </tr> \n   <tr> \n    <td> <p>o.s.s.web.session.</p> <p>SessionManagementFilter</p> </td> \n    <td> <p>根据认证的安全实体信息跟踪session，保证所有关联一个安全实体的session都能被跟踪到。</p> </td> \n   </tr> \n   <tr> \n    <td> <p>o.s.s.web.access.</p> <p>ExceptionTranslationFilter</p> </td> \n    <td> <p>解决在处理一个请求时产生的指定异常</p> </td> \n   </tr> \n   <tr> \n    <td> <p>o.s.s.web.access.intercept.</p> <p>FilterSecurityInterceptor</p> </td> \n    <td> <p>简化授权和访问控制决定，委托一个AccessDecisionManager完成授权的判断</p> </td> \n   </tr> \n  </tbody> \n </table> \n <p>Spring Security拥有总共大约25个过滤器，它们能够根据你的需要进行适当的应用以改变用户请求的行为。当然，如果需要的话，你也可以添加你自己实现了javax.servlet.Filter接口的过滤器。</p> \n <p>请记住，如果你在XML配置文件中使用了auto-config属性，以上表格中列出的过滤器自动添加的。通过使用一些额外的配置指令，以上列表中的过滤器能够精确的控制是否被包含，在后续的章节章将会进行介绍。</p> \n <p>你可能会完全从头做起来配置过滤器链。尽管这会很单调乏味，因为有很多的依赖关系要配置，但是它为配置和应用场景的匹配方面提供了更高层次的灵活性。我们将在第六章讲述在启动的过程中所依赖的Spring Bean的声明。</p> \n <p>你可能想知道DelegatingFilterProxy是怎样找到Spring Security配置的过滤器链的。让我们回忆一下，在web.xml文件中，我们需要给DelegatingFilterProxy一个过滤器的名字：</p> \n <table cellspacing=\"0\" cellpadding=\"0\" border=\"1\"> \n  <tbody> \n   <tr> \n    <td> <p>&lt;filter&gt;</p> <p>&lt;filter-name&gt;springSecurityFilterChain&lt;/filter-name&gt;</p> <p>&lt;filter-class&gt;</p> <p>org.springframework.web.filter.DelegatingFilterProxy</p> <p>&lt;/filter-class&gt;</p> <p>&lt;/filter&gt;</p> </td> \n   </tr> \n  </tbody> \n </table> \n <p>这个过滤器的名字并不是随意配置的，实际上会跟根据这个名字把Spring Security织入到DelegatingFilterProxy。除非明确配置，否则DelegatingFilterProxy会在Spring WebApplicationContext中寻找同名的配置bean（名字是在filter-name中指明的）。更多配置DelegatingFilterProxy的细节可以在这个类对应的Javadoc中找到。</p> \n <h3> <span>在</span> <span>auto-config</span> <span>场景下，发生了什么事情？</span> </h3> \n <p>在Spring Security 3中，使用auto-config会自动提供以下三个认证相关的功能：</p> \n <p> &lt;!--[if !supportLists]--&gt; <span>l&nbsp;&nbsp;</span> &lt;!--[endif]--&gt;HTTP基本认证 </p> \n <p> &lt;!--[if !supportLists]--&gt; <span>l&nbsp;&nbsp;</span> &lt;!--[endif]--&gt;Form登录认证 </p> \n <p> &lt;!--[if !supportLists]--&gt; <span>l&nbsp;&nbsp;</span> &lt;!--[endif]--&gt;退出 </p> \n <p>值得注意的是，也可以使用配置元素实现这三个功能，能够实现比使用auto-config提供的功能更精确。我们将在随后的章节中看到它们的使用以提供更高级的功能。</p> \n <p> 【auto-config和以前不一样了！在Spring Security3之前的版本中，auto-config属性提供了比现在更多的启动项。在Spring Security2中通过auto-config配置的功能，现在可以使用security命名空间样式的配置很容易的实现。请参考 <span>第13章：迁移至Spring Security 3</span> 来获取更多从Spring Security2迁移到3的详细信息。】 </p> \n <p>除了以上认证相关的功能，其它过滤器链的配置是通过使用&lt;http&gt;元素来实现的。</p> \n <h3> <span>用户是怎样认证的？</span> </h3> \n <p>在我们的安全系统中，当一个用户在我们的登录form中提供凭证后，这些凭证信息必须与凭证存储中的数据进行校验以确定下一步的行为。凭证的校验涉及到一系列的逻辑组件，它们封装了认证过程。</p> \n <p>我们将会深入讲解我们例子中的用户名和密码登录form，与之对应的接口和实现都是特定于用户名和密码认证的。但是，请记住，整体的认证是相同的，不管你是使用基于form的登录请求，或者使用一个外部的认证提供者如集中认证服务（CAS），抑或用户的凭证信息存在一个数据库或在一个LDAP目录中。在本书的第二部分，我们将会看到在基于form登录中学到的概念是如何应用到更高级的认证机制中。</p> \n <p>涉及到认证功能的重要接口在下边的图标中有一个概览性的描述：</p> \n <div> \n  <p> <img class=\"alignCenter\" data-original=\"\" alt=\"\" title=\"点击查看原始大小图片\" src=\"http://www.fzqblog.top/upload/201608/1471958803001.png\"> </p> \n  <p>站在一个较高层次上看，你可以看到有三个主要的组件负责这项重要的事情：</p> \n </div> \n <table cellspacing=\"0\" cellpadding=\"0\" border=\"1\"> \n  <tbody> \n   <tr> \n    <td> <p>接口名</p> </td> \n    <td> <p>描述/角色</p> </td> \n   </tr> \n   <tr> \n    <td> <p>AbstractAuthenticationProcessingFilter</p> </td> \n    <td> <p>它在基于web的认证请求中使用。处理包含认证信息的请求，如认证信息可能是form POST提交的、SSO信息或者其他用户提供的。创建一个部分完整的Authentication对象以在链中传递凭证信息。</p> </td> \n   </tr> \n   <tr> \n    <td> <p>AuthenticationManager</p> </td> \n    <td> <p>它用来校验用户的凭证信息，或者会抛出一个特定的异常（校验失败的情况）或者完整填充Authentication对象，将会包含了权限信息。</p> </td> \n   </tr> \n   <tr> \n    <td> <p>AuthenticationProvider</p> </td> \n    <td> <p>它为AuthenticationManager提供凭证校验。一些AuthenticationProvider的实现基于凭证信息的存储，如数据库，来判定凭证信息是否可以被认可。</p> </td> \n   </tr> \n  </tbody> \n </table> \n <p>有两个重要接口的实现是在认证链中被这些参与的类初始化的，它们用来封装一个认证过（或还没有认证过的）的用户的详细信息和权限。</p> \n <p>o.s.s.core.Authentication是你以后要经常接触到的接口，因为它存储了用户的详细信息，包括唯一标识（如用户名）、凭证信息（如密码）以及本用户被授予的一个或多个权限（o.s.s.core.</p> \n <p>GrantedAuthority）。开发人员通常会使用Authentication对象来获取用户的详细信息，或者使用自定义的认证实现以便在Authentication对象中增加应用依赖的额外信息。</p> \n <p>以下列出了Authentication接口可以实现的方法：</p> \n <table cellspacing=\"0\" cellpadding=\"0\" border=\"1\"> \n  <tbody> \n   <tr> \n    <td> <p>方法签名</p> </td> \n    <td> <p>描述</p> </td> \n   </tr> \n   <tr> \n    <td> <p>Object getPrincipal()</p> </td> \n    <td> <p>返回安全实体的唯一标识（如，一个用户名）</p> </td> \n   </tr> \n   <tr> \n    <td> <p>Object getCredentials()</p> </td> \n    <td> <p>返回安全实体的凭证信息</p> </td> \n   </tr> \n   <tr> \n    <td> <p>List&lt;GrantedAuthority&gt;</p> <p>getAuthorities()</p> </td> \n    <td> <p>得到安全实体的权限集合，根据认证信息的存储决定的。</p> </td> \n   </tr> \n   <tr> \n    <td> <p>Object getDetails()</p> </td> \n    <td> <p>返回一个跟认证提供者相关的安全实体细节信息</p> </td> \n   </tr> \n  </tbody> \n </table> \n <p>你可能会担心的发现，Authentication接口有好几个方法的返回值是简单的java.lang.Object。这可能会导致在编译阶段很难知道调用Authentication对象的方法返回值是什么类型的对象。</p> \n <p>需要注意的一点是AuthenticationProvider并不是直接被AuthenticationManager接口使用或引用的。但是Spring Security只提供了AuthenticationManager的一个具体实现类，即o.s.s.authentication.ProviderManager，它会使用一个或更多以上描述的AuthenticationProvider实现类。因为AuthenticationProvider的使用非常普遍并且被很好的集成在ProviderManager中，所以理解它在最常见的基本配置下是如何工作的就非常重要了。</p> \n <p>让我们更仔细的看看在基于web用户名和密码认证的请求下，这些类的处理过程：</p> \n <p> <span> </span></p>\n <p> <img class=\"alignCenter\" data-original=\"\" alt=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958805254.png\"> </p> \n <p></p>  \n <span> <span>让我们看一下在较高层次示意图中反映出的抽象工作流程，并将其细化到这个基于表单认证的具体实现。你可以看到</span> <span>UsernamePasswordAuthenticationFilter</span> <span>负责（通过代理从它的抽象父类中）创建</span> <span>UsernamePasswordAuthenticationToken</span> <span>对象（</span> <span>Authentication</span> <span>接口的一个实现），并部分填充这个对象依赖的信息，这些信息来自</span> <span>HttpServletRequet</span> <span>。但是它是从哪里获取用户名和密码的呢？</span> </span> \n <p></p> \n <h4>spring_security_login是什么？我们怎么到达这个界面的？</h4> \n <p> 你可能已经发现，当你试图访问我们JBCP Pets商店的主页时，你被重定向到 <a target=\"_blank\" href=\"http://localhost:8080/JBCPPets/spring_security_login\" rel=\"nofollow,noindex\">http://localhost:8080/JBCPPets/spring_security_login</a> ： </p> \n <div> \n  <p> <img class=\"alignCenter\" data-original=\"\" alt=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958806270.png\"> </p> \n  <p>URL的spring_security_login部分表明这是一个默认的登录的页面并且是在DefaultLoginPageGeneratingFilter中命名的。我们可以使用配置属性来修改这个页面的名字从而使得它对于我们应用来说是唯一的。</p> \n </div> \n <p>【建议修改登录页URL的默认值。修改后不仅能够对应用或搜索引擎更友好，而且能够隐藏你使用Spring Security作为安全实现的事实。通过这种方式来掩盖Spring Security能够使得万一Spring Security被发现存在安全漏洞时，恶意黑客寻找你应用漏洞的难度。尽管通过这种方式的安全掩盖不会降低你应用的脆弱性，但是它确实能够使得一些传统的黑客工具很难确定你的应用能够承担的住什么类型的攻击。需要注意的是，这里并不是“spring”名称在URL中出现的唯一地方。我们将在后面的章节详细阐述。】</p> \n <p>让我们看一下这个form的HTML源码（忽略布局信息），来看一下UsernamePasswordAuthenticationFilter期望得到的信息：</p> \n <table cellspacing=\"0\" cellpadding=\"0\" border=\"1\"> \n  <tbody> \n   <tr> \n    <td> <p>&lt;form name=\'f\' action=\'/JBCPPets/j_spring_security_check\'&nbsp;&nbsp;method=\'POST\'&gt;</p> <p>User:&lt;input type=\'text\' name=\'j_username\' value=\'\'&gt;</p> <p>Password:&lt;input type=\'password\' name=\'j_password\'/&gt;</p> <p>&lt;input name=\"submit\" type=\"submit\"/&gt;</p> <p>&lt;input name=\"reset\" type=\"reset\"/&gt;</p> <p>&lt;/form&gt;</p> </td> \n   </tr> \n  </tbody> \n </table> \n <p>你可以看到用户名和密码对应的form文本域有独特的名字（(j_username和j_password），并且form的action地址j_spring_security_check也并不是我们配置的。它们是怎么来的呢？</p> \n <p>文本域的名字是UsernamePasswordAuthenticationFilter规定的，并借鉴了Java EE Servlet 2.x的规范（在SRV.12.5.3章节中），规范要求登录的form使用特定的名字并且form的action要为特定的j_security_check值。这样的实际模式目标是允许基于Java EE servlet-based的应用能够与servlet容器的安全设施以标准的方式连接起来。</p> \n <p>因为我们的应用没有使用到servlet容器的安全组件，所以可以明确设置UsernamePasswordAuthenticationFilter以使得文本域有不同的名字。这种特定的配置变化可能会比你想象的复杂。现在，我们将要回顾一下UsernamePasswordAuthenticationFilter的生命周期，看一下它是如何进入我们配置的（尽管我们将会在第六章再次讲述这个配置）。</p> \n <p> UsernamePasswordAuthenticationFilter是通过&lt;http&gt;配置指令的&lt;form-login&gt;子元素来进行配置的。正如在本章前面讲述的，我们设置的auto-config元素将会在你没有明确添加的情况下包含了&lt;form-login&gt;功能。正如你可能猜测的那样，j_spring_security_check并不对应任何应用中的物理资源。它只是UsernamePasswordAuthenticationFilter监视的一个基于form登录的URL。实际上，在Spring Security中有好几个这样的特殊的URL来实现特定的全局功能。你能在 <span>附录：参考资料</span> 中找到这些URL的一个列表。 </p> \n <h4>用户的凭证信息是在哪里被校验的？</h4> \n <p>在我们的简单的三步配置文件中，我们使用了一个基于内存的凭证存储实现快速的部署和运行：</p> \n <table cellspacing=\"0\" cellpadding=\"0\" border=\"1\"> \n  <tbody> \n   <tr> \n    <td> <p>&lt;authentication-manager alias=\"authenticationManager\"&gt;</p> <p>&lt;authentication-provider&gt;</p> <p>&lt;user-service&gt;</p> <p>&lt;user authorities=\"ROLE_USER\" name=\"guest\" password=\"guest\"/&gt;</p> <p>&lt;/user-service&gt;</p> <p>&lt;/authentication-provider&gt;</p> <p>&lt;/authentication-manager&gt;</p> </td> \n   </tr> \n  </tbody> \n </table> \n <p>我们没有将AuthenticationProvider与任何具体的实现相关联，在这里我们再次看到了security命名空间默认为我们做了许多机械的配置工作。但是需要记住的是AuthenticationManager支持配置一个或多个AuthenticationProvider。&lt;authentication-provider&gt;声明默认谁实例化一个内置的实现，即o.s.s.authentication.dao.DaoAuthenticationProvider。&lt;authentication-provider&gt;声明会自动的将这个AuthenticationProvider对象织入到配置的AuthenticationManager中，当然在我们这个场景中AuthenticationManager是自动配置的。</p> \n <p>DaoAuthenticationProvider是AuthenticationProvider的简单封装实现并委托o.s.s.core.userdetails.UserDetailsService接口的实现类进行处理。UserDetailsService负责返回o.s.s.core.userdetails.UserDetails的一个实现类。</p> \n <p>如果你查看UserDetails的Javadoc，你会发现它与我们前面讨论的Authentication接口非常类似。尽管它们在方法名和功能上有些重叠的部分，但是请不要混淆，它们有着截然不同的目的：</p> \n <table cellspacing=\"0\" cellpadding=\"0\" border=\"1\"> \n  <tbody> \n   <tr> \n    <td> <p>接口</p> </td> \n    <td> <p>目的</p> </td> \n   </tr> \n   <tr> \n    <td> <p>Authentication</p> </td> \n    <td> <p>它存储安全实体的标识、密码以及认证请求的上下文信息。它还包含用户认证后的信息（可能会包含一个UserDetails的实例）。通常不会被扩展，除非是为了支持某种特定类型的认证。</p> </td> \n   </tr> \n   <tr> \n    <td> <p>UserDetails</p> </td> \n    <td> <p>为了存储一个安全实体的概况信息，包含名字、e-mail、电话号码等。通常会被扩展以支持业务需求。</p> </td> \n   </tr> \n  </tbody> \n </table> \n <p>我们对&lt;user-service&gt;子元素的声明将会触发对o.s.s.core.userdetails.memory.InMemoryDaoImpl的配置，它是UserDetailsService的一个实现。正如你可能期望的那样，这个实现将在安全XML文件中配置的用户信息放在一个内存的数据存储中。这个service的实现支持其它属性的设置，从而实现账户的禁用和锁定。</p> \n <p>让我们更直观的看一下DaoAuthenticationProvider是如何交互的，从而AuthenticationManager提供认证支持：</p> \n <div> \n  <p> <img class=\"alignCenter\" data-original=\"\" alt=\"\" title=\"点击查看原始大小图片\" src=\"http://www.fzqblog.top/upload/201608/1471958806803.png\"> </p> \n  <p>正如你可能想象的那样，认证是相当可配置化的。大多数的Spring Security例子要么使用基于内存的用户凭证存储要么使用JDBC（在数据库中）的用户凭证存储。我们已经意识到修改JBCP Pets应用以实现数据库存储用户凭证是一个好主意，我们将会在第四章来处理这个配置变化。</p> \n </div> \n <h4>什么时候校验不通过？</h4> \n <p>Spring Security很好的使用应用级异常（expected exceptions）来表示处理各种的结果情况。你可能在使用Spring Security的日常工作中不会与这些异常打交道，但是了解它们以及它们为何被抛出将会在调试问题或理解应用流程中非常有用。</p> \n <p>所有认证相关的异常都继承自o.s.s.core.AuthenticationException基类。除了支持标准的异常功能，AuthenticationException包含两个域，可能在提供调试失败信息以及报告信息给用户方面很有用处。</p> \n <p> &lt;!--[if !supportLists]--&gt; <span>l&nbsp;&nbsp;</span> &lt;!--[endif]--&gt;authentication：存储关联认证请求的Authentication实例； </p> \n <p> &lt;!--[if !supportLists]--&gt; <span>l&nbsp;&nbsp;</span> &lt;!--[endif]--&gt;extraInformation：根据特定的异常可以存储额外的信息。如UsernameNotFoundException在这个域上存储了用户名。 </p> \n <p> 我们在下面的表格中，列出了常见的异常。完整的认证异常列表可以在 <span>附录：参考资料</span> 中找到： </p> \n <table cellspacing=\"0\" cellpadding=\"0\" border=\"1\"> \n  <tbody> \n   <tr> \n    <td> <p>异常类</p> </td> \n    <td> <p>何时抛出</p> </td> \n    <td> <p>extraInformation内容</p> </td> \n   </tr> \n   <tr> \n    <td> <p>BadCredentialsException</p> </td> \n    <td> <p>如何没有提供用户名或者密码与认证存储中用户名对应的密码不匹配</p> </td> \n    <td> <p>UserDetails</p> </td> \n   </tr> \n   <tr> \n    <td> <p>LockedException</p> </td> \n    <td> <p>如果用户的账号被发现锁定了</p> </td> \n    <td> <p>UserDetails</p> </td> \n   </tr> \n   <tr> \n    <td> <p>UsernameNotFoundException</p> </td> \n    <td> <p>如果用户名不存在或者用户没有被授予的GrantedAuthority</p> </td> \n    <td> <p>String（包含用户名）</p> </td> \n   </tr> \n  </tbody> \n </table> \n <p>这些以及其他的异常将会传递到过滤器链上，通常将会被request请求的过滤器捕获并处理，要么将用户重定向到一个合适的界面（登录或访问拒绝），要么返回一个特殊的HTTP状态码，如HTTP 403（访问被拒绝）。</p> \n <div> \n  <h3> <span>请求是怎样被授权的？</span> </h3> \n  <p>在Spring Security的默认过滤器链中，最后一个servelt过滤器是FilterSecurityInterceptor，它的作用是判断一个特定的请求是被允许还是被拒绝。在FilterSecurityInterceptor被触发的时候，安全实体已经经过了认证，所以系统知道他们是合法的用户。（其实也有可能是匿名的用户，译者注）。请记住的一点是，Authentication提供了一个方法（(List&lt;GrantedAuthority&gt;</p> \n  <p>getAuthorities()），将会返回当前安全实体的一系列权限列表。授权的过程将使用这个方法提供的信息来决定一个特定的请求是否会被允许。</p> \n  <p>需要记住的是授权是一个二进制的决策——一个用户要么有要么没有访问一个受保护资源的权限。在授权中，没有模棱两可的情景。</p> \n  <p>在Spring Security中，良好的面向对象设计随处可见，在授权决策管理中也不例外。回忆一下我们在本章前面的讨论，一个名为访问控制决策器（access decision manager）的组件负责作出授权决策。</p> \n  <p>在Spring Security中，o.s.s.access.AccessDecisionManager接口定义了两个简单而合理的方法，它们能够用于请求的决策判断流程：</p> \n  <p> &lt;!--[if !supportLists]--&gt; <span>l&nbsp;&nbsp;</span> &lt;!--[endif]--&gt;supports：这个逻辑操作实际上包含两个方法，它们允许AccessDecisionManager的实现类判断是否支持当前的请求。 </p> \n  <p> &lt;!--[if !supportLists]--&gt; <span>l&nbsp;&nbsp;</span> &lt;!--[endif]--&gt;decide：基于请求的上下文和安全配置，允许AccessDecisionManager去核实访问是否被允许以及请求是否能够被接受。decide方法实际上没有返回值，通过抛出异常来表明对请求访问的拒绝。 </p> \n  <p>与AuthenticationException及其子类在认证过程中的使用很类似，特定类型的异常能够表明应用在授权决策中的不同处理结果。o.s.s.access.AccessDeniedException是在授权领域里最常见的异常，因此值得过滤器链进行特殊的处理。我们将在第六章中详细介绍它的高级配置。</p> \n  <p>AccessDecisionManager是能够通过标准的Spring bean绑定和引用实现完全的自定义配置。AccessDecisionManager的默认实现提供了一个基于AccessDecisionVoter接口和投票集合的授权机制。</p> \n  <p>投票器（voter）是在授权过程中的一个重要角色，它的作用是评估以下的内容：</p> \n  <p> &lt;!--[if !supportLists]--&gt; <span>l&nbsp;&nbsp;</span> &lt;!--[endif]--&gt;要访问受保护资源的请求所对应上下文（如URL请求的IP地址）； </p> \n  <p> &lt;!--[if !supportLists]--&gt; <span>l&nbsp;&nbsp;</span> &lt;!--[endif]--&gt;用户的凭证信息（如果存在的话）； </p> \n  <p> &lt;!--[if !supportLists]--&gt; <span>l&nbsp;&nbsp;</span> &lt;!--[endif]--&gt;要试图访问的受保护资源； </p> \n  <p> &lt;!--[if !supportLists]--&gt; <span>l&nbsp;&nbsp;</span> &lt;!--[endif]--&gt;系统的配置以及要访问资源本身的配置参数。 </p> \n  <p>AccessDecisionManager还会负责传递要请求资源的访问声明信息（在代码中为ConfigAttribute接口的实现类）给投票器。在web URL的请求中，投票器将会得到资源的访问声明信息。如果看一下我们配置文件中非常基础的拦截声明，我们能够看到ROLE_USER被设置为访问配置并用于用户试图访问的资源：</p> \n  <table cellpadding=\"0\" border=\"1\" cellspacing=\"0\"> \n   <tbody> \n    <tr> \n     <td> <p>&lt;intercept-url pattern=\"/*\" access=\"ROLE_USER\"/&gt;</p> </td> \n    </tr> \n   </tbody> \n  </table> \n  <p>投票器将会对用户是否能够访问指定的资源做出一个判断。Spring Security允许过滤器在三种决策结果中做出一种选择，它们的逻辑定义在o.s.s.access.AccessDecisionVoter接口中通过常量进行了定义。</p> \n  <table cellpadding=\"0\" border=\"1\" cellspacing=\"0\"> \n   <tbody> \n    <tr> \n     <td> <p>决策类型</p> </td> \n     <td> <p>描述</p> </td> \n    </tr> \n    <tr> \n     <td> <p>Grant (ACCESS_GRANTED)</p> </td> \n     <td> <p>投票器允许对资源的访问</p> </td> \n    </tr> \n    <tr> \n     <td> <p>Deny (ACCESS_DENIED)</p> </td> \n     <td> <p>投票器拒绝对资源的访问</p> </td> \n    </tr> \n    <tr> \n     <td> <p>Abstain (ACCESS_ABSTAIN)</p> </td> \n     <td> <p>投票器对是否能够访问做了弃权处理（即没有做出决定）。可能在多种原因下发生，如：</p> <p> &lt;!--[if !supportLists]--&gt; <span>l&nbsp;&nbsp;</span> &lt;!--[endif]--&gt;投票器没有确凿的判断信息； </p> <p> &lt;!--[if !supportLists]--&gt; <span>l&nbsp;&nbsp;</span> &lt;!--[endif]--&gt;投票器不能对这种类型的请求做出决策。 </p> </td> \n    </tr> \n   </tbody> \n  </table> \n  <p> 正如你从访问决策相关类和接口的设计中可以猜到的那样，Spring Security的这部分被精心设计，所以认证和访问控制的使用场景并不仅仅限于web领域。我们将会在 <span>：精确的访问控制</span> 中关于方法级别的安全时，再次讲解投票器和访问控制管理。 </p> \n  <p>当将他们组合在一起，“对web请求的默认认证检查”的整体流程将如下图所示：</p> \n  <div> \n   <p> <img alt=\"\" class=\"alignCenter\" data-original=\"\" title=\"点击查看原始大小图片\" src=\"http://www.fzqblog.top/upload/201608/1471958808035.png\"> </p> \n   <p>我们可以看到ConfigAttribute能够从配置声明（在DefaultFilterInvocationSecurityMetadataSource类中保存）中传递数据到投票器，投票器并不需要其他的类来理解ConfigAttribute的内容。这种分离能够为新类型的安全声明（例如我们将要看到的方法安全声明）使用相同的访问决策模式提供基础。</p> \n  </div> \n  <h4>配置access decision集合</h4> \n  <p>实际上Spring Security允许通过security命名空间来配置AccessDecisionManager。&lt;http&gt;元素的access-decision-manager-ref属性来指明一个实现了AccessDecisionManager的Spring Bean。Spring Security提供了这个接口的三个实现类，都在o.s.s.access.vote包中：</p> \n  <table cellpadding=\"0\" border=\"1\" cellspacing=\"0\"> \n   <tbody> \n    <tr> \n     <td> <p>类名</p> </td> \n     <td> <p>描述</p> </td> \n    </tr> \n    <tr> \n     <td> <p>AffirmativeBased</p> </td> \n     <td> <p>如果有任何一个投票器允许访问，请求将被立刻允许，而不管之前可能有的拒绝决定。</p> </td> \n    </tr> \n    <tr> \n     <td> <p>ConsensusBased</p> </td> \n     <td> <p>多数票（允许或拒绝）决定了AccessDecisionManager的结果。平局的投票和空票（全是弃权的）的结果是可配置的。</p> </td> \n    </tr> \n    <tr> \n     <td> <p>UnanimousBased</p> </td> \n     <td> <p>所有的投票器必须全是允许的，否则访问将被拒绝。</p> </td> \n    </tr> \n   </tbody> \n  </table> \n  <h4>配置使用UnanimousBased的访问决策管理器（access decision manager）</h4> \n  <p>如果你想修改我们的应用来使用UnanimousBased访问决策管理器，我们需要修改两个地方。首先让我们在&lt;http&gt;元素上添加access-decision-manager-ref属性：</p> \n  <table cellpadding=\"0\" border=\"1\" cellspacing=\"0\"> \n   <tbody> \n    <tr> \n     <td> <p>&lt;http auto-config=\"true\"</p> <p>access-decision-manager-ref=\"unanimousBased\" &gt;</p> </td> \n    </tr> \n   </tbody> \n  </table> \n  <p>这是一个标准的Spring Bean的引用，所以这需要对应一个bean的id属性。接下来，我们要定义这个bean（在dogstore-base.xml中），并与我们引用的有相同的id：</p> \n  <table cellpadding=\"0\" border=\"1\" cellspacing=\"0\"> \n   <tbody> \n    <tr> \n     <td> <p>&lt;bean class=\"org.springframework.security.access.vote.UnanimousBased\"</p> <p>id=\"unanimousBased\"&gt;</p> <p>&lt;property name=\"decisionVoters\"&gt;</p> <p>&lt;list&gt;</p> <p>&lt;ref bean=\"roleVoter\"/&gt;</p> <p>&lt;ref bean=\"authenticatedVoter\"/&gt;</p> <p>&lt;/list&gt;</p> <p>&lt;/property&gt;</p> <p>&lt;/bean&gt;</p> <p>&lt;bean class=\"org.springframework.security.access.vote.RoleVoter\"</p> <p>id=\"roleVoter\"/&gt;</p> <p>&lt;bean class=\"org.springframework.security.access.vote.</p> <p>AuthenticatedVoter\" id=\"authenticatedVoter\"/&gt;</p> </td> \n    </tr> \n   </tbody> \n  </table> \n  <p>你可能象知道decisionVoters属性是什么。这个属性在我们不声明AccessDecisionManager时，是自动配置的。默认的AccessDecisionManager要求我们配置投票器的一个列表，它们将会在认证决策时用到。这里列出的两个投票器是security命名空间配置默认提供的。</p> \n  <p>遗憾的是，Spring Security没有为我们提供太多的投票器，但是实现AccessDecisionVoter接口并在配置中添加我们的实现并不是一件困难的事情。我们将在第六章看一个例子。</p> \n  <p>我们引用的两个投票器介绍如下：</p> \n  <table cellpadding=\"0\" border=\"1\" cellspacing=\"0\"> \n   <tbody> \n    <tr> \n     <td> <p>类名</p> </td> \n     <td> <p>描述</p> </td> \n     <td> <p>例子</p> </td> \n    </tr> \n    <tr> \n     <td> <p>o.s.s.access.</p> <p>vote.RoleVoter</p> </td> \n     <td> <p>检查用户是否拥有声明角色的权限（GrantedAuthority）。access属性定义了GrantedAuthority的一个列表。预期会有ROLE_前缀，但这也是可配置的。</p> </td> \n     <td> <p>access=\"ROLE_USER,ROLE_ADMIN\"</p> </td> \n    </tr> \n    <tr> \n     <td> <p>o.s.s.access.</p> <p>vote.AuthenticatedVoter</p> </td> \n     <td> <p>支持特定类型的声明，允许使用通配符：</p> <p> &lt;!--[if !supportLists]--&gt; <span>l&nbsp;&nbsp;</span> &lt;!--[endif]--&gt;IS_AUTHENTICATED_FULLY——允许提供完整的用户名和密码的用户访问； </p> <p> &lt;!--[if !supportLists]--&gt; <span>l&nbsp;&nbsp;</span> &lt;!--[endif]--&gt;IS_AUTHENTICATED_REMEMBERED——如果用户是通过remember me功能认证的则允许访问； </p> <p> &lt;!--[if !supportLists]--&gt; <span>l&nbsp;&nbsp;</span> &lt;!--[endif]--&gt;IS_AUTHENTICATED_ANONYMOUSLY——允许匿名用户访问。 </p> </td> \n     <td> <p>access=\" IS_AUTHENTICATED_ANONYMOUSLY\"</p> </td> \n    </tr> \n   </tbody> \n  </table> \n </div> \n <div> \n  <h4>使用&nbsp;Spring&nbsp;表达式语言配置访问控制</h4> \n  <p>基于角色标准投票机制的标准实现是使用&nbsp;RoleVoter&nbsp;，还有一种替代方法可用来定义语法复杂的投票规则即使用Spring&nbsp;表达式语言（&nbsp;SpEL&nbsp;）。要实现这一功能的直接方式是在&nbsp;&lt;http&gt;&nbsp;配置元素上添加&nbsp;use-expressions&nbsp;属性：</p> \n  <table cellspacing=\"0\" border=\"1\" cellpadding=\"0\"> \n   <tbody> \n    <tr> \n     <td> <p>&lt;http auto-config=\"true\"</p> <p>use-expressions=\"true\"&gt;</p> </td> \n    </tr> \n   </tbody> \n  </table> \n  <p>添加后将要修改用来进行拦截器规则声明的&nbsp;access&nbsp;属性，改为&nbsp;SpEL&nbsp;表达式。&nbsp;SpEL&nbsp;允许使用特定的访问控制规则表达式语言。与简单的字符串如&nbsp;ROLE_USER&nbsp;不同，配置文件可以指明表达式语言触发方法调用、引用系统属性、计算机值等等。</p> \n  <p>SpEL&nbsp;的语法与其他的表达式语言很类似，如在&nbsp;Tapestry&nbsp;等框架中用到的&nbsp;Object Graph Notation Language (OGNL)&nbsp;，以及用于&nbsp;JSP&nbsp;和&nbsp;JSF&nbsp;的&nbsp;Unified Expression Language&nbsp;。它的语法面很广，已经超出了本书的覆盖范围，我们将会通过几个例子为你构建表达式提供一些确切的帮助。</p> \n  <p>需要注意的重要一点是，如果你通过使用&nbsp;use-expressions&nbsp;属性启用了&nbsp;SpEL&nbsp;表达式访问控制，将会使得自动配置的&nbsp;RoleVoter&nbsp;实效，后者能够使用角色的声明，正如在前面的例子所见到的那样：</p> \n  <table cellspacing=\"0\" border=\"1\" cellpadding=\"0\"> \n   <tbody> \n    <tr> \n     <td> <p>&lt;intercept-url pattern=\"/*\" access=\"ROLE_USER\"/&gt;</p> </td> \n    </tr> \n   </tbody> \n  </table> \n  <p>这意味着如果你仅仅想通过角色来过滤请求的话，访问控制声明必要要进行修改。幸运的的是，这已经被充分考虑过了，一个&nbsp;SpEL&nbsp;绑定的方法&nbsp;hasRole&nbsp;能够检查角色。如果我们要使用表达式来重写例子的配置，它可能看起来如下所示：</p> \n  <table cellspacing=\"0\" border=\"1\" cellpadding=\"0\"> \n   <tbody> \n    <tr> \n     <td> <p>&lt;http auto-config=\"true\" use-expressions=\"true\"&gt;</p> <p>&lt;intercept-url pattern=\"/*\" access=\"hasRole(\'ROLE_USER\')\"/&gt;</p> <p>&lt;/http&gt;</p> </td> \n    </tr> \n   </tbody> \n  </table> \n  <p>正如你可能预料的那样，&nbsp;SpEL&nbsp;使用了一个不同的&nbsp;Voter&nbsp;实现类，即o.s.s.web.access.expression.WebExpressionVoter&nbsp;，它能理解怎样解析&nbsp;SpEL&nbsp;表达式。&nbsp;WebExpressionVoter&nbsp;借助于&nbsp;o.s.s.web.access.expression.WebSecurityExpressionHandler&nbsp;接口的一个实现类来达到这个目的。WebSecurityExpressionHandler&nbsp;同时负责评估表达式的执行结果以及提供在表达式中应用的安全相关的方法。这个接口的默认实现对外暴露了&nbsp;o.s.s.web.access.expression.WebSecurityExpressionRoot&nbsp;类中定义的方法。</p> \n  <p>这些类的流程以及关系如下图所示：</p> \n  <div> \n   <p> <img alt=\"\" class=\"alignCenter\" data-original=\"\" title=\"点击查看原始大小图片\" src=\"http://www.fzqblog.top/upload/201608/1471958808912.png\"> </p> \n   <p>为实现&nbsp;SpEL&nbsp;访问控制表达式的方法和伪属性（&nbsp;pseudo-property&nbsp;）在类&nbsp;WebSecurityExpessionRoot&nbsp;及其父类的公共方法中进行了声明。</p> \n  </div> \n  <p>【伪属性（&nbsp;pseudo-property&nbsp;）是指没有传入参数并符合&nbsp;JavaBeans&nbsp;的&nbsp;getters&nbsp;命名格式的方法。这允许&nbsp;SpEL&nbsp;表达式能够省略方法的圆括号以及&nbsp;is&nbsp;或&nbsp;get&nbsp;的前缀。如&nbsp;isAnonymous()&nbsp;方法可以通过&nbsp;anonymous&nbsp;伪属性来访问。】</p> \n  <p>Spring Security 3&nbsp;提供的&nbsp;SpEL&nbsp;方法和伪属性在以下的表格中进行了描述。要注意的是没有被标明“&nbsp;web only&nbsp;”的方法和属性可以在保护其他类型的资源中使用，如在保护方法调用时。示例表示的方法和属性是使用在&nbsp;&lt;intercept-url&gt;&nbsp;的&nbsp;access&nbsp;声明中。</p> \n  <table cellspacing=\"0\" border=\"1\" cellpadding=\"0\"> \n   <tbody> \n    <tr> \n     <td> <p>方法</p> </td> \n     <td> <p>Web only?</p> </td> \n     <td> <p>描述</p> </td> \n     <td> <p>示例</p> </td> \n    </tr> \n    <tr> \n     <td> <p>hasIpAddress</p> <p>(ipAddress)</p> </td> \n     <td> <p>Yes</p> </td> \n     <td> <p>用于匹配一个请求的&nbsp;IP&nbsp;地址或一个地址的网络掩码</p> </td> \n     <td> <p>access=\"hasIpAddress(\'</p> <p>162.79.8.30\')\"</p> <p>access=\"hasIpAddress(\'</p> <p>162.0.0.0/224\')\"</p> </td> \n    </tr> \n    <tr> \n     <td> <p>hasRole(role)</p> </td> \n     <td> <p>No</p> </td> \n     <td> <p>用于匹配一个使用GrantedAuthority&nbsp;的角色（类似于RoleVoter&nbsp;）</p> </td> \n     <td> <p>access=\"hasRole(\'ROLE</p> <p>USER\')\"</p> </td> \n    </tr> \n    <tr> \n     <td> <p>hasAnyRole(role)</p> </td> \n     <td> <p>No</p> </td> \n     <td> <p>用于匹配一个使用GrantedAuthority&nbsp;的角色列表。用户匹配其中的任何一个均可放行。</p> </td> \n     <td> <p>access=\"hasRole(\'ROLE_</p> <p>USER\',\'ROLE_ADMIN\')\"</p> </td> \n    </tr> \n   </tbody> \n  </table> \n  <p>除了以上表格中的方法，在&nbsp;SpEL&nbsp;表达式中还有一系列的方法可以作为属性。它们不需要圆括号或方法参数。</p> \n  <table cellspacing=\"0\" border=\"1\" cellpadding=\"0\"> \n   <tbody> \n    <tr> \n     <td> <p>属性</p> </td> \n     <td> <p>Web only?</p> </td> \n     <td> <p>描述</p> </td> \n     <td> <p>例子</p> </td> \n    </tr> \n    <tr> \n     <td> <p>permitAll</p> </td> \n     <td> <p>No</p> </td> \n     <td> <p>任何用户均可访问</p> </td> \n     <td> <p>access=\"permitAll\"</p> </td> \n    </tr> \n    <tr> \n     <td> <p>denyAll</p> </td> \n     <td> <p>NO</p> </td> \n     <td> <p>任何用户均不可访问</p> </td> \n     <td> <p>access=\"denyAll\"</p> </td> \n    </tr> \n    <tr> \n     <td> <p>anonymous</p> </td> \n     <td> <p>NO</p> </td> \n     <td> <p>匿名用户可访问</p> </td> \n     <td> <p>access=\"anonymous\"</p> </td> \n    </tr> \n    <tr> \n     <td> <p>authenticated</p> </td> \n     <td> <p>NO</p> </td> \n     <td> <p>检查用户是否认证过</p> </td> \n     <td> <p>access=\"authenticated\"</p> </td> \n    </tr> \n    <tr> \n     <td> <p>rememberMe</p> </td> \n     <td> <p>No</p> </td> \n     <td> <p>检查用户是否通过remember me&nbsp;功能认证的</p> </td> \n     <td> <p>access=\"rememberMe\"</p> </td> \n    </tr> \n    <tr> \n     <td> <p>fullyAuthenticated</p> </td> \n     <td> <p>No</p> </td> \n     <td> <p>检查用户是否通过提供完整的凭证信息来认证的</p> </td> \n     <td> <p>access=\"fullyAuthenticated\"</p> </td> \n    </tr> \n   </tbody> \n  </table> \n  <p>需要记住的是，&nbsp;voter&nbsp;的实现类必须基于请求的上下文返回一个投票的结果（允许、拒绝或者弃权）。你可能会认为hasRole&nbsp;会返回一个&nbsp;Boolean&nbsp;值，实际上正是如此。基于&nbsp;SpEL&nbsp;的访问控制声明必须是返回&nbsp;Boolean&nbsp;类型的表达式。返回值为&nbsp;true&nbsp;意味着投票器的结果是允许访问，&nbsp;false&nbsp;的结果意味着投票器拒绝访问。</p> \n  <p>【如果一个表达式的值不是&nbsp;Boolean&nbsp;类型的，你将会得到如下的一个异常信息：org.springframework.expression.spel.SpelException:</p> \n  <p>EL1001E:Type conversion problem, cannot convert from</p> \n  <p>class java.lang.Integer to java.lang.Boolean&nbsp;】</p> \n  <p>另外，表达式不能返回一个弃权类型的结果，除非访问控制声明不是一个合法&nbsp;SpEL&nbsp;表达式，在这种情况下投票器将会放弃投票。</p> \n  <p>如果你不在乎这些细小的约束，&nbsp;SpEL&nbsp;访问控制声明能够提供一种灵活的配置访问控制决策的方式。</p> \n  <p>在本章中，我们提供了安全领域两个重要概念即认证和授权的介绍。</p> \n  <p> <span>l&nbsp;</span> 在总体上了解我们要进行安全保护的系统； </p> \n  <p> <span>l&nbsp;</span> 使用&nbsp;Spring Security&nbsp;的自动配置在三步之内实现了我们应用的安全配置； </p> \n  <p> <span>l&nbsp;</span> 了解了在&nbsp;Spring Security&nbsp;中&nbsp;servlet&nbsp;过滤器的使用及重要性； </p> \n  <p> <span>l&nbsp;</span> 了解了认证和授权过程中重要的角色，包括一些重要类实现的详细介绍如&nbsp;Authentication&nbsp;和&nbsp;UserDetails </p> \n  <p> <span>l&nbsp;</span> 体验了与访问控制规则有关的&nbsp;SpEL&nbsp;表达式的配置。 </p> \n  <p>在接下来的一章中，我们将通过添加一些增强用户体验的功能，把基于用户名和密码的认证提高一个新的水平。</p> \n </div> \n</div>\n<p>转自：http://blog.csdn.net/u014723529/article/details/41747313</p>','   借助于Spring Security的强大基础配置功能以及内置的认证功能，我们在前面讲述的三步配置是很快就能完成的；它们的使用是通过添加 auto-config 属性和 http 元素实现的。   但不幸的是，应用实现的考量、架构的限制以及基础设施集成的要求可能使你的Spring Security实现远较这个简单的配置所提供的复杂。很多用户一使用比基本配置复杂的功能就会遇到麻烦，那是因为他们......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:26:49',0,0,0,0,'http://www.fzqblog.top/upload/201608/1471958798455.png|http://www.fzqblog.top/upload/201608/1471958800303.png|http://www.fzqblog.top/upload/201608/1471958801680.png|http://www.fzqblog.top/upload/201608/1471958803001.png|http://www.fzqblog.top/upload/201608/1471958805254.png|http://www.fzqblog.top/upload/201608/1471958806270.png|http://www.fzqblog.top/upload/201608/1471958806803.png|http://www.fzqblog.top/upload/201608/1471958808035.png|http://www.fzqblog.top/upload/201608/1471958808912.png|',NULL,1),(346,1,6,'Apache Buildr 1.4.21 发布，项目构建系统','<div> \n <p> <a href=\"http://www.oschina.net/news/57249/git-osc-android-and-iphone-app-opensource\" target=\"_blank\" rel=\"nofollow,noindex\">Git@OSC 的 Android 和 iOS 客户端全面开源</a> </p> \n <p>Apache Buildr 1.4.21 发布，此版本更新内容如下： </p> \n <pre class=\"brush:java;toolbar:false\">  * Change: Upgrade atoulme-Antwrap to 0.7.5 to remove deprecation warnings\n   in modern JRuby. Suggested by Pepijn Van Eeckhoudt.\n  * Change: Update the gwt addon to add the validation dependencies\n   required for GWT compiles without requiring that the user specify the dependency.\n  * Change: Update ipr.add_gwt_configuration method to support GWT 2.7\n   configuration parameters and IDEA 14 parameters.\n  * Change: Upgrade jacoco to 0.7.2. Submitted by neher.\n  * Change: Update checkstyle addon to use Checkstyle 6.0.\n  * Added:  Updated the gwt addon to support the upcoming GWT 2.7.x release.\n  * Change: Enhance ipr.add_glassfish_configuration to support the ability\n   to define the version of GlassFish in uses. Change the default to 4.1.0\n   as that is the latest supported variant.\n  * Fixed:  Change the name of the GlassFish install in\n   ipr.add_glassfish_configuration to use the same convention that IDEA uses by default. i.e. Name\n   the installation \"GlassFish 4.1.0\" rather than \"Glassfish 4.1.0\".\n  * Change: Change the default version of the jdk in IDEA project files to 1.7.\n  * Change: Change the default version of the IDEA project files created to\n   the current release version 13. To revert to the older versions\n   specify ipr.version = \'12\' in your buildfile.\n  * Added:  Enhance the IdeaFile class to easily support mixing in of custom\n   components from either the filesystem or from an artifact.\n  * Change: Update rjb to version 1.5.1.\n  * Added:  Update checkstyle addon to support downloading checkstyle checks\n   as an artifact.\n  * Added:  Update checkstyle addon to supply checkstyle.config.dir\n   property.\n  * Added:  Update pmd addon to support downloading rule files as an\n   artifact.\n  * Change: Update pmd addon to use pmd version 5.1.3.\n  * Fixed:  BUILDR-702 - Retain Unix permission flags when merging\n   zip files into another zip or tar archive. Submitted by Pepijn\n   Van Eeckhoudt.</pre> \n <div> \n  <p> 更多内容请看： <a target=\"_blank\" href=\"http://buildr.apache.org/\" rel=\"nofollow,noindex\">http://buildr.apache.org/</a> </p> \n  <p>Thanks!</p> \n  <p>The Apache Buildr Team</p> \n </div> \n <p> <img class=\"alignCenter\" data-original=\"\" alt=\"\" height=\"150\" width=\"278\" src=\"http://www.fzqblog.top/upload/201608/1471958843515.png\"> </p> \n <p>Buildr是一个简单直观的Java项目构建系统，在进行了10个月的开发并获得许多正面反馈之后，Apache基金会将会向Buildr敞开大门并最终接手这个项目，这将是Apache基金会的第一个Ruby项目。</p> \n</div>\n<p>转自：http://www.oschina.net/news/57686/apache-buildr-1-4-21-released</p>','   Git@OSC 的 Android 和 iOS 客户端全面开源   Apache Buildr 1.4.21 发布，此版本更新内容如下：     * Change: Upgrade atoulme-Antwrap to 0.7.5 to remove deprecation warnings   in modern JRuby. Suggested by Pepijn Van Eeckhou......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:27:24',0,0,0,0,'http://www.fzqblog.top/upload/201608/1471958843515.png|',NULL,1),(347,1,6,'Servlet的生命周期和MVC设计模式','<div> \n <p>昨天上课的时候龙哥主要讲了使用MVC模式和oracle的数据分页,昨天上课被oracle的数据分页搞得稀里糊涂的,所以今天重新自己再重新的过一遍,本来是准备今天搞ajax的,没办法咯</p> \n <p>MVC设计模式,m模型 &nbsp; v 数据显示 &nbsp;c 数据的逻辑处理 &nbsp;,所有的设计模式都只是一个固定的写法</p> \n <p> <img alt=\"\" class=\"alignCenter\" data-original=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958844677.png\"> <strong>1,Servlet的生命周期和工作原理 &nbsp; (来自网络资源):</strong> </p> \n <p>Servlet生命周期分为三个阶段：</p> \n <p>1，初始化阶段&nbsp; 调用init()方法</p> \n <p>2，响应客户请求阶段 调用service()方法</p> \n <p>3，终止阶段 调用destroy()方法</p> \n <p>Servlet初始化阶段：</p> \n <p>在下列时刻Servlet容器装载Servlet：</p> \n <p>1，Servlet容器启动时自动装载某些Servlet，实现它只需要在web.XML文件中的&lt;Servlet&gt;&lt;/Servlet&gt;之间添加如下代码：</p> \n <table cellpadding=\"0\" border=\"0\" cellspacing=\"0\"> \n  <tbody>\n   <tr> \n    <td> <p> <code class=\"prettyprint\">&lt;loadon-startup&gt; <code class=\"prettyprint\">&lt;/loadon-startup&gt; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> </code></code></td> \n   </tr> \n  </tbody>\n </table> \n <p>2，在Servlet容器启动后，客户首次向Servlet发送请求</p> \n <p>3，Servlet类文件被更新后，重新装载Servlet</p> \n <p>Servlet被装载后，Servlet容器创建一个Servlet实例并且调用Servlet的init()方法进行初始化。在Servlet的整个生命周期内，init()方法只被调用一次。</p> \n <p>Servlet工作原理：</p> \n <p>首先简单解释一下Servlet接收和响应客户请求的过程，首先客户发送一个请求，Servlet是调用service()方法对请求进行响应的，通过源代码可见，service()方法中对请求的方式进行了匹配，选择调用doGet,doPost等这些方法，然后再进入对应的方法中调用逻辑层的方法，实现对客户的响应。在Servlet接口和GenericServlet中是没有doGet,doPost等等这些方法的，HttpServlet中定义了这些方法，但是都是返回error信息，所以，我们每次定义一个Servlet的时候，都必须实现doGet或doPost等这些方法。</p> \n <p>每一个自定义的Servlet都必须实现Servlet的接口，Servlet接口中定义了五个方法，其中比较重要的三个方法涉及到Servlet的生命周期，分别是上文提到的init(),service(),destroy()方法。GenericServlet是一个通用的，不特定于任何协议的Servlet,它实现了Servlet接口。而HttpServlet继承于GenericServlet，因此HttpServlet也实现了Servlet接口。所以我们定义Servlet的时候只需要继承HttpServlet即可。</p> \n <p> 2,MVC模式的实现; <strong>实现数据显示,数据处理,模型三大模块的分离</strong> </p> \n <p>步骤:</p> \n <pre class=\"brush:java;toolbar:false\">1.定义一个主控Servlet---&gt;[ControlServlet]\n\n2.定义一个处理类的接口---&gt;[ActionInterface]\n\n3 数据库的处理来的javabean保存数据的定义 \n\n4.定义一个登录处理类  ---&gt;[LoginAction]\n\n5.在web.xml中配置Servlet,将处理类作为Servlet的初始化参数进行配置</pre> \n <p>代码如下;</p> \n <p> 1, <strong>定义一个主控Servlet---&gt;[</strong> controlServlet <strong>]</strong> </p> \n <pre class=\"brush:java;toolbar:false\">package servletMvc;\n\nimport java.io.IOException;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport configControlServlet.ActionInterface;\n\n/**\n * \n * @author Administrator 主控制器的Servlet 1.接受请求 2,将数据转发到对应的Servlet中处理 3.转发到试图层\n */\npublic class controlServlet extends HttpServlet {\n @Override\n protected void service(HttpServletRequest request,\n   HttpServletResponse response) throws ServletException, IOException {\n  // 获得请求的路径\n  String uri = request.getRequestURI();\n  uri = uri.substring(uri.lastIndexOf(\"/\") + 1, uri.lastIndexOf(\".\"));\n  System.out.println(\"请求的路径\" + uri);\n\n  // 将登陆请求转交给登陆的Servlet处理\n  String className = this.getInitParameter(uri);\n  System.out.println(className);\n    \n  //根据反射得到该类的Class对象\n  try {\n   //根据获得的包,进行反射得到class对象\n        Class c =  Class.forName(className);\n        //根据class对象创建对象,返回的是LoginAction类实现的接口\n        ActionInterface ac= (ActionInterface)c.newInstance();\n        //通过对象调用ac的方法\n         String str= ac.exectu(request, response);\n        \n         //判断LoginAction类中返回的结果是否null,不为null就会返回一个地址\n        if(str!=null){\n         //跳转\n         request.getRequestDispatcher(str).forward(request, response);\n        }\n        \n  } catch (Exception e) {\n   e.printStackTrace();\n   \n   request.getRequestDispatcher(\"Error.jsp\").forward(request, response);\n  }\n }\n}</pre> \n <p>2.定义一个处理类的接口---&gt;[ActionInterface]</p> \n <pre class=\"brush:java;toolbar:false\">package configControlServlet;\n\nimport java.io.IOException;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n/*\n *每个类都必须要实现这个接口 \n */\npublic interface ActionInterface {\n \n public String exectu(HttpServletRequest request,\n HttpServletResponse response) throws IOException, ServletException;\n}</pre> \n <p>3 数据库的处理来的javabean保存数据的定义</p> \n <p>3,1 &nbsp;数据库的连接单例模式</p> \n <pre class=\"brush:java;toolbar:false\">package Servlet.db;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\n\n/**\n * \n * \n * @author Administrator\n *数据库的连接类\n */\npublic class DBUtil {\n   \n   public static Connection conn =null ;\n   \n private  DBUtil(){\n  \n }\n \n   public static Connection getConn(){  \n    if(conn!=null){\n     return conn;\n }\n    try{\n     Class.forName(\"oracle.jdbc.driver.OracleDriver\");\n     String url = \"jdbc:oracle:thin:@127.0.0.1:1521:orcl\";\n    conn= DriverManager.getConnection(url,\"SCOTT\", \"tiger\");\n     return conn;\n    }catch(Exception  e){\n     e.printStackTrace();\n     return null;\n    }\n    \n   }\n\n}</pre> \n <p>3,2 处理数据查询的类</p> \n <pre class=\"brush:java;toolbar:false\">package Servlet.db;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\n\nimport Servlet.bean.User;\n//处理数据查询的类\npublic class UserDao {\n\n public User getCheck(String userName,String userPwd){\n  //获得连接对象\n  Connection conn=DBUtil.getConn();\n  //定义sql语句\n  String sql=\"select usermailandphone,userpwd from bookeuser where usermailandphone=? and userPwd=?\";\n  //预编译\n  try{\n  PreparedStatement pstm=conn.prepareStatement(sql);\n  pstm.setString(1, userName);\n  pstm.setString(2, userPwd);\n  ResultSet rs=pstm.executeQuery();\n  System.out.println(sql);\n  if(rs.next()){\n   //创建对象,使用javaBean来处理数据\n   User user= new User();\n   user.setUserName(rs.getString(1));\n   user.setUserPwd(rs.getString(2));\n   return user;\n  }\n  }catch(Exception e){\n   e.printStackTrace();\n  } \n  return null;\n }\n}</pre> \n <p>3,3保存账号和密码的类javaBean</p> \n <pre class=\"brush:java;toolbar:false\">package Servlet.bean;\n/**\n * \n * @author Administrator\n *保存账号和密码的类  javaBean\n */\npublic class User {\n\n private String userName;\n private String userPwd;\n\n public String getUserName() {\n  return userName;\n }\n\n public void setUserName(String userName) {\n  this.userName = userName;\n }\n\n public String getUserPwd() {\n  return userPwd;\n }\n\n public void setUserPwd(String userPwd) {\n  this.userPwd = userPwd;\n }\n\n}</pre> \n <p>4.定义一个登录处理类 &nbsp;---&gt;[LoginAction]</p> \n <pre class=\"brush:java;toolbar:false\">package configControlServlet;\n\nimport java.io.IOException;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport Servlet.bean.User;\nimport Servlet.db.UserDao;\n\n/**\n * \n * @author Administrator\n *\n */\npublic class LoginAction implements ActionInterface{\n UserDao dao = new UserDao();\n @Override\n public String exectu(HttpServletRequest request,\n   HttpServletResponse response) throws IOException, ServletException {\n  System.out.println(\"达到了登陆的Servlet\");\n   //获取登陆的用户和密码\n  String userName = request.getParameter(\"usernames\");\n  String userPwd=request.getParameter(\"userpwd\");\n  //连接数据库查询\n  User user =dao.getCheck(userName, userPwd);\n  if(user!=null){\n   //保存绘画中\n   HttpSession session=request.getSession();\n   session.setAttribute(\"user\", user);\n   //返回登陆成功的页面\n   return \"LoginSuss.jsp\"; \n  }\n  //返回到登陆失败的页面\n  return \"Error.jsp\"; \n }\n}</pre> \n <p>5.在web.xml中配置Servlet,将处理类作为Servlet的初始化参数进行配置</p> \n <pre class=\"brush:java;toolbar:false\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://java.sun.com/xml/ns/javaee\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\" id=\"WebApp_ID\" version=\"2.5\"&gt;\n  &lt;display-name&gt;MVC&lt;/display-name&gt;\n  &lt;welcome-file-list&gt;\n    &lt;welcome-file&gt;index.html&lt;/welcome-file&gt;\n    &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt;\n    &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;\n    &lt;welcome-file&gt;default.html&lt;/welcome-file&gt;\n    &lt;welcome-file&gt;default.htm&lt;/welcome-file&gt;\n    &lt;welcome-file&gt;default.jsp&lt;/welcome-file&gt;\n  &lt;/welcome-file-list&gt;\n  \n  <strong>&lt;servlet&gt;\n  &lt;description&gt;主控制的Servlet&lt;/description&gt;\n  &lt;servlet-name&gt;controlServlet&lt;/servlet-name&gt;\n  &lt;servlet-class&gt;servletMvc.controlServlet&lt;/servlet-class&gt;\n  \n    &lt;init-param&gt;\n       &lt;description&gt;处理登陆的登陆的servlet&lt;/description&gt;\n        &lt;param-name&gt;login&lt;/param-name&gt;\n       &lt;param-value&gt;configControlServlet.LoginAction&lt;/param-value&gt;\n    &lt;/init-param&gt;\n\n  &lt;/servlet&gt;</strong>\n  \n  &lt;servlet-mapping&gt;\n  &lt;servlet-name&gt;controlServlet&lt;/servlet-name&gt;\n  &lt;url-pattern&gt;*.ser&lt;/url-pattern&gt;\n &lt;/servlet-mapping&gt; \n&lt;/web-app&gt;</pre> \n <p>6,jsp代码;简单的显示页面这里就不写了</p> \n <h4>上面MVC全部的代码分析</h4> \n <p> <img alt=\"\" class=\"alignCenter\" data-original=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958844997.png\"> </p> \n</div>\n<p>转自：http://baihe747.iteye.com/blog/2163976</p>','  昨天上课的时候龙哥主要讲了使用MVC模式和oracle的数据分页,昨天上课被oracle的数据分页搞得稀里糊涂的,所以今天重新自己再重新的过一遍,本来是准备今天搞ajax的,没办法咯  MVC设计模式,m模型   v 数据显示  c 数据的逻辑处理  ,所有的设计模式都只是一个固定的写法    1,Servlet的生命周期和工作原理   (来自网络资源):   Servlet生命周期分为三个阶......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:27:25',0,0,0,0,'http://www.fzqblog.top/upload/201608/1471958844677.png|http://www.fzqblog.top/upload/201608/1471958844997.png|',NULL,1),(348,1,6,'使用JMeter对Tomcat进行压力测试与Tomcat性能调优','<div> \n <p>一、准备工作。</p> \n <p>1、安装JDK1.6或1.6版本以后的，并配置环境变量。</p> \n <p> 2、在Apache的官网下载最新的Jmeter， <a href=\"http://jmeter.apache.org/download_jmeter.cgi\" rel=\"nofollow,noindex\">http://jmeter.apache.org/download_jmeter.cgi</a> ，截止目前为止，最新的Jmeter是2.12版本，需要注意的是下载使用的时候不能下载source版本的，必须下载内容更加完整的binaray版本的，比如如果下载 <a href=\"http://mirror.symnds.com/software/Apache//jmeter/source/apache-jmeter-2.12_class=\" lazy-load\" data-original.zip\" rel=\"nofollow,noindex\">apache-jmeter-2.12_class=\"lazy-load\" data-original.zip</a> ，运行jmeter.bat时，会出现下面的exception： </p> \n <p>unable to access jarfile apachejmeter.jar error value=1</p> \n <p> 这个exception的原因是 <a href=\"http://mirror.symnds.com/software/Apache//jmeter/source/apache-jmeter-2.12_class=\" lazy-load\" data-original.zip\" rel=\"nofollow,noindex\">apache-jmeter-2.12_class=\"lazy-load\" data-original.zip</a> 中的bin目录中，缺少了ApacheJemeter.jar.所以要下载binary版本的。 </p> \n <p>3、在Apache的官网上下载Tomcat，本文中以Tomcat7.0.42为例。</p> \n <p> 二、开发一个简单的J2EE工程，可以是基于Servlet的，可以是基于Spring等MVC框架的，而且不需要实现什么样的功能，只需要满足用户访问http://localhost: <strong>9999</strong> 时，浏览器中能够输出（index.html）Hello World或者其它任何内容。 </p> \n <p>三、开始在Jmeter中配置模拟对Tomcat的index.html(localhost:9999)进行并发访问。</p> \n <h4>首先是使用Tomcat 7.0.42的默认配置</h4> \n <p>1、选中Test Plan，点击Edit菜单按钮，选择Add操作，选择Thread(Users)，然后选择Thread Group创建一个线程组。</p> \n <p>2、选中Thread Group，点击Edit菜单按钮，选择Add操作，选择Sampler，并选择Http Request。</p> \n <p>3、选中Test Group，点击Edit菜单安丘，选择Add操作，选择Listener，然后分别添加Aggregate Graph（聚集图形），View Results Tree（查看结果树）。</p> \n <p> <img alt=\"\" class=\"alignCenter\" data-original=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958845592.png\"> </p> \n <p>3、不修改Tomcat的默认配置，启动Tomcat，由于默认的Tomcat运行在8080端口，将上面的9999端口先改回8080或者遵照后面点的步骤将Tomcat默认的8080端口改为9999。</p> \n <p>4、启动Tomcat。</p> \n <p>5、点击上面的绿色执行按钮执行该测试计划。</p> \n <p> <img alt=\"\" class=\"alignCenter\" data-original=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958846225.png\"> </p> \n <p>由测试线程组可知，Jemeter将模拟150000个线程请求不断的访问localhost:8080。执行10分钟后，运行结果截图可得：</p> \n <p> <img alt=\"\" class=\"alignCenter\" data-original=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958846891.png\"> 下面将详解这个聚合报告中的每个参数： </p> \n <p> <span> 1）Label <span>：每个&nbsp;</span> <span>JMeter&nbsp;</span> <span>的&nbsp;</span> <span>element</span> <span>（例如&nbsp;</span> <span>HTTP&nbsp;Request</span> <span>）都有一个&nbsp;</span> <span>Name&nbsp;</span> <span>属性，label显示的就是&nbsp;</span> <span>Name&nbsp;</span> <span>属性的值&nbsp;</span> </span> <span> <br> </span> <span> <br> </span> <span> 2）#Samples <span>：表示你这次测试中一共发出了多少个请求，如果模拟</span> <span>10</span> <span>个用户，每个用户迭代</span> <span>10</span> <span>次，那么这里显示</span> <span>100，这里显示的应该是150000而不是172649，之所以是172649，是因为我中间点击停止，然后又再原来的基础上重新开始执行。</span> </span> <span> <br> </span> <span> <br> </span> <span> 3）Average <span>：平均响应时间——默认情况下是单个&nbsp;</span> <span>Request&nbsp;</span> <span>的平均响应时间，当使用了&nbsp;</span> <span>Transaction&nbsp;Controller&nbsp;</span> <span>时，也可以以</span> <span>Transaction&nbsp;</span> <span>为单位显示平均响应时间&nbsp;</span> </span> <span> <br> </span> <span> <br> </span> <span> 4）Median <span>：中位数，也就是&nbsp;</span> <span>50</span> <span>％&nbsp;用户的响应时间&nbsp;</span> </span> <span> <br> </span> <span> <br> </span> <span> 5）90%&nbsp;Line <span>：</span> <span>90</span> <span>％&nbsp;用户的响应时间&nbsp;</span> </span> </p> \n <div> \n  <p> 6）Min <span>：最小响应时间&nbsp;</span> </p> \n  <p> 7）Max <span>：最大响应时间&nbsp;</span> </p> \n  <p> 8）Error% <span>：本次测试中出现错误的请求的数量</span> <span>/</span> <span>请求的总数&nbsp;</span> </p> \n  <p> 9）Throughput <span>：吞吐量——默认情况下表示每秒完成的请求数（</span> <span>Request&nbsp;per&nbsp;Second</span> <span>），当使用了&nbsp;</span> <span>Transaction&nbsp;Controller&nbsp;</span> <span>时，也可以表示类似&nbsp;</span> <span>LoadRunner&nbsp;</span> <span>的&nbsp;</span> <span>Transaction&nbsp;per&nbsp;Second&nbsp;</span> <span>数&nbsp;</span> </p> \n  <p> 10）KB/Sec <span>：每秒从服务器端接收到的数据量，相当于</span> <span>LoadRunner</span> <span>中的</span> <span>Throughput/Sec&nbsp;</span> </p> 这里我们可以看到，在这172649 \n  <span>多次的访问之中，</span> \n  <span>tomcat</span> \n  <span>的访问出错率是</span> \n  <span>0.15%,</span> \n  <span>即大概有</span> \n  <span>100</span> \n  <p>多次的请求是由于忙碌而失败了的。当然，这只是一个参考，具体还要根据软硬件的条件才能最终确定下来。</p> \n </div> \n <h4>对Tomcat进行调优后再用Jmeter进行测试</h4> \n <p> 1、增加Tomcat对JVM内存的分配：即 <strong>调整虚拟内存</strong> </p> \n <div> \n  <p> Linux: <span>&nbsp;</span> </p> \n  <p>在/usr/local/tomcat_home/bin目录下的catalina.sh&nbsp;</p> \n  <p>添加：JAVA_OPTS=\'-Xms1024m -Xmx2048m\'&nbsp;</p> \n  <p>要加“m”说明是MB，否则就是KB了，在启动tomcat时会报内存不足。&nbsp;</p> \n  <p>-Xms：初始值&nbsp;</p> \n  <p>-Xmx：最大值&nbsp;</p> \n  <p>-Xmn：最小值&nbsp;</p> \n  <p> Windows: <span>&nbsp;</span> </p> \n  <p>在catalina.bat最前面加入&nbsp;</p> \n  <p>set JAVA_OPTS=-Xms1024m -Xmx2048m&nbsp;</p> \n  <p>如果用startup.bat启动tomcat,OK设置生效。够成功的分配2048M内存.&nbsp;</p> \n  <p>但是如果不是执行startup.bat启动tomcat而是利用windows的系统服务启动tomcat服务,上面的设置就不生效了，就是说set JAVA_OPTS=-Xms1024m -Xmx2048m没起作用。</p> \n  <p>windows服务执行的是bin\\tomcat.exe.他读取注册表中的值,而不是catalina.bat的设置.。</p> \n  <p>解决办法:&nbsp;</p> \n  <p>修改注册表HKEY_LOCAL_MACHINE\\SOFTWARE\\Apache Software Foundation\\Tomcat Service Manager\\Tomcat7\\Parameters\\JavaOptions&nbsp;</p> \n  <p>原值为&nbsp;</p> \n  <p>-Dcatalina.home=\"C:\\ApacheGroup\\Tomcat 7.0.42\"&nbsp;</p> \n  <p>-Djava.endorsed.dirs=\"C:\\ApacheGroup\\Tomcat 7.0.42\\common\\endorsed\"&nbsp;</p> \n  <p>-Xrs&nbsp;</p> \n  <p>加入 -Xms1024m -Xmx2048m&nbsp;</p> \n  <p>重起tomcat服务,设置生效&nbsp;</p> \n </div> \n <p>2、修改线程池并将默认的8080端口修改为9999端口。</p> \n <p>即将默认的</p> \n <pre class=\"brush:java;toolbar:false\">&lt;Connector port=\"8080\" protocol=\"HTTP/1.1\"\n               connectionTimeout=\"20000\"\n               redirectPort=\"8443\" /&gt;</pre> \n <p>修改为：</p> \n <pre class=\"brush:java;toolbar:false\">&lt;Connector port=\"9999\" redirectPort=\"8443\"  \n maxHttpHeaderSize=\"8192\" useBodyEncodingForURI=\"true\"  \n minProcessors=\"100\" maxProcessors=\"5000\"  \n maxThreads=\"5000\" minSpareThreads=\"1000\" maxSpareThreads=\"4000\"  \n enableLookups=\"false\" acceptCount=\"3500\"  \n compression=\"on\" compressionMinSize=\"2048\"  \n compressableMimeType=\"text/html,text/xml,text/javascript,text/css,text/plain\"  \n connectionTimeout=\"60000\" disableUploadTimeout=\"true\" debug=\"0\" URIEncoding=\"UTF-8\"/&gt;</pre> \n <p>3. 禁用DNS查询&nbsp;</p> \n <p>当web应用程序向要记录客户端的信息时，它也会记录客户端的IP地址或者通过域名服务器查找机器名转换为IP地址。DNS查询需要占用网络，并且包括可能从很多很远的服务器或者不起作用的服务器上去获取对应的IP的过程，这样会消耗一定的时间。为了消除DNS查询对性能的影响我们可以关闭 DNS查询，方式是修改server.xml文件中的enableLookups参数值： 将其设置为false。</p> \n <p>4、修改完后，重启tomcat。</p> \n <p>5、在Jmeter的Thread Group中将上面的8080改成9999.</p> \n <p>6、重新执行Jmeter，执行10分钟后，保存执行结果，得到如下的执行结果：</p> \n <p> <span> <img alt=\"\" class=\"alignCenter\" data-original=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958847150.png\"> </span> </p> \n <p>对比调优后的执行结果，发现Tomcat的吞吐率得到了相当的提升，平均执行时间大大减少了。</p> \n</div>\n<p>转自：http://josh-persistence.iteye.com/blog/2164035</p>','  一、准备工作。  1、安装JDK1.6或1.6版本以后的，并配置环境变量。   2、在Apache的官网下载最新的Jmeter， http://jmeter.apache.org/download_jmeter.cgi ，截止目前为止，最新的Jmeter是2.12版本，需要注意的是下载使用的时候不能下载source版本的，必须下载内容更加完整的binaray版本的，比如如果下载 apache-......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:27:27',0,0,0,0,'http://www.fzqblog.top/upload/201608/1471958845592.png|http://www.fzqblog.top/upload/201608/1471958846225.png|http://www.fzqblog.top/upload/201608/1471958846891.png|http://www.fzqblog.top/upload/201608/1471958847150.png|',NULL,1),(349,1,6,'JavaBeans vs Spring beans vs POJOs','<div> \n <p> <b> 本文由ImportNew-Jeffery翻译自 <a target=\"_blank\" href=\"http://www.shaunabram.com/beans-vs-pojos/\" rel=\"nofollow,noindex\">Shaunabram</a> 。欢迎加入 <a href=\"http://www.jobbole.com/groups/6/\" rel=\"nofollow,noindex\" target=\"_blank\">翻译小组</a> 。转载请参见文章末尾的要求。 </b> </p> \n <p>JavaBean, Spring bean 和 POJO 是三个被广泛使用的术语，本文分别讨论了它们的含义，以及分析三者的区别。</p> \n <h4>JavaBeans</h4> \n <p>根本而言，JavaBean只是遵循了特定编码规范的Java类而已。例如：</p> \n <ol> \n  <li>包含默认（无参数）的构造函数</li> \n  <li>允许通过访问器(getter和setter方法)来访问类的成员属性</li> \n  <li>实现java.io.Serializable接口</li> \n </ol> \n <p> 准确来说，JavaBean是遵循了Sun制定的 <a href=\"http://java.sun.com/javase/technologies/desktop/javabeans/docs/spec.html\" rel=\"nofollow,noindex\" target=\"_blank\">JavaBean 标准</a> 的类，该标准最早于1996年发布。JavaBean被定义为Java的“软件组件模型”。最初的想法是将JavaBean打造成能够被构建工具可视化地操作的可重用的组件，由此，软件供应商可以创建和出售能够让用户灵活地组合进应用程序的JavaBean。JavaBean的三个最重要的特性是： </p> \n <ol> \n  <li>它暴露的一系列属性（称之为“特征“attribute）</li> \n  <li>它允许其他组件调用的一系列方法</li> \n  <li>它触发的一系列事件（用来通知它注册了的监听器）</li> \n </ol> \n <h4>POJO</h4> \n <p> POJO是 Plain Old Java Object（简单的Java对象）的缩写。它最初是由 <a href=\"http://www.martinfowler.com/bliki/POJO.html\" rel=\"nofollow,noindex\" target=\"_blank\">Martin Fowler等人</a> 创造的，作为一种花式的对普通Java对象的称呼。这类对象不需要通过框架来使用，也不需要在特定应用服务器的环境下才能运行。这个词主要用来区分简单、轻量的Java对象和“重量级“的类，例如EJB。 <a href=\"http://www.shaunabram.com/18/\" rel=\"nofollow,noindex\" target=\"_blank\">《POJOs in Action》</a> 一书介绍了使用这类轻量的对象来进行开发的方法，许多框架-例如Spring-也推广了POJO的使用。 </p> \n <h4>Spring beans</h4> \n <p> Spring bean 表示受到Spring管理的对象。具体说来，它是被 <a href=\"http://en.wikipedia.org/wiki/Spring_Framework\" rel=\"nofollow,noindex\" target=\"_blank\">Spring框架</a> 容器初始化、配置和管理的对象。Spring bean是在Spring的配置文件中定义（现在也可以通过annotation注解来定义），在Spring容器中初始化，然后注入到应用程序中的。 </p> \n <p>因为在最早的版本中，Spring是被设计用来管理JavaBean的，所以Spring管理的对象会被称为“bean”。当然，现在Spring已经可以管理任何对象，即使它不具备默认构造器和设置方法（getter和setter）这些JavaBean的特性。然而，”Spring bean“这个术语仍然被保存了下来。</p> \n <p>Spring bean可以是POJO吗？当然可以，并且它通常就是。（即使它并不一定得是POJO，例如Spring可以用来处理重量级Java对象，比如EJB对象）。</p> \n <h4>总结</h4> \n <p>虽然距离JavaBean规范的发表已经过了十多年，这个规范仍然有重要的作用，并且影响着现代框架–如Spring–的开发。然而，虽然我们仍然可以称这些包含默认构造器和私有字段的访问方法的类为JavaBean，它的“可以被构建工具可视化地管理的可重用组件”的概念已经不再流行了。</p> \n <p>而另一方面，POJO已经无处不在了，人们对EJB的复杂性的积怨使得“轻量的”Java编程获得了广泛采用。</p> \n <p>Spring bean是由Spring框架创建和管理的对象。</p> \n <p>这三个概念并不是互斥的。一个Java对象可以同时是JavaBean，POJO和Spring bean。</p> 原文链接：翻译：-译文链接：[]\n</div>\n<p>转自：http://www.importnew.com/14019.html</p>','    本文由ImportNew-Jeffery翻译自 Shaunabram 。欢迎加入 翻译小组 。转载请参见文章末尾的要求。    JavaBean, Spring bean 和 POJO 是三个被广泛使用的术语，本文分别讨论了它们的含义，以及分析三者的区别。  JavaBeans  根本而言，JavaBean只是遵循了特定编码规范的Java类而已。例如：     包含默认（无参数）的构造函数......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:27:27',0,0,0,0,'',NULL,1),(350,1,6,'[原]Java之美[从菜鸟到高手演变]之Quartz任务调度快速入门','<div> \n <p> 这是一篇转载的文章，点击 <a target=\"_blank\" href=\"http://www.blogjava.net/baoyaer/articles/155645.html\" rel=\"nofollow,noindex\">阅读原文</a> </p> \n <h4>概述</h4> \n <p>了解Quartz体系结构</p> \n <p>Quartz对任务调度的领域问题进行了高度的抽象，提出了调度器、任务和触发器这3个核心的概念，并在org.quartz通过接口和类对重要的这些核心概念进行描述：</p> \n <p>●Job：是一个接口，只有一个方法void execute(JobExecutionContext context)，开发者实现该接口定义运行任务，JobExecutionContext类提供了调度上下文的各种信息。Job运行时的信息保存在JobDataMap实例中；</p> \n <p>●JobDetail：Quartz在每次执行Job时，都重新创建一个Job实例，所以它不直接接受一个Job的实例，相反它接收一个Job实现类，以便运行时通过newInstance()的反射机制实例化Job。因此需要通过一个类来描述Job的实现类及其它相关的静态信息，如Job名字、描述、关联监听器等信息，JobDetail承担了这一角色。</p> \n <p>通过该类的构造函数可以更具体地了解它的功用：JobDetail(java.lang.String name, java.lang.String group, java.lang.Class jobClass)，该构造函数要求指定Job的实现类，以及任务在Scheduler中的组名和Job名称；</p> \n <p>●Trigger：是一个类，描述触发Job执行的时间触发规则。主要有SimpleTrigger和CronTrigger这两个子类。当仅需触发一次或者以固定时间间隔周期执行，SimpleTrigger是最适合的选择；而CronTrigger则可以通过Cron表达式定义出各种复杂时间规则的调度方案：如每早晨9:00执行，周一、周三、周五下午5:00执行等；</p> \n <p>●Calendar：org.quartz.Calendar和java.util.Calendar不同，它是一些日历特定时间点的集合（可以简单地将org.quartz.Calendar看作java.util.Calendar的集合——java.util.Calendar代表一个日历时间点，无特殊说明后面的Calendar即指org.quartz.Calendar）。一个Trigger可以和多个Calendar关联，以便排除或包含某些时间点。</p> \n <p>假设，我们安排每周星期一早上10:00执行任务，但是如果碰到法定的节日，任务则不执行，这时就需要在Trigger触发机制的基础上使用Calendar进行定点排除。针对不同时间段类型，Quartz在org.quartz.impl.calendar包下提供了若干个Calendar的实现类，如AnnualCalendar、MonthlyCalendar、WeeklyCalendar分别针对每年、每月和每周进行定义；</p> \n <p>●Scheduler：代表一个Quartz的独立运行容器，Trigger和JobDetail可以注册到Scheduler中，两者在Scheduler中拥有各自的组及名称，组及名称是Scheduler查找定位容器中某一对象的依据，Trigger的组及名称必须唯一，JobDetail的组和名称也必须唯一（但可以和Trigger的组和名称相同，因为它们是不同类型的）。Scheduler定义了多个接口方法，允许外部通过组及名称访问和控制容器中Trigger和JobDetail。</p> \n <p>Scheduler可以将Trigger绑定到某一JobDetail中，这样当Trigger触发时，对应的Job就被执行。一个Job可以对应多个Trigger，但一个Trigger只能对应一个Job。可以通过SchedulerFactory创建一个Scheduler实例。Scheduler拥有一个SchedulerContext，它类似于ServletContext，保存着Scheduler上下文信息，Job和Trigger都可以访问SchedulerContext内的信息。SchedulerContext内部通过一个Map，以键值对的方式维护这些上下文数据，SchedulerContext为保存和获取数据提供了多个put()和getXxx()的方法。可以通过Scheduler# getContext()获取对应的SchedulerContext实例；</p> \n <p>●ThreadPool：Scheduler使用一个线程池作为任务运行的基础设施，任务通过共享线程池中的线程提高运行效率。</p> \n <p>Job有一个StatefulJob子接口，代表有状态的任务，该接口是一个没有方法的标签接口，其目的是让Quartz知道任务的类型，以便采用不同的执行方案。无状态任务在执行时拥有自己的JobDataMap拷贝，对JobDataMap的更改不会影响下次的执行。而有状态任务共享共享同一个JobDataMap实例，每次任务执行对JobDataMap所做的更改会保存下来，后面的执行可以看到这个更改，也即每次执行任务后都会对后面的执行发生影响。</p> \n <p>正因为这个原因，无状态的Job可以并发执行，而有状态的StatefulJob不能并发执行，这意味着如果前次的StatefulJob还没有执行完毕，下一次的任务将阻塞等待，直到前次任务执行完毕。有状态任务比无状态任务需要考虑更多的因素，程序往往拥有更高的复杂度，因此除非必要，应该尽量使用无状态的Job。</p> \n <p>如果Quartz使用了数据库持久化任务调度信息，无状态的JobDataMap仅会在Scheduler注册任务时保持一次，而有状态任务对应的JobDataMap在每次执行任务后都会进行保存。</p> \n <p>Trigger自身也可以拥有一个JobDataMap，其关联的Job可以通过JobExecutionContext#getTrigger().getJobDataMap()获取Trigger中的JobDataMap。不管是有状态还是无状态的任务，在任务执行期间对Trigger的JobDataMap所做的更改都不会进行持久，也即不会对下次的执行产生影响。</p> \n <p>Quartz拥有完善的事件和监听体系，大部分组件都拥有事件，如任务执行前事件、任务执行后事件、触发器触发前事件、触发后事件、调度器开始事件、关闭事件等等，可以注册相应的监听器处理感兴趣的事件。</p> \n <p>图1描述了Scheduler的内部组件结构，SchedulerContext提供Scheduler全局可见的上下文信息，每一个任务都对应一个JobDataMap，虚线表达的JobDataMap表示对应有状态的任务：</p> \n <p> <img class=\"alignCenter\" data-original=\"\" alt=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958848250.jpg\"> </p> \n <p> <span target=\"_blank\" name=\"_Ref161569688\">图</span> 1 Scheduler结构图 </p> \n <p>一个Scheduler可以拥有多个Triger组和多个JobDetail组，注册Trigger和JobDetail时，如果不显式指定所属的组，Scheduler将放入到默认组中，默认组的组名为Scheduler.DEFAULT_GROUP。组名和名称组成了对象的全名，同一类型对象的全名不能相同。</p> \n <p>Scheduler本身就是一个容器，它维护着Quartz的各种组件并实施调度的规则。Scheduler还拥有一个线程池，线程池为任务提供执行线程——这比执行任务时简单地创建一个新线程要拥有更高的效率，同时通过共享节约资源的占用。通过线程池组件的支持，对于繁忙度高、压力大的任务调度，Quartz将可以提供良好的伸缩性。</p> \n <p>提示：&nbsp;Quartz完整下载包examples目录下拥有10多个实例，它们是快速掌握Quartz应用很好的实例。</p> \n <h4>使用SimpleTrigger</h4> \n <p>SimpleTrigger拥有多个重载的构造函数，用以在不同场合下构造出对应的实例：</p> \n <p>●SimpleTrigger(String name, String group)：通过该构造函数指定Trigger所属组和名称；</p> \n <p>●SimpleTrigger(String name, String group, Date startTime)：除指定Trigger所属组和名称外，还可以指定触发的开发时间；</p> \n <p>●SimpleTrigger(String name, String group, Date startTime, Date endTime, int repeatCount, long repeatInterval)：除指定以上信息外，还可以指定结束时间、重复执行次数、时间间隔等参数；</p> \n <p>●SimpleTrigger(String name, String group, String jobName, String jobGroup, Date startTime, Date endTime, int repeatCount, long repeatInterval)：这是最复杂的一个构造函数，在指定触发参数的同时，还通过jobGroup和jobName，让该Trigger和Scheduler中的某个任务关联起来。</p> \n <p>通过实现 org.quartz..Job 接口，可以使 Java 类化身为可调度的任务。代码清单1提供了 Quartz 任务的一个示例：</p> \n <p> <span target=\"_blank\" name=\"_Ref161571763\">代码清单</span> 1 SimpleJob：简单的Job实现类 </p> \n <pre class=\"brush:java;toolbar:false\">package com.baobaotao.basic.quartz;\n\nimport java.util.Date;\n\nimport org.quartz.Job;\n\nimport org.quartz.JobExecutionContext;\n\nimport org.quartz.JobExecutionException;\n\npublic class SimpleJob implements Job {\n\n①实例Job接口方法\n\npublic void execute(JobExecutionContext jobCtx)throws JobExecutionException {\n\nSystem.out.println(jobCtx.getTrigger().getName()+ \" triggered. time is:\" + (new Date()));\n\n}\n\n}</pre> \n <p>这个类用一条非常简单的输出语句实现了Job接口的execute(JobExecutionContext context) 方法，这个方法可以包含想要执行的任何代码。下面，我们通过SimpleTrigger对SimpleJob进行调度：</p> \n <p> <span target=\"_blank\" name=\"_Ref161637485\">代码清单</span> 2 SimpleTriggerRunner：使用SimpleTrigger进行调度 </p> \n <pre class=\"brush:java;toolbar:false\">package com.baobaotao.basic.quartz;\n\nimport java.util.Date;\n\nimport org.quartz.JobDetail;\n\nimport org.quartz.Scheduler;\n\nimport org.quartz.SchedulerFactory;\n\nimport org.quartz.SimpleTrigger;\n\nimport org.quartz.impl.StdSchedulerFactory;\n\npublic class SimpleTriggerRunner {\n\npublic static void main(String args[]) {\n\ntry {\n\n①创建一个JobDetail实例，指定SimpleJob\n\nJobDetail jobDetail = new JobDetail(\"job1_1\",\"jGroup1\", SimpleJob.class);\n\n②通过SimpleTrigger定义调度规则：马上启动，每2秒运行一次，共运行100次\n\nSimpleTrigger simpleTrigger = new SimpleTrigger(\"trigger1_1\",\"tgroup1\");\n\nsimpleTrigger.setStartTime(new Date());\n\nsimpleTrigger.setRepeatInterval(2000);\n\nsimpleTrigger.setRepeatCount(100);\n\n③通过SchedulerFactory获取一个调度器实例\n\nSchedulerFactory schedulerFactory = new StdSchedulerFactory();\n\nScheduler scheduler = schedulerFactory.getScheduler();\n\nscheduler.scheduleJob(jobDetail, simpleTrigger);④ 注册并进行调度\n\nscheduler.start();⑤调度启动\n\n} catch (Exception e) {\n\ne.printStackTrace();\n\n}\n\n}\n\n}</pre> \n <p>首先在①处通过JobDetail封装SimpleJob，同时指定Job在Scheduler中所属组及名称，这里，组名为jGroup1，而名称为job1_1。</p> \n <p>在②处创建一个SimpleTrigger实例，指定该Trigger在Scheduler中所属组及名称。接着设置调度的时间规则。</p> \n <p>最后，需要创建Scheduler实例，并将JobDetail和Trigger实例注册到Scheduler中。这里，我们通过StdSchedulerFactory获取一个Scheduler实例，并通过scheduleJob(JobDetail jobDetail, Trigger trigger)完成两件事：</p> \n <p>1)将JobDetail和Trigger注册到Scheduler中；</p> \n <p>2)将Trigger指派给JobDetail，将两者关联起来。</p> \n <p>当Scheduler启动后，Trigger将定期触发并执行SimpleJob的execute(JobExecutionContext jobCtx)方法，然后每 10 秒重复一次，直到任务被执行 100 次后停止。</p> \n <p>还可以通过SimpleTrigger的setStartTime(java.util.Date startTime)和setEndTime(java.util.Date endTime)指定运行的时间范围，当运行次数和时间范围冲突时，超过时间范围的任务运行不被执行。如可以通过simpleTrigger.setStartTime(new Date(System.currentTimeMillis() + 60000L))指定60秒钟以后开始。</p> \n <p>除了通过scheduleJob(jobDetail, simpleTrigger)建立Trigger和JobDetail的关联，还有另外一种关联Trigger和JobDetail的方式：</p> \n <p> <span>JobDetail&nbsp;jobDetail&nbsp;</span> <span>=</span> <span>&nbsp;</span> <span>new</span> <span>&nbsp;JobDetail(</span> <span>\"</span> <span>job1_1</span> <span>\"</span> <span>,</span> <span>\"</span> <span>jGroup1</span> <span>\"</span> <span>,&nbsp;SimpleJob.</span> <span>class</span> <span> </span></p>\n <p>);</p> \n <img class=\"lazy-load\" data-original=\"\" alt=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958849176.gif\"> \n <img class=\"lazy-load\" data-original=\"\" alt=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958849340.gif\"> \n <p>SimpleTrigger&nbsp;simpleTrigger&nbsp;</p>  \n <span>=</span> \n <span>&nbsp;</span> \n <span>new</span> \n <span>&nbsp;SimpleTrigger(</span> \n <span>\"</span> \n <span>trigger1_1</span> \n <span>\"</span> \n <span>,</span> \n <span>\"</span> \n <span>tgroup1</span> \n <span>\"</span> \n <span> <p>);</p> <img class=\"lazy-load\" data-original=\"\" alt=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958849472.gif\"> <img class=\"lazy-load\" data-original=\"\" alt=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958849618.gif\"> <p>…</p> <img class=\"lazy-load\" data-original=\"\" alt=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958849724.gif\"> <img class=\"lazy-load\" data-original=\"\" alt=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958849831.gif\"> <p>simpleTrigger.setJobGroup(</p> </span> \n <span>\"</span> \n <span>jGroup1</span> \n <span>\"</span> \n <span>);①</span> \n <span>-</span> \n <span>1</span> \n <span> <p>：指定关联的Job组名</p> <img class=\"lazy-load\" data-original=\"\" alt=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958849994.gif\"> <img class=\"lazy-load\" data-original=\"\" alt=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958850116.gif\"> <p>simpleTrigger.setJobName(</p> </span> \n <span>\"</span> \n <span>job1_1</span> \n <span>\"</span> \n <span>);①</span> \n <span>-</span> \n <span>2</span> \n <span> <p>：指定关联的Job名称</p> <img class=\"lazy-load\" data-original=\"\" alt=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958850263.gif\"> <img class=\"lazy-load\" data-original=\"\" alt=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958850757.gif\"> <p>scheduler.addJob(jobDetail,&nbsp;</p> </span> \n <span>true</span> \n <span> <p>);②&nbsp;注册JobDetail</p> <img class=\"lazy-load\" data-original=\"\" alt=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958851395.gif\"> <img class=\"lazy-load\" data-original=\"\" alt=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958851597.gif\"> <p>scheduler.scheduleJob(simpleTrigger);③&nbsp;注册指定了关联JobDetail的Trigger</p> <img class=\"lazy-load\" data-original=\"\" alt=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958851742.gif\"> </span> \n <p></p> \n <p>在这种方式中，Trigger通过指定Job所属组及Job名称，然后使用Scheduler的scheduleJob(Trigger trigger)方法注册Trigger。有两个值得注意的地方：</p> \n <p>通过这种方式注册的Trigger实例必须已经指定Job组和Job名称，否则调用注册Trigger的方法将抛出异常；</p> \n <p>引用的JobDetail对象必须已经存在于Scheduler中。也即，代码中①、②和③的先后顺序不能互换。</p> \n <p>在构造Trigger实例时，可以考虑使用org.quartz.TriggerUtils工具类，该工具类不但提供了众多获取特定时间的方法，还拥有众多获取常见Trigger的方法，如makeSecondlyTrigger(String trigName)方法将创建一个每秒执行一次的Trigger，而makeWeeklyTrigger(String trigName, int dayOfWeek, int hour, int minute)将创建一个每星期某一特定时间点执行一次的Trigger。而getEvenMinuteDate(Date date)方法将返回某一时间点一分钟以后的时间。</p> \n <h4>使用CronTrigger</h4> \n <p>CronTrigger 能够提供比 SimpleTrigger 更有具体实际意义的调度方案，调度规则基于 Cron 表达式，CronTrigger 支持日历相关的重复时间间隔（比如每月第一个周一执行），而不是简单的周期时间间隔。因此，相对于SimpleTrigger而言，CronTrigger在使用上也要复杂一些。</p> \n <h4>Cron表达式</h4> \n <p>Quartz使用类似于Linux下的Cron表达式定义时间规则，Cron表达式由6或7个由空格分隔的时间字段组成，如表1所示：</p> \n <p> <span target=\"_blank\" name=\"_Ref163988071\">表</span> 1 Cron表达式时间字段 </p> \n <table bordercolor=\"#cccccc\" cellspacing=\"1\" cellpadding=\"1\" border=\"1\"> \n  <tbody> \n   <tr> \n    <td valign=\"top\" width=\"54\"> <p>位置</p> </td> \n    <td valign=\"top\" width=\"82\"> <p>时间域名</p> </td> \n    <td width=\"133\"> <p>允许值</p> </td> \n    <td width=\"290\"> <p>允许的特殊字符</p> </td> \n   </tr> \n   <tr> \n    <td valign=\"top\" width=\"54\"> <p>1</p> </td> \n    <td valign=\"top\" width=\"82\"> <p>秒</p> </td> \n    <td valign=\"top\" width=\"133\"> <p>0-59</p> </td> \n    <td valign=\"top\" width=\"290\"> <p>, - * /</p> </td> \n   </tr> \n   <tr> \n    <td valign=\"top\" width=\"54\"> <p>2</p> </td> \n    <td valign=\"top\" width=\"82\"> <p>分钟</p> </td> \n    <td valign=\"top\" width=\"133\"> <p>0-59</p> </td> \n    <td valign=\"top\" width=\"290\"> <p>, - * /</p> </td> \n   </tr> \n   <tr> \n    <td valign=\"top\" width=\"54\"> <p>3</p> </td> \n    <td valign=\"top\" width=\"82\"> <p>小时</p> </td> \n    <td valign=\"top\" width=\"133\"> <p>0-23</p> </td> \n    <td valign=\"top\" width=\"290\"> <p>, - * /</p> </td> \n   </tr> \n   <tr> \n    <td valign=\"top\" width=\"54\"> <p>4</p> </td> \n    <td valign=\"top\" width=\"82\"> <p>日期</p> </td> \n    <td valign=\"top\" width=\"133\"> <p>1-31</p> </td> \n    <td valign=\"top\" width=\"290\"> <p>, - * ? / L W C</p> </td> \n   </tr> \n   <tr> \n    <td valign=\"top\" width=\"54\"> <p>5</p> </td> \n    <td valign=\"top\" width=\"82\"> <p>月份</p> </td> \n    <td valign=\"top\" width=\"133\"> <p>1-12</p> </td> \n    <td valign=\"top\" width=\"290\"> <p>, - * /</p> </td> \n   </tr> \n   <tr> \n    <td valign=\"top\" width=\"54\"> <p>6</p> </td> \n    <td valign=\"top\" width=\"82\"> <p>星期</p> </td> \n    <td valign=\"top\" width=\"133\"> <p>1-7</p> </td> \n    <td valign=\"top\" width=\"290\"> <p>, - * ? / L C #</p> </td> \n   </tr> \n   <tr> \n    <td valign=\"top\" width=\"54\"> <p>7</p> </td> \n    <td valign=\"top\" width=\"82\"> <p>年(可选)</p> </td> \n    <td valign=\"top\" width=\"133\"> <p>空值1970-2099</p> </td> \n    <td valign=\"top\" width=\"290\"> <p>, - * /</p> </td> \n   </tr> \n  </tbody> \n </table> \n <p>Cron表达式的时间字段除允许设置数值外，还可使用一些特殊的字符，提供列表、范围、通配符等功能，细说如下：</p> \n <p>●星号(*)：可用在所有字段中，表示对应时间域的每一个时刻，例如，*在分钟字段时，表示“每分钟”；</p> \n <p>●问号（?）：该字符只在日期和星期字段中使用，它通常指定为“无意义的值”，相当于点位符；</p> \n <p>●减号(-)：表达一个范围，如在小时字段中使用“10-12”，则表示从10到12点，即10,11,12；</p> \n <p>●逗号(,)：表达一个列表值，如在星期字段中使用“MON,WED,FRI”，则表示星期一，星期三和星期五；</p> \n <p>●斜杠(/)：x/y表达一个等步长序列，x为起始值，y为增量步长值。如在分钟字段中使用0/15，则表示为0,15,30和45秒，而5/15在分钟字段中表示5,20,35,50，你也可以使用*/y，它等同于0/y；</p> \n <p>●L：该字符只在日期和星期字段中使用，代表“Last”的意思，但它在两个字段中意思不同。L在日期字段中，表示这个月份的最后一天，如一月的31号，非闰年二月的28号；如果L用在星期中，则表示星期六，等同于7。但是，如果L出现在星期字段里，而且在前面有一个数值X，则表示“这个月的最后X天”，例如，6L表示该月的最后星期五；</p> \n <p>●W：该字符只能出现在日期字段里，是对前导日期的修饰，表示离该日期最近的工作日。例如15W表示离该月15号最近的工作日，如果该月15号是星期六，则匹配14号星期五；如果15日是星期日，则匹配16号星期一；如果15号是星期二，那结果就是15号星期二。但必须注意关联的匹配日期不能够跨月，如你指定1W，如果1号是星期六，结果匹配的是3号星期一，而非上个月最后的那天。W字符串只能指定单一日期，而不能指定日期范围；</p> \n <p>●LW组合：在日期字段可以组合使用LW，它的意思是当月的最后一个工作日；</p> \n <p>●井号(#)：该字符只能在星期字段中使用，表示当月某个工作日。如6#3表示当月的第三个星期五(6表示星期五，#3表示当前的第三个)，而4#5表示当月的第五个星期三，假设当月没有第五个星期三，忽略不触发；</p> \n <p>● C：该字符只在日期和星期字段中使用，代表“Calendar”的意思。它的意思是计划所关联的日期，如果日期没有被关联，则相当于日历中所有日期。例如5C在日期字段中就相当于日历5日以后的第一天。1C在星期字段中相当于星期日后的第一天。</p> \n <p>Cron表达式对特殊字符的大小写不敏感，对代表星期的缩写英文大小写也不敏感。</p> \n <p>表2下面给出一些完整的Cron表示式的实例：</p> \n <p> <span target=\"_blank\" name=\"_Ref161591953\">表</span> 2 Cron表示式示例 </p> \n <table bordercolor=\"#cccccc\" cellspacing=\"1\" cellpadding=\"1\" border=\"1\"> \n  <tbody> \n   <tr> \n    <td width=\"235\"> <p>表示式</p> </td> \n    <td> <p>说明</p> </td> \n   </tr> \n   <tr> \n    <td valign=\"top\" width=\"235\"> <p>\"0 0 12 * * ? \"</p> </td> \n    <td valign=\"top\"> <p>每天12点运行</p> </td> \n   </tr> \n   <tr> \n    <td valign=\"top\" width=\"235\"> <p>\"0 15 10 ? * *\"</p> </td> \n    <td valign=\"top\"> <p>每天10:15运行</p> </td> \n   </tr> \n   <tr> \n    <td valign=\"top\" width=\"235\"> <p>\"0 15 10 * * ?\"</p> </td> \n    <td valign=\"top\"> <p>每天10:15运行</p> </td> \n   </tr> \n   <tr> \n    <td valign=\"top\" width=\"235\"> <p>\"0 15 10 * * ? *\"</p> </td> \n    <td valign=\"top\"> <p>每天10:15运行</p> </td> \n   </tr> \n   <tr> \n    <td valign=\"top\" width=\"235\"> <p>\"0 15 10 * * ? 2008\"</p> </td> \n    <td valign=\"top\"> <p>在2008年的每天10：15运行</p> </td> \n   </tr> \n   <tr> \n    <td valign=\"top\" width=\"235\"> <p>\"0 * 14 * * ?\"</p> </td> \n    <td valign=\"top\"> <p>每天14点到15点之间每分钟运行一次，开始于14:00，结束于14:59。</p> </td> \n   </tr> \n   <tr> \n    <td valign=\"top\" width=\"235\"> <p>\"0 0/5 14 * * ?\"</p> </td> \n    <td valign=\"top\"> <p>每天14点到15点每5分钟运行一次，开始于14:00，结束于14:55。</p> </td> \n   </tr> \n   <tr> \n    <td valign=\"top\" width=\"235\"> <p>\"0 0/5 14,18 * * ?\"</p> </td> \n    <td valign=\"top\"> <p>每天14点到15点每5分钟运行一次，此外每天18点到19点每5钟也运行一次。</p> </td> \n   </tr> \n   <tr> \n    <td valign=\"top\" width=\"235\"> <p>\"0 0-5 14 * * ?\"</p> </td> \n    <td valign=\"top\"> <p>每天14:00点到14:05，每分钟运行一次。</p> </td> \n   </tr> \n   <tr> \n    <td valign=\"top\" width=\"235\"> <p>\"0 10,44 14 ? 3 WED\"</p> </td> \n    <td valign=\"top\"> <p>3月每周三的14:10分到14:44，每分钟运行一次。</p> </td> \n   </tr> \n   <tr> \n    <td valign=\"top\" width=\"235\"> <p>\"0 15 10 ? * MON-FRI\"</p> </td> \n    <td valign=\"top\"> <p>每周一，二，三，四，五的10:15分运行。</p> </td> \n   </tr> \n   <tr> \n    <td valign=\"top\" width=\"235\"> <p>\"0 15 10 15 * ?\"</p> </td> \n    <td valign=\"top\"> <p>每月15日10:15分运行。</p> </td> \n   </tr> \n   <tr> \n    <td valign=\"top\" width=\"235\"> <p>\"0 15 10 L * ?\"</p> </td> \n    <td valign=\"top\"> <p>每月最后一天10:15分运行。</p> </td> \n   </tr> \n   <tr> \n    <td valign=\"top\" width=\"235\"> <p>\"0 15 10 ? * 6L\"</p> </td> \n    <td valign=\"top\"> <p>每月最后一个星期五10:15分运行。</p> </td> \n   </tr> \n   <tr> \n    <td valign=\"top\" width=\"235\"> <p>\"0 15 10 ? * 6L 2007-2009\"</p> </td> \n    <td valign=\"top\"> <p>在2007,2008,2009年每个月的最后一个星期五的10:15分运行。</p> </td> \n   </tr> \n   <tr> \n    <td valign=\"top\" width=\"235\"> <p>\"0 15 10 ? * 6#3\"</p> </td> \n    <td valign=\"top\"> <p>每月第三个星期五的10:15分运行。</p> </td> \n   </tr> \n  </tbody> \n </table> \n <h4>CronTrigger实例</h4> \n <p>下面，我们使用CronTrigger对SimpleJob进行调度，通过Cron表达式制定调度规则，让它每5秒钟运行一次：</p> \n <p> <span target=\"_blank\" name=\"_Ref161637488\">代码清单</span> 3 CronTriggerRunner：使用CronTrigger进行调度 </p> \n <pre class=\"brush:java;toolbar:false\">package com.baobaotao.basic.quartz;\n\nimport org.quartz.CronExpression;\n\nimport org.quartz.CronTrigger;\n\nimport org.quartz.JobDetail;\n\nimport org.quartz.Scheduler;\n\nimport org.quartz.SchedulerFactory;\n\nimport org.quartz.impl.StdSchedulerFactory;\n\npublic class CronTriggerRunner {\n\npublic static void main(String args[]) {\n\ntry {\n\nJobDetail jobDetail = new JobDetail(\"job1_2\", \"jGroup1\",SimpleJob.class);\n\n①-1：创建CronTrigger，指定组及名称\n\nCronTrigger cronTrigger = new CronTrigger(\"trigger1_2\", \"tgroup1\");\n\nCronExpression cexp = new CronExpression(\"0/5 * * * * ?\");①-2：定义Cron表达式\n\ncronTrigger.setCronExpression(cexp);①-3：设置Cron表达式\n\nSchedulerFactory schedulerFactory = new StdSchedulerFactory();\n\nScheduler scheduler = schedulerFactory.getScheduler();\n\nscheduler.scheduleJob(jobDetail, cronTrigger);\n\nscheduler.start();\n\n//②\n\n} catch (Exception e) {\n\ne.printStackTrace();\n\n}\n\n}\n\n}</pre> \n <p>运行CronTriggerRunner，每5秒钟将触发运行SimpleJob一次。默认情况下Cron表达式对应当前的时区，可以通过CronTriggerRunner的setTimeZone(java.util.TimeZone timeZone)方法显式指定时区。你还也可以通过setStartTime(java.util.Date startTime)和setEndTime(java.util.Date endTime)指定开始和结束的时间。</p> \n <p>在代码清单3的②处需要通过Thread.currentThread.sleep()的方式让主线程睡眠，以便调度器可以继续工作执行任务调度。否则在调度器启动后，因为主线程马上退出，也将同时引起调度器关闭，调度器中的任务都将相应销毁，这将导致看不到实际的运行效果。在单元测试的时候，让主线程睡眠经常使用的办法。对于某些长周期任务调度的测试，你可以简单地调整操作系统时间进行模拟。</p> \n <h4>使用Calendar</h4> \n <p>在实际任务调度中，我们不可能一成不变地按照某个周期性的调度规则运行任务，必须考虑到实现生活中日历上特定日期，就象习惯了大男人作风的人在2月14号也会有不同表现一样。</p> \n <p>下面，我们安排一个任务，每小时运行一次，并将五一节和国际节排除在外，其代码如代码清单4所示：</p> \n <p> <span target=\"_blank\" name=\"_Ref161722341\">代码清单</span> 4 CalendarExample：使用Calendar </p> \n <pre class=\"brush:java;toolbar:false\">package com.baobaotao.basic.quartz;\n\nimport java.util.Calendar;\n\nimport java.util.Date;\n\nimport java.util.GregorianCalendar;\n\nimport org.quartz.impl.calendar.AnnualCalendar;\n\nimport org.quartz.TriggerUtils;\n\n…\n\npublic class CalendarExample {\n\npublic static void main(String[] args) throws Exception {\n\nSchedulerFactory sf = new StdSchedulerFactory();\n\nScheduler scheduler = sf.getScheduler();\n\n①法定节日是以每年为周期的，所以使用AnnualCalendar\n\nAnnualCalendar holidays = new AnnualCalendar();\n\n②五一劳动节\n\nCalendar laborDay = new GregorianCalendar();\n\nlaborDay.add(Calendar.MONTH,5);\n\nlaborDay.add(Calendar.DATE,1);\n\nholidays.setDayExcluded(laborDay, true); ②-1：排除的日期，如果设置为false则为包含\n\n③国庆节\n\nCalendar nationalDay = new GregorianCalendar();\n\nnationalDay.add(Calendar.MONTH,10);\n\nnationalDay.add(Calendar.DATE,1);\n\nholidays.setDayExcluded(nationalDay, true);③-1：排除该日期\n\nscheduler.addCalendar(\"holidays\", holidays, false, false);④向Scheduler注册日历\n\nDate runDate = TriggerUtils.getDateOf(0,0, 10, 1, 4);⑤4月1号 上午10点\n\nJobDetail job = new JobDetail(\"job1\", \"group1\", SimpleJob.class);\n\nSimpleTrigger trigger = new SimpleTrigger(\"trigger1\", \"group1\", \n\nrunDate, \n\nnull, \n\nSimpleTrigger.REPEAT_INDEFINITELY, \n\n60L * 60L * 1000L);\n\ntrigger.setCalendarName(\"holidays\");⑥让Trigger应用指定的日历规则\n\nscheduler.scheduleJob(job, trigger);\n\nscheduler.start();\n\n//实际应用中主线程不能停止，否则Scheduler得不到执行，此处从略\n\n}\n\n}</pre> \n <p>由于节日是每年重复的，所以使用org.quartz.Calendar的AnnualCalendar实现类，通过②、③的代码，指定五一和国庆两个节日并通过AnnualCalendar#setDayExcluded(Calendar day, boolean exclude)方法添加这两个日期。exclude为true时表示排除指定的日期，如果为false时表示包含指定的日期。</p> \n <p>在定制好org.quartz.Calendar后，还需要通过Scheduler#addCalendar(String calName, Calendar calendar, boolean replace, boolean updateTriggers)进行注册，如果updateTriggers为true，Scheduler中已引用Calendar的Trigger将得到更新，如④所示。</p> \n <p>在⑥处，我们让一个Trigger指定使用Scheduler中代表节日的Calendar，这样Trigger就会避开五一和国庆这两个特殊日子了。</p> \n <h4>任务调度信息存储</h4> \n <p>在默认情况下Quartz将任务调度的运行信息保存在内存中，这种方法提供了最佳的性能，因为内存中数据访问最快。不足之处是缺乏数据的持久性，当程序路途停止或系统崩溃时，所有运行的信息都会丢失。</p> \n <p>比如我们希望安排一个执行100次的任务，如果执行到50次时系统崩溃了，系统重启时任务的执行计数器将从0开始。在大多数实际的应用中，我们往往并不需要保存任务调度的现场数据，因为很少需要规划一个指定执行次数的任务。</p> \n <p>对于仅执行一次的任务来说，其执行条件信息本身应该是已经持久化的业务数据（如锁定到期解锁任务，解锁的时间应该是业务数据），当执行完成后，条件信息也会相应改变。当然调度现场信息不仅仅是记录运行次数，还包括调度规则、JobDataMap中的数据等等。</p> \n <p>如果确实需要持久化任务调度信息，Quartz允许你通过调整其属性文件，将这些信息保存到数据库中。使用数据库保存任务调度信息后，即使系统崩溃后重新启动，任务的调度信息将得到恢复。如前面所说的例子，执行50次崩溃后重新运行，计数器将从51开始计数。使用了数据库保存信息的任务称为持久化任务。</p> \n <h4>通过配置文件调整任务调度信息的保存策略</h4> \n <p>其实Quartz JAR文件的org.quartz包下就包含了一个quartz.properties属性配置文件并提供了默认设置。如果需要调整默认配置，可以在类路径下建立一个新的quartz.properties，它将自动被Quartz加载并覆盖默认的设置。</p> \n <p>先来了解一下Quartz的默认属性配置文件：</p> \n <p>代码清单5 quartz.properties：默认配置</p> \n <p>①集群的配置，这里不使用集群</p> \n <p>org.quartz.scheduler.instanceName = DefaultQuartzScheduler</p> \n <p>org.quartz.scheduler.rmi.export = false</p> \n <p>org.quartz.scheduler.rmi.proxy = false</p> \n <p>org.quartz.scheduler.wrapJobExecutionInUserTransaction = false</p> \n <p>②配置调度器的线程池</p> \n <p>org.quartz.threadPool.class = org.quartz.simpl.SimpleThreadPool</p> \n <p>org.quartz.threadPool.threadCount = 10</p> \n <p>org.quartz.threadPool.threadPriority = 5</p> \n <p>org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread = true</p> \n <p>③配置任务调度现场数据保存机制</p> \n <p>org.quartz.jobStore.class =&nbsp;org.quartz.simpl.RAMJobStore</p> \n <p>Quartz的属性配置文件主要包括三方面的信息：</p> \n <p>1)集群信息；</p> \n <p>2)调度器线程池；</p> \n <p>3)任务调度现场数据的保存。</p> \n <p>如果任务数目很大时，可以通过增大线程池的大小得到更好的性能。默认情况下，Quartz采用org.quartz.simpl.RAMJobStore保存任务的现场数据，顾名思义，信息保存在RAM内存中，我们可以通过以下设置将任务调度现场数据保存到数据库中：</p> \n <p> <span target=\"_blank\" name=\"_Ref161637439\">代码清单</span> 6 quartz.properties：使用数据库保存任务调度现场数据 </p> \n <p>…</p> \n <p>org.quartz.jobStore.class = org.quartz.impl.jdbcjobstore.JobStoreTX</p> \n <p>org.quartz.jobStore.tablePrefix = QRTZ_①数据表前缀</p> \n <p>org.quartz.jobStore.dataSource = qzDS②数据源名称</p> \n <p>③定义数据源的具体属性</p> \n <p>org.quartz.dataSource.qzDS.driver = oracle.jdbc.driver.OracleDriver</p> \n <p>org.quartz.dataSource.qzDS.URL = jdbc:oracle:thin:@localhost:1521:ora9i</p> \n <p>org.quartz.dataSource.qzDS.user = stamen</p> \n <p>org.quartz.dataSource.qzDS.password = abc</p> \n <p>org.quartz.dataSource.qzDS.maxConnections = 10</p> \n <p>要将任务调度数据保存到数据库中，就必须使用org.quartz.impl.jdbcjobstore.JobStoreTX代替原来的org.quartz.simpl.RAMJobStore并提供相应的数据库配置信息。首先①处指定了Quartz数据库表的前缀，在②处定义了一个数据源，在③处具体定义这个数据源的连接信息。</p> \n <p>你必须事先在相应的数据库中创建Quartz的数据表（共8张），在Quartz的完整发布包的docs/dbTables目录下拥有对应不同数据库的SQL脚本。</p> \n <h4>查询数据库中的运行信息</h4> \n <p>任务的现场保存对于上层的Quartz程序来说是完全透明的，我们在class=\"lazy-load\" data-original目录下编写一个如代码清单6所示的quartz.properties文件后，重新运行代码清单2或代码清单3的程序，在数据库表中将可以看到对应的持久化信息。当调度程序运行过程中途停止后，任务调度的现场数据将记录在数据表中，在系统重启时就可以在此基础上继续进行任务的调度。</p> \n <p> <span target=\"_blank\" name=\"_Ref161644355\">代码清单</span> 7 JDBCJobStoreRunner：从数据库中恢复任务的调度 </p> \n <pre class=\"brush:java;toolbar:false\">package com.baobaotao.basic.quartz;\n\nimport org.quartz.Scheduler;\n\nimport org.quartz.SchedulerFactory;\n\nimport org.quartz.SimpleTrigger;\n\nimport org.quartz.Trigger;\n\nimport org.quartz.impl.StdSchedulerFactory;\n\npublic class JDBCJobStoreRunner {\n\npublic static void main(String args[]) {\n\ntry {\n\nSchedulerFactory schedulerFactory = new StdSchedulerFactory();\n\nScheduler scheduler = schedulerFactory.getScheduler();\n\n①获取调度器中所有的触发器组\n\nString[] triggerGroups = scheduler.getTriggerGroupNames();\n\n②重新恢复在tgroup1组中，名为trigger1_1触发器的运行\n\nfor (int i = 0; i &lt; triggerGroups.length; i++) {\n\nString[] triggers = scheduler.getTriggerNames(triggerGroups[i]);\n\nfor (int j = 0; j &lt; triggers.length; j++) {\n\nTrigger tg = scheduler.getTrigger(triggers[j],triggerGroups[i]);\n\nif (tg instanceof SimpleTrigger\n\n&amp;&amp; tg.getFullName().equals(\"tgroup1.trigger1_1\")) {②-1:根据名称判断\n\n②-1:恢复运行\n\nscheduler.rescheduleJob(triggers[j], triggerGroups[i],tg);\n\n}\n\n}\n\n}\n\nscheduler.start();\n\n} catch (Exception e) {\n\ne.printStackTrace();\n\n}\n\n}\n\n}</pre> \n <p>当代码清单2中的SimpleTriggerRunner执行到一段时间后非正常退出，我们就可以通过这个JDBCJobStoreRunner根据记录在数据库中的现场数据恢复任务的调度。Scheduler中的所有Trigger以及JobDetail的运行信息都会保存在数据库中，这里我们仅恢复tgroup1组中名称为trigger1_1的触发器，这可以通过如②-1所示的代码进行过滤，触发器的采用GROUP.TRIGGER_NAME的全名格式。通过Scheduler#rescheduleJob(String triggerName,String groupName,Trigger newTrigger)即可重新调度关联某个Trigger的任务。</p> \n <p>下面我们来观察一下不同时期qrtz_simple_triggers表的数据：</p> \n <p>1．运行代码清单2的SimpleTriggerRunner一小段时间后退出：</p> \n <p>&lt;img class=\"lazy-load\" data-original=\"http://img.zdnet.com.cn/0/252/liwpcFeXRINSw.gif\" \"=\"\" style=\"width: 500px; cursor: pointer;\"&gt;500){this.resized=true;this.style.width=500;}\" align=center resized=\"true\"&gt;</p> \n <p>REPEAT_COUNT表示需要运行的总次数，而TIMES_TRIGGER表示已经运行的次数。</p> \n <p>2．运行代码清单7的JDBCJobStoreRunner恢复trigger1_1的触发器，运行一段时间后退出，这时qrtz_simple_triggers中的数据如下：</p> \n <p>&lt;img class=\"lazy-load\" data-original=\"http://img.zdnet.com.cn/0/253/liUoSITpuhrBg.gif\" \"=\"\" style=\"width: 500px; cursor: pointer;\"&gt;500){this.resized=true;this.style.width=500;}\" align=center resized=\"true\"&gt;</p> \n <p>首先Quartz会将原REPEAT_COUNT-TIMES_TRIGGER得到新的REPEAT_COUNT值，并记录已经运行的次数（重新从0开始计算）。</p> \n <p>3．重新启动JDBCJobStoreRunner运行后，数据又将发生相应的变化：</p> \n <p>&lt;img class=\"lazy-load\" data-original=\"http://img.zdnet.com.cn/0/254/liZI9tW4gqYzc.gif\" \"=\"\" style=\"width: 500px; cursor: pointer;\"&gt;500){this.resized=true;this.style.width=500;}\" align=center resized=\"true\"&gt;</p> \n <p>4．继续运行直至完成所有剩余的次数，再次查询qrtz_simple_triggers表：</p> \n <p>&lt;img class=\"lazy-load\" data-original=\"http://img.zdnet.com.cn/0/255/liKRsyOoJAtQ.gif\" \"=\"\" style=\"width: 500px; cursor: pointer;\"&gt;500){this.resized=true;this.style.width=500;}\" align=center resized=\"true\"&gt;</p> \n <p>这时，该表中的记录已经变空。</p> \n <p>值得注意的是，如果你使用JDBC保存任务调度数据时，当你运行代码清单2的SimpleTriggerRunner然后退出，当再次希望运行SimpleTriggerRunner时，系统将抛出JobDetail重名的异常：</p> \n <p>Unable to store Job with name: \'job1_1\' and group: \'jGroup1\', because one already exists with this identification.</p> \n <p>因为每次调用Scheduler#scheduleJob()时，Quartz都会将JobDetail和Trigger的信息保存到数据库中，如果数据表中已经同名的JobDetail或Trigger，异常就产生了。</p> \n <p>本文使用quartz 1.6版本，我们发现当后台数据库使用MySql时，数据保存不成功，该错误是Quartz的一个Bug，相信会在高版本中得到修复。因为HSQLDB不支持SELECT * FROM TABLE_NAME FOR UPDATE的语法，所以不能使用HSQLDB数据库。</p> \n <h4>小结</h4> \n <p>Quartz提供了最为丰富的任务调度功能，不但可以制定周期性运行的任务调度方案，还可以让你按照日历相关的方式进行任务调度。Quartz框架的重要组件包括Job、JobDetail、Trigger、Scheduler以及辅助性的JobDataMap和SchedulerContext。</p> \n <p>Quartz拥有一个线程池，通过线程池为任务提供执行线程，你可以通过配置文件对线程池进行参数定制。Quartz的另一个重要功能是可将任务调度信息持久化到数据库中，以便系统重启时能够恢复已经安排的任务。此外，Quartz还拥有完善的事件体系，允许你注册各种事件的监听器。</p> \n</div>\n<p>转自：http://blog.csdn.net/zhangerqing/article/details/41811051</p>','   这是一篇转载的文章，点击 阅读原文   概述  了解Quartz体系结构  Quartz对任务调度的领域问题进行了高度的抽象，提出了调度器、任务和触发器这3个核心的概念，并在org.quartz通过接口和类对重要的这些核心概念进行描述：  ●Job：是一个接口，只有一个方法void execute(JobExecutionContext context)，开发者实现该接口定义运行任务，Job......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:27:32',0,0,0,0,'http://www.fzqblog.top/upload/201608/1471958848250.jpg|http://www.fzqblog.top/upload/201608/1471958849176.gif|http://www.fzqblog.top/upload/201608/1471958849340.gif|http://www.fzqblog.top/upload/201608/1471958849472.gif|http://www.fzqblog.top/upload/201608/1471958849618.gif|http://www.fzqblog.top/upload/201608/1471958849724.gif|http://www.fzqblog.top/upload/201608/1471958849831.gif|http://www.fzqblog.top/upload/201608/1471958849994.gif|http://www.fzqblog.top/upload/201608/1471958850116.gif|http://www.fzqblog.top/upload/201608/1471958850263.gif|http://www.fzqblog.top/upload/201608/1471958850757.gif|http://www.fzqblog.top/upload/201608/1471958851395.gif|http://www.fzqblog.top/upload/201608/1471958851597.gif|http://www.fzqblog.top/upload/201608/1471958851742.gif|',NULL,1),(351,1,6,'Mybatis 分页插件 3.3.1 发布','<div> \n <p> <a href=\"http://city.oschina.net/guangzhou/event/195924\" target=\"_blank\" rel=\"nofollow,noindex\">#广州# OSC源创会第31期（12月27日）开始报名，OSC自曝家丑！</a> </p> \n <p> 如果你也在用Mybatis，建议尝试该分页插件，这个一定是 <strong>最方便</strong> 使用的分页插件。 </p> \n <p>该插件目前支持Oracle,Mysql,MariaDB,SQLite,Hsqldb,PostgreSQL六种数据库分页。</p> \n <p>3.3.1更新说明：</p> \n <p>该版本主要修复了一个比较严重的BUG，动态sql时，判断条件（OGNL）中的属性不会出现在ParameterMappings中，因而可能会导致获取不到属性。</p> \n <p> 这个错误通常是因为判断条件中的属性没有出现在#{}中（只有#{}中的属性会添加到 <span>ParameterMappings，${}不会</span> ）。 &nbsp; </p> \n <p>由于上面的原因，该BUG还会影响Example查询的分页。</p> \n <p>3.3.1版本已经修复上述BUG。</p> \n <p>为了避免以后出现这种错误，建议使用3.3.0版本的各位升级到最新版本。</p> \n <p>有关分页插件的优点以及如何使用，请浏览详细文档。</p> \n <p> 历史更新： <a href=\"http://git.oschina.net/free/Mybatis_PageHelper/wikis/Changelog\" target=\"_blank\" rel=\"nofollow,noindex\"> </a></p>\n <p><a href=\"http://git.oschina.net/free/Mybatis_PageHelper/wikis/Changelog\" target=\"_blank\" rel=\"nofollow,noindex\">http://git.oschina.net/free/Mybatis_PageHelper/wikis/Changelog</a></p>\n <p> </p> \n <p> 如何使用： <a href=\"http://git.oschina.net/free/Mybatis_PageHelper/wikis/HowToUse\" target=\"_blank\" rel=\"nofollow,noindex\">http://git.oschina.net/free/Mybatis_PageHelper/wikis/HowToUse</a> </p> \n</div>\n<p>转自：http://www.oschina.net/news/57727/mybatis_pagehelper-3-3-1</p>','   #广州# OSC源创会第31期（12月27日）开始报名，OSC自曝家丑！    如果你也在用Mybatis，建议尝试该分页插件，这个一定是 最方便 使用的分页插件。   该插件目前支持Oracle,Mysql,MariaDB,SQLite,Hsqldb,PostgreSQL六种数据库分页。  3.3.1更新说明：  该版本主要修复了一个比较严重的BUG，动态sql时，判断条件（OGNL）中的......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:27:33',0,0,0,0,'',NULL,1),(352,1,6,'Spring Framework 4.1.3 发布','<div> \n <p> <a href=\"http://city.oschina.net/guangzhou/event/195924\" target=\"_blank\" rel=\"nofollow,noindex\">#广州# OSC源创会第31期（12月27日）开始报名，OSC自曝家丑！</a> </p> \n <p> Spring Framework 4.1.3 发布，此版本是 4.1.x 系列的第三个维护版本，包括超过 <a textvalue=\"50 个 bug 修复和改进\" target=\"_blank\" href=\"https://jira.spring.io/issues/?jql=fixVersion%3D4.1.3%20AND%20project%3DSPR\" rel=\"nofollow,noindex\">50 个 bug 修复和改进</a> 。本来是计划月末发布，但是想早些发布，配合这周要发布的 Spring Boot 1.2 版本。 </p> \n <p>下一个版本将会在月末发布 (4.1.4) 。 </p> \n <p> Spring Framework是一个开源的Java/Java EE全功能栈（full-stack）的应用程序框架，以Apache许可证形式发布，也有.NET平台上的移植版本。 该框架基于 Expert One-on-One Java EE Design and Development（ISBN 0-7645-4385-7）一书中的代码，最初由 Rod Johnson 和 Juergen Hoeller等开发。Spring Framework 提供了一个简易的开发方式，这种开发方式，将避免那些可能致使底层代码变得繁杂混乱的大量的属性文件和帮助类。 </p> \n <p> <img class=\"alignCenter\" data-original=\"\" alt=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958853558.jpg\"> </p> \n</div>\n<p>转自：http://www.oschina.net/news/57781/spring-framework-4-1-3-released</p>','   #广州# OSC源创会第31期（12月27日）开始报名，OSC自曝家丑！    Spring Framework 4.1.3 发布，此版本是 4.1.x 系列的第三个维护版本，包括超过 50 个 bug 修复和改进 。本来是计划月末发布，但是想早些发布，配合这周要发布的 Spring Boot 1.2 版本。   下一个版本将会在月末发布 (4.1.4) 。    Spring Framew......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:27:34',0,0,0,0,'http://www.fzqblog.top/upload/201608/1471958853558.jpg|',NULL,1),(353,1,6,'Spring Boot 负载均衡之外置session状态保存','<div> \n <p>在使用spring boot做负载均衡的时候，多个app之间的session要保持一致，这样负载到不同的app时候，在一个app登录之后，而打到另外一台服务器的时候，session丢失。</p> \n <p>常规的解决方案都是使用：如apache使用mod_jk.conf。</p> \n <p>在开发spring boot app的时候可以借助 spring session 和redis，用外置的redis来存储session的状态。</p> \n <p> 直接上代码，我这边直接默认你使用spring boot，如果你是普通的spring web项目，请参照 <a href=\"https://github.com/spring-projects/spring-session\" target=\"_blank\" rel=\"nofollow,noindex\">https://github.com/spring-projects/spring-session</a> ，在spring boot配置更简单 </p> \n <h2>1、增加repository到pom.xml</h2> \n <pre class=\"brush:java;toolbar:false\">&lt;repository&gt;\n    &lt;id&gt;spring-milestone&lt;/id&gt;\n    &lt;url&gt;https://repo.spring.io/libs-milestone&lt;/url&gt;\n   &lt;/repository&gt;</pre> \n <h2>2、增加相关依赖</h2> \n <pre class=\"brush:java;toolbar:false\">&lt;dependency&gt;\n   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n   &lt;artifactId&gt;spring-boot-starter-redis&lt;/artifactId&gt;\n  &lt;/dependency&gt;\n\n &lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.session&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-session-data-redis&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0.RC1&lt;/version&gt;\n    &lt;type&gt;pom&lt;/type&gt;\n  &lt;/dependency&gt;</pre> \n <h2>3、RedisSessionConfig.java</h2> \n <pre class=\"brush:java;toolbar:false\">package com.wisely.base;\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.session.data.redis.config.annotation.web.http.EnableRedisHttpSession;\n\n@Configuration\n@EnableRedisHttpSession\npublic class RedisSessionConfig {\n\n}</pre> \n <h2>4、相关配置修改</h2> \n <p>在application.properties修改redis配置信息（请自行安装redis），请根据实际修改。如：</p> \n <pre class=\"brush:java;toolbar:false\">spring.redis.host=192.168.1.103</pre> \n <h2>5、所有实体类实现Serializable接口</h2> \n <pre class=\"brush:java;toolbar:false\">public class SysResource implements Serializable</pre> \n <h2>6、查看效果</h2> \n <p>这时候登录系统在不同的app之间跳转的时候，session都是一致了，redis上可以看到：</p> \n <h2>7、总结</h2> \n <p> <span>使用这些代码之后</span> ，无论你使用nginx或者apache，都无须在关心多个app之间的session一致的问题了。 </p> \n</div>\n<p>转自：http://wiselyman.iteye.com/blog/2164638</p>','  在使用spring boot做负载均衡的时候，多个app之间的session要保持一致，这样负载到不同的app时候，在一个app登录之后，而打到另外一台服务器的时候，session丢失。  常规的解决方案都是使用：如apache使用mod_jk.conf。  在开发spring boot app的时候可以借助 spring session 和redis，用外置的redis来存储session的......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:27:35',0,0,0,0,'',NULL,1),(354,1,6,'Tomcat7下Filter执行顺序小验证','<div> \n <p>定义2个Filter，filter1过滤.htm和.json结尾的url，filter2过滤.htm和.xml结尾的url。</p> \n <p>1、init()方法执行顺序：先执行filter2的init()方法，后执行filter1的init()方法。</p> \n <p>因为Filter是责任链模式的，上一级对象包含下一级对象的指针，所以创建顺序在web.xml中是从后往前的。</p> \n <p>2、同一mapping url的doFilter()执行顺序，如*.htm：先执行filter1的doFilter()方法，后执行filter2的doFilter()方法，会进行链式调用。在web.xml中，是按照从前往后的顺序执行。</p> \n <p>3、当全部Filter执行完成，且没有return时，会调用url映射的servlet的service()方法。service()方法执行完后，会逐层放回Filter的doFilter()方法，有点像spring的aop。</p> \n <p>4、不同mapping url的doFilter()执行顺序，如*.json：只会调用filter1的doFilter()方法。mapping url只会执行对应Filter的doFilter()方法。</p> \n <p>5、Tomcat7的Filter实现类为ApplicationFilterChain，创建代码如下：</p> \n <pre class=\"brush:java;toolbar:false\">ApplicationFilterFactory factory =\n            ApplicationFilterFactory.getInstance();\n        ApplicationFilterChain filterChain =\n            factory.createFilterChain(request, wrapper, servlet);</pre> \n <pre class=\"brush:java;toolbar:false\">&lt;filter&gt;\n  &lt;filter-name&gt;filter1&lt;/filter-name&gt;\n  &lt;filter-class&gt;filter.Filter1&lt;/filter-class&gt;\n &lt;/filter&gt;\n &lt;filter-mapping&gt;\n  &lt;filter-name&gt;filter1&lt;/filter-name&gt;\n  &lt;url-pattern&gt;*.htm&lt;/url-pattern&gt;\n &lt;/filter-mapping&gt;\n &lt;filter-mapping&gt;\n  &lt;filter-name&gt;filter1&lt;/filter-name&gt;\n  &lt;url-pattern&gt;*.json&lt;/url-pattern&gt;\n &lt;/filter-mapping&gt;\n\n &lt;filter&gt;\n  &lt;filter-name&gt;filter2&lt;/filter-name&gt;\n  &lt;filter-class&gt;filter.Filter1&lt;/filter-class&gt;\n &lt;/filter&gt;\n &lt;filter-mapping&gt;\n  &lt;filter-name&gt;filter2&lt;/filter-name&gt;\n  &lt;url-pattern&gt;*.htm&lt;/url-pattern&gt;\n &lt;/filter-mapping&gt;\n &lt;filter-mapping&gt;\n  &lt;filter-name&gt;filter2&lt;/filter-name&gt;\n  &lt;url-pattern&gt;*.xml&lt;/url-pattern&gt;\n &lt;/filter-mapping&gt;</pre> \n</div>\n<p>转自：http://mazhen2010.iteye.com/blog/2164432</p>','  定义2个Filter，filter1过滤.htm和.json结尾的url，filter2过滤.htm和.xml结尾的url。  1、init()方法执行顺序：先执行filter2的init()方法，后执行filter1的init()方法。  因为Filter是责任链模式的，上一级对象包含下一级对象的指针，所以创建顺序在web.xml中是从后往前的。  2、同一mapping url的doFil......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:27:35',0,0,0,0,'',NULL,1),(355,1,6,'搭建Spring MVC 4开发环境八步走','<div> \n <div> \n  <p> <span> </span></p>\n  <p>Spring MVC作为SpringFrameWork的产品，自诞生之日，就受到广泛开发者的关注，如今Spring MVC在Java中的发展可谓是蒸蒸日上，如今如果再有开发者说，不了解Spring MVC，或许就被人笑掉大牙。煽情的话就不说了，先告诉大家如何搭建Spring MVC开发环境。</p>  \n  <p></p> \n  <p>JDK 1.7</p> \n  <p>Eclipse Kepler</p> \n  <p>Apache Tomcat 8.0</p> \n  <p> <br> </p> \n  <p> <span> <span> <span>（二）在Eclipse中新建Maven工程，在Archetype类型中，选择“maven-archetype-webapp”。</span> </span> </span> </p> \n  <span> <br> </span> \n  <img class=\"alignCenter\" data-original=\"\" alt=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958856518.jpg\"> \n </div> \n <p>（三）配置pom.xml。</p> \n <pre class=\"brush:java;toolbar:false\">&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"&gt;\n  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n  &lt;groupId&gt;com.favccxx.favsoft&lt;/groupId&gt;\n  &lt;artifactId&gt;favspringmvcrestful&lt;/artifactId&gt;\n  &lt;packaging&gt;war&lt;/packaging&gt;\n  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;\n  &lt;name&gt;favspringmvcrestful Maven Webapp&lt;/name&gt;\n  &lt;url&gt;http://maven.apache.org&lt;/url&gt;\n   &lt;properties&gt;\n   &lt;spring.version&gt;4.1.1.RELEASE&lt;/spring.version&gt;\n  &lt;/properties&gt;\n  &lt;dependencies&gt;\n &lt;dependency&gt;\n   &lt;groupId&gt;junit&lt;/groupId&gt;\n   &lt;artifactId&gt;junit&lt;/artifactId&gt;\n   &lt;version&gt;3.8.1&lt;/version&gt;\n   &lt;scope&gt;test&lt;/scope&gt;\n &lt;/dependency&gt;\n &lt;dependency&gt;\n  &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n  &lt;artifactId&gt;spring-core&lt;/artifactId&gt;\n  &lt;version&gt;${spring.version}&lt;/version&gt;\n &lt;/dependency&gt;\n &lt;dependency&gt;\n  &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n  &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;\n  &lt;version&gt;${spring.version}&lt;/version&gt;\n &lt;/dependency&gt;\n &lt;dependency&gt;\n  &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n  &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;\n  &lt;version&gt;${spring.version}&lt;/version&gt;\n &lt;/dependency&gt;\n &lt;dependency&gt;\n  &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n  &lt;artifactId&gt;spring-context&lt;/artifactId&gt;\n  &lt;version&gt;${spring.version}&lt;/version&gt;\n &lt;/dependency&gt;\n &lt;dependency&gt;\n  &lt;groupId&gt;jstl&lt;/groupId&gt;\n  &lt;artifactId&gt;jstl&lt;/artifactId&gt;\n  &lt;version&gt;1.2&lt;/version&gt;\n &lt;/dependency&gt;\n &lt;dependency&gt;\n  &lt;groupId&gt;taglibs&lt;/groupId&gt;\n  &lt;artifactId&gt;standard&lt;/artifactId&gt;\n  &lt;version&gt;1.1.2&lt;/version&gt;\n &lt;/dependency&gt;\n  &lt;/dependencies&gt;\n  &lt;build&gt;\n &lt;finalName&gt;favspringmvcrestful&lt;/finalName&gt;\n  &lt;/build&gt;\n&lt;/project&gt;\n</pre> \n <p> <span>（四）</span> <span> <span>在WEB-INF/web.xml，配置Spring MVC转发。</span> </span> </p> \n <pre class=\"brush:java;toolbar:false\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;web-app version=\"2.4\" xmlns=\"http://java.sun.com/xml/ns/j2ee\"\n xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n xsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee \n http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd\"&gt;\n &lt;display-name&gt;favspringmvcrestful&lt;/display-name&gt;\n &lt;filter&gt;\n  &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;\n  &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;\n  &lt;init-param&gt;\n   &lt;param-name&gt;encoding&lt;/param-name&gt;\n   &lt;param-value&gt;UTF-8&lt;/param-value&gt;\n  &lt;/init-param&gt;\n  &lt;init-param&gt;\n   &lt;param-name&gt;forceEncoding&lt;/param-name&gt;\n   &lt;param-value&gt;true&lt;/param-value&gt;\n  &lt;/init-param&gt;\n &lt;/filter&gt;\n &lt;filter-mapping&gt;\n  &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;\n  &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n &lt;/filter-mapping&gt;\n &lt;listener&gt;\n  &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;\n &lt;/listener&gt;\n &lt;servlet&gt;\n  &lt;servlet-name&gt;springMVC&lt;/servlet-name&gt;\n  &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;\n  &lt;init-param&gt;\n   &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n   &lt;param-value&gt;classpath*:spring-context.xml&lt;/param-value&gt;\n  &lt;/init-param&gt;\n  &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;\n &lt;/servlet&gt;\n &lt;servlet-mapping&gt;\n  &lt;servlet-name&gt;springMVC&lt;/servlet-name&gt;\n  &lt;url-pattern&gt;/&lt;/url-pattern&gt;\n &lt;/servlet-mapping&gt;\n&lt;/web-app&gt;\n</pre> \n <p> <span>（五）在resources目录下，创建</span> <span> <span>spring-context.xml，支持注解，页面路径解析等。</span> </span> </p> \n <pre class=\"brush:java;toolbar:false\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n xmlns:context=\"http://www.springframework.org/schema/context\"\n xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n  http://www.springframework.org/schema/context http://www.springframework.org/s ... ing-context-4.1.xsd\n  http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd\"&gt;\n &lt;context:component-scan base-package=\"com.favccxx.favsoft.favjson.controller\"&gt;&lt;/context:component-scan&gt;\n &lt;mvc:annotation-driven&gt;&lt;/mvc:annotation-driven&gt;\n &lt;bean id=\"viewResolver\" class=\"org.springframework.web.servlet.view.UrlBasedViewResolver\"&gt;\n  &lt;property name=\"viewClass\"\n   value=\"org.springframework.web.servlet.view.JstlView\" /&gt;\n  &lt;property name=\"prefix\" value=\"/WEB-INF/views\" /&gt;\n  &lt;property name=\"suffix\" value=\".jsp\" /&gt;\n &lt;/bean&gt;\n&lt;/beans&gt;\n</pre> \n <p> <span>（六）</span> <span> <span>新建HelloController类，使用注解完成Spring MVC类的调用。</span> </span> </p> \n <pre class=\"brush:java;toolbar:false\">package com.favccxx.favsoft.favjson.controller;\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.servlet.ModelAndView;\n@Controller\npublic class HelloController {\n    @RequestMapping(\"/greeting\")\n    public ModelAndView greeting(@RequestParam(value=\"name\", defaultValue=\"World\") String name) {\n     System.out.println(\"Hello \" + name);\n     Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();\n     map.put(\"userName\", name);\n     return new ModelAndView(\"/hello\",map);\n    }\n}\n</pre> \n <p> <span>（七）创建/WEB-INF/views/hello.jsp，用来展现数据。</span> </p> \n <pre class=\"brush:java;toolbar:false\">&lt;%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n pageEncoding=\"UTF-8\"%&gt;\n&lt;%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"&gt;\n&lt;title&gt;Hello&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n 你好，${userName }\n&lt;/body&gt;\n&lt;/html&gt;\n</pre> \n <p> <span>（八）在浏览器中，输入访问的URL：</span> <a target=\"_blank\" href=\"http://localhost:8080/favspringmvcrestful/greeting?name=%E7%BE%8E%E5%A5%B3\" rel=\"nofollow,noindex\"> <span> <span>http://localhost:8080/favspringmvcrestful/greeting?name=%E7%BE%8E%E5%A5%B3</span> </span> </a> <span>，运行效果如下：</span> </p> \n <p> <span> <span> <img class=\"alignCenter\" data-original=\"\" alt=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958857951.jpg\"> </span> </span> </p> \n</div>\n<p>转自：http://songlei8090.iteye.com/blog/2165151</p>','         Spring MVC作为SpringFrameWork的产品，自诞生之日，就受到广泛开发者的关注，如今Spring MVC在Java中的发展可谓是蒸蒸日上，如今如果再有开发者说，不了解Spring MVC，或许就被人笑掉大牙。煽情的话就不说了，先告诉大家如何搭建Spring MVC开发环境。       JDK 1.7   Eclipse Kepler   Apache Tomc......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:27:38',0,0,0,0,'http://www.fzqblog.top/upload/201608/1471958856518.jpg|http://www.fzqblog.top/upload/201608/1471958857951.jpg|',NULL,1),(356,1,6,'Java中怎样由枚举常量的ordinal值获得枚举常量对象','<div> \n <p>Java1.5提供了关键字enum，能够通过该关键字方便得定义自己须要的枚举类型，比方</p> \n <p>enum Season {</p> \n <p>SPRING, SUMMER, AUTUMN, WINTER</p> \n <p>}</p> \n <p>就定义了一个季节枚举类型。</p> \n <p>在本例中，对于Season.SPRING这个对象，Season.SPRING.name()能够得到该对象的字符串，即“SPRING”；反之，由Season.valueOf(“SPRING”)则能够得到该对象，即Season.SPRING。也就是说，使用name()方法和valueOf(String)方法能够在枚举类型对象和字符串之间方便得转换。当然，假设valueOf(String)方法的參数不是该枚举类型合法的字符串，则会抛出IllegalArgumentException异常。</p> \n <p> 对于枚举类型， <a target=\"_self\" href=\"#\" rel=\"nofollow,noindex\"> <span> <strong>Java</strong> </span> </a> 内部实际上还是转换为java.lang.Enum的子类，能够通过“javap -c Season”命令反编译来观察这一点。Enum类提供了一个ordinal()方法，用来返回枚举对象的序数，比方本例中SPRING, SUMMER, AUTUMN, WINTER的序数就分别为0, 1, 2, 3。在有些情况下，我们须要使用这个序数，并且还有可能再依据这个序数生成所须要的枚举对象，但是Enum并没有提供valueOf(int)这个方案，那是不是就做不到呢？ </p> \n <div>\n   对于这个问题，实际上能够利用枚举类型的values()方法间接的做到。values()方法返回一个枚举对象数组，比方本例就是Season[]，数组元素依照序数排列。在自己定义的枚举类型中，我们仅仅要定义自己的valueOf(int)方法，并返回该数组下标对象的对象就能够了。代码例如以下： \n  <pre class=\"brush:java;toolbar:false\">enum Season {\nSPRING, SUMMER, AUTUMN, WINTER;\npublic static Season valueOf(int ordinal) {\nif (ordinal &lt; 0 || ordinal &gt;= values().length) {\nthrow new IndexOutOfBoundsException(\"Invalid ordinal\");\n}\nreturn values()[ordinal];\n}\n}</pre> \n  <span>怎么样，还是挺简单的吧？</span> \n </div> \n</div>\n<p>转自：http://flycars001.iteye.com/blog/2164706</p>','  Java1.5提供了关键字enum，能够通过该关键字方便得定义自己须要的枚举类型，比方  enum Season {  SPRING, SUMMER, AUTUMN, WINTER  }  就定义了一个季节枚举类型。  在本例中，对于Season.SPRING这个对象，Season.SPRING.name()能够得到该对象的字符串，即“SPRING”；反之，由Season.valueOf(“S......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:27:38',0,2,0,0,'',NULL,1),(357,1,6,'spring+activemq - demo-2','<div> \n <p>一、序言</p> \n <p>JMS 相关的东西已经出来了很久，本想使用阿里的rocketMQ 发现很多没遵循JMS 规范，暂时就用用activeMq,做一些常用的系统解耦 协同工作，这里还是和spring 进行集成，spring 和JMS 配合还是挺好的。</p> \n <p>二、场景</p> \n <p>A系统产生了一笔订单，那么我们其他B C 系统会拿到订单的基本信息，然后进行金额的计算 以及 用户资料的分析 等等操作，以前的方法是 写个定时任务 扫描最新订单，但是实时性 就没那么高了，而且随着需求得越来越多，导致新进来一笔订单，就会有N个任务进行扫描 分析，扩展很死板，维护也麻烦。</p> \n <p>三、实例代码</p> \n <p>3.1 为了简单，到http://activemq.apache.org/download.html 下载activeMq 的东西，这里用的版本是5.10。</p> \n <p>3.2 暂时先用activemq 自带的服务器，测试先用P2P &nbsp;1对1 的方式 ，看看效果。</p> \n <p>spring xml 代码：</p> \n <pre class=\"brush:java;toolbar:false\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"\n  http://www.springframework.org/schema/beans\n  http://www.springframework.org/schema/beans/spring-beans-3.2.xsd\"&gt;\n &lt;!-- jms 连接工厂 --&gt;\n &lt;bean id=\"connectionFactory\" class=\"org.apache.activemq.spring.ActiveMQConnectionFactory\"&gt;\n  &lt;!-- TCP异步传输  --&gt;\n  &lt;property name=\"brokerURL\" value=\"tcp://localhost:61616?jms.useAsyncSend=true\" /&gt;\n &lt;/bean&gt;\n &lt;!-- 基本的bean模板 --&gt;\n &lt;bean id = \"jmsTemplate\" class = \"org.springframework.jms.core.JmsTemplate\"&gt;\n  &lt;!-- 链接工长 --&gt;\n  &lt;property name=\"connectionFactory\" ref=\"connectionFactory\"/&gt;\n  &lt;!-- 发送模式  DeliveryMode.NON_PERSISTENT=1:非持久 --&gt;\n  &lt;!-- DeliveryMode.PERSISTENT=2:持久--&gt;\n  &lt;property name=\"deliveryMode\" value=\"1\" /&gt;\n &lt;/bean&gt;\n &lt;!-- 队列的目的地描述 --&gt;\n &lt;bean id=\"queueDestination\" class=\"org.apache.activemq.command.ActiveMQQueue\"&gt;\n  &lt;!-- 通过 构造 设定 队列的名字 --&gt;\n  &lt;constructor-arg index=\"0\" value=\"orderQueue\"/&gt;\n &lt;/bean&gt;\n&lt;/beans&gt;\n</pre> \n <p>消息发送者代码：</p> \n <p>这里虚拟了一个订单类Order 表示一笔订单，和一个单独的线程Sender 进行消息发送，一共20条消息</p> \n <pre class=\"brush:java;toolbar:false\">import org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\nimport org.springframework.jms.core.JmsTemplate;\nimport org.springframework.jms.core.MessageCreator;\nimport javax.jms.*;\nimport java.io.Serializable;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n/**\n * Created by qiqiang on 2014/12/2.\n */\npublic class JmsPointSender {\n public static void main(String[] args) throws Exception {\n  ApplicationContext context = new ClassPathXmlApplicationContext(\"spring/spring-jms.xml\");\n  // 获得JMS 模板\n  JmsTemplate jmsTemplate = (JmsTemplate)context.getBean(\"jmsTemplate\");\n  // 获得发送消息的目的地\n  Destination destination = (Destination)context.getBean(\"queueDestination\");\n  // 这里模拟 单独另外的消息发送的线程\n  JmsSender sender = new JmsSender(jmsTemplate,destination);\n  ExecutorService service = Executors.newFixedThreadPool(1);\n  service.execute(sender);\n }\n}\n// 发送消息 的类\nclass   JmsSender implements Runnable{\n JmsTemplate jmsTemplate;\n Destination destination;\n JmsSender(JmsTemplate jmsTemplate, Destination destination) {\n  this.jmsTemplate = jmsTemplate;\n  this.destination = destination;\n }\n // 定义个消息发送的条数\n static int i = 0;\n @Override\n public void run() {\n  // 这里我们一秒发送一条消息的模式\n  for(;i&lt;20;i++){\n   // 发送消息\n   jmsTemplate.send(destination, new MessageCreator() {\n    // 这里的session 会有工厂自动创建\n    public Message createMessage(Session session) throws JMSException {\n     Order order = new Order(i, \"name\"+i);\n     // 消息分为很多种,有字符串 字节  对象等，这里我们使用对象\n     System.out.println(\"发送条数--------------------------\"+i);\n     return session.createObjectMessage(order);\n    }\n   });\n  }\n }\n}\n// 订单的属性\nclass  Order implements Serializable {\n private int id;\n private String name;\n Order(int id, String name) {\n  this.id = id;\n  this.name = name;\n }\n public Order(){}\n public int getId() {\n  return id;\n }\n public void setId(int id) {\n  this.id = id;\n }\n @Override\n public String toString() {\n  return \"Order{\" +\n    \"id=\" + id +\n    \", name=\'\" + name + \'\\\'\' +\n    \'}\';\n }\n}\n</pre> \n <p>消息接收者的 类</p> \n <pre class=\"brush:java;toolbar:false\">import org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\nimport org.springframework.jms.core.JmsTemplate;\nimport javax.jms.*;\n/**\n * Created by qiqiang on 2014/12/9.\n */\npublic class JmsReceiver {\n public static void main(String[] args) throws Exception {\n  ApplicationContext context = new ClassPathXmlApplicationContext(\"spring/spring-jms.xml\");\n  // 获得发送消息的目的地\n  Destination destination = (Destination)context.getBean(\"queueDestination\");\n  // 获得JMS 模板\n  JmsTemplate jmsTemplate = (JmsTemplate)context.getBean(\"jmsTemplate\");\n  int i = 0;\n  ObjectMessage message = null;\n  // 这里写个循环，一直接受消息到结束\n  while ( (message = (ObjectMessage)jmsTemplate.receive(destination)) != null){\n   System.out.println(\"收到消息条数:\"+i++  +\" \"+message.getObject());;\n  }\n }\n}\n</pre> \n <p>四、执行过程：</p> \n <p>1.解压我们下下来的activemq,然后在apache-activemq-5.1.0\\bin 目录下，windows 系统 直接运行activemq.bat，linux 应该有个activemq.sh &nbsp;的启动项，总之我先运行这个broker,这个东西我们可以认为是消息的一个存放中心，一个中转站.运行成功了 可以从http://localhost:8161/admin/queues.jsp &nbsp;地址提供的一个页面，里面有消息的信息。</p> \n <p> 2.执行JmsPointSender ，没出错的话，应该会看到消息发送了20条，并且在 <span>queues.jsp 里面能看到如下信息：orderQueue 是我们的</span> Destination，20 就是我们发送的消息数。 </p> \n <p> <img class=\"alignCenter\" data-original=\"\" alt=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958859197.jpg\"> </p> \n <p>3.启动JmsReceiver，就会看到消费了20条消息，上面的变化就看到0,1,20,20</p> \n <p>表示消费1个，发送20条，消费20条，还剩0条，消费过程就结束了</p> \n <p>五、Topic 订阅者消费模式</p> \n <p>刚才我们是1对1 的消费模式，肯定不是不满足我们得需求的， 我们需要一笔订单需要 N 个消费者去处理，因此改变如下：</p> \n <pre class=\"brush:java;toolbar:false\">&lt;!-- 消息订阅模式，在spring xml 里面加，这是发送的 Destination --&gt;\n    &lt;bean id=\"topicDestination\" class=\"org.apache.activemq.command.ActiveMQTopic\"&gt;\n        &lt;!-- 订阅消息的名字 --&gt;\n        &lt;constructor-arg index=\"0\" value=\"orderTopic\"/&gt;\n    &lt;/bean&gt;</pre> \n <p>由于这种属于发布订阅模式，因此消费者得一直监听，才能收到消息，我们先做一个消费者得监听器：</p> \n <pre class=\"brush:java;toolbar:false\">public class ConsumerMessageListener implements MessageListener {\n    @Override\n    public void onMessage(Message message) {\n        // 很简单，我们直接打印\n        System.out.println(\"topic 收到消息:\"+message);\n    }\n}</pre> \n <p>然后spring 里面同样要配置监听的情况，为了模拟发布者 和 消费在不同的服务器，我们做写两个xml 文件：spring-jms-consumer.xml，内容除了监听，连接服务器的东西都一样</p> \n <pre class=\"brush:java;toolbar:false\">&lt;!-- jms 连接工厂 --&gt;\n &lt;bean id=\"connectionFactory\" class=\"org.apache.activemq.spring.ActiveMQConnectionFactory\"&gt;\n  &lt;!-- Jvm 内部传输,暂时不用TCP，使用暂时异步传输  --&gt;\n  &lt;property name=\"brokerURL\" value=\"tcp://localhost:61616?jms.useAsyncSend=false\" /&gt;\n &lt;/bean&gt;\n &lt;bean id=\"cachingConnectionFactory\" class=\"org.springframework.jms.connection.CachingConnectionFactory\"&gt;\n  &lt;!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory --&gt;\n  &lt;property name=\"targetConnectionFactory\" ref=\"connectionFactory\"/&gt;\n &lt;/bean&gt;\n &lt;!-- 消息订阅模式 --&gt;\n &lt;bean id=\"topicDestination\" class=\"org.apache.activemq.command.ActiveMQTopic\"&gt;\n  &lt;!-- 订阅消息的名字 --&gt;\n  &lt;constructor-arg index=\"0\" value=\"orderTopic\"/&gt;\n &lt;/bean&gt;\n <strong>&lt;!-- 消息监听，这里可以认为是A服务器的监听，这里特殊 --&gt;</strong>\n &lt;bean id=\"messageListener\" class=\"com.xx.ConsumerMessageListener\"/&gt;\n &lt;bean id=\"listenerContainer\" class=\"org.springframework.jms.listener.SimpleMessageListenerContainer\"&gt;\n  &lt;!-- 工厂 目的地 监听器 这里如果用原始activemq 写，这些属性也是必要的 --&gt;\n  &lt;property name=\"connectionFactory\" ref=\"connectionFactory\" /&gt;\n  &lt;property name=\"destination\" ref=\"topicDestination\" /&gt;\n  &lt;property name=\"messageListener\" ref=\"messageListener\" /&gt;\n &lt;/bean&gt;\n</pre> \n <p>这里再看 发送者的代码</p> \n <pre class=\"brush:java;toolbar:false\">import org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\nimport org.springframework.jms.core.JmsTemplate;\nimport org.springframework.jms.core.MessageCreator;\nimport javax.jms.*;\nimport java.io.Serializable;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n/**\n * Created by qiqiang on 2014/12/9.\n */\npublic class JmsTopicSender {\n static int i = 1;\n public static void main(String[] args) throws Exception {\n  ApplicationContext context = new ClassPathXmlApplicationContext(\"spring/spring-jms.xml\");\n  // 获得JMS 模板，这里都差不多一样\n  JmsTemplate jmsTemplate = (JmsTemplate)context.getBean(\"jmsTemplate\");\n  // 获得发送消息的目的地\n  Destination destination = (Destination)context.getBean(\"topicDestination\");\n  // 发送消息\n  jmsTemplate.send( destination,new MessageCreator() {\n   public Message createMessage(Session session) throws JMSException {\n    Order order = new Order(i, \"name\"+i+\":\"+session);\n    System.out.println(\"发送条数--------------------------\"+i);\n    return session.createObjectMessage(order);\n   }\n  });\n }\n}\n</pre> \n <p>下面模拟是一个消费者的代码</p> \n <pre class=\"brush:java;toolbar:false\">import org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\nimport org.springframework.jms.core.JmsTemplate;\nimport javax.jms.Destination;\nimport javax.jms.Message;\nimport javax.jms.MessageListener;\nimport javax.jms.ObjectMessage;\n/**\n * Created by qiqiang on 2014/12/10.\n */\npublic class JmsTopicReceiver{\n public static void main(String[] args) throws Exception {\n  // 加载消费者监听\n  ApplicationContext context = new ClassPathXmlApplicationContext(\"spring/spring-jms-consumer.xml\");\n  // 写个死循环，模拟服务器一直运行\n  while (true){}\n }\n}\n</pre> \n <p> 最后先启动 消费者 <span>JmsTopicReceiver，然后再启动发送，这样模拟先监听 后发送的情况，如果先发送，而没监听 是收不到消息的。</span> </p> \n <p>小结：</p> \n <p>1.上面只是最基本的测试，有问题再说...</p> \n <p>2.关于queue 可以尝试下 发送10W跳数据看看会出现什么问题，也可以尝试下发送一半突然中断会出现什么问题？</p> \n <p>3.关于topic 模式，假设我发送者发送消息的时候，有一台消费者恰好重启或者挂掉怎么办？仅仅持久化吗？</p> \n <p>这些后面再解决！</p> \n</div>\n<p>转自：http://greemranqq.iteye.com/blog/2164636</p>','  一、序言  JMS 相关的东西已经出来了很久，本想使用阿里的rocketMQ 发现很多没遵循JMS 规范，暂时就用用activeMq,做一些常用的系统解耦 协同工作，这里还是和spring 进行集成，spring 和JMS 配合还是挺好的。  二、场景  A系统产生了一笔订单，那么我们其他B C 系统会拿到订单的基本信息，然后进行金额的计算 以及 用户资料的分析 等等操作，以前的方法是 写个定......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:27:39',0,0,0,0,'http://www.fzqblog.top/upload/201608/1471958859197.jpg|',NULL,1),(358,1,6,'Jetty 9.2.6 发布，轻量级 Servlet 容器','<div> \n <p> <a href=\"http://city.oschina.net/guangzhou/event/195924\" target=\"_blank\" rel=\"nofollow,noindex\">#广州# OSC源创会第31期（12月27日）开始报名，OSC自曝家丑！</a> </p> \n <p>Jetty 9.2.6 发布了，该版本改进记录包括：</p> \n <pre class=\"brush:java;toolbar:false\">jetty-9.2.6.v20141205 - 05 December 2014\n + 383207 Use BundleFileLocatorHelperFactory to obtain BundleFileLocatorHelper\n + 443652 Remove dependency on java.lang.management classes\n + 447472 Clear async context timeout on async static content\n + 451529 Change sentinel class for finding jstl on classpath to\n   org.apache.taglibs.standard.tag.rt.core.WhenTag\n + 451634 DefaultServlet: useFileMappedBuffer javadoc is misleading\n + 452188 Delay dispatch until content optimisation.\n + 452201 EnvConfiguration.destroy() should set the classloader\n + 452246 Fixed SSL hang on last chunk\n + 452261 Multiple servlets map to path *.jsp when using jsp-property-group\n + 452261 Ensure &lt;jsp-file&gt; works with new JettyJspServlet\n + 452424 Do not add Date header if already set\n + 452516 Make HttpOutput aggregation size configurable.\n + 453386 Jetty not working when configuring QueuedThreadPool with\n   minThreads=0.\n + 453629 Fixed big write test\n + 453793 _maxHeaderBytes&gt;0 is not verified in parseNext() when in\n   State.CLOSED.\n + 453801 Jetty does not check for already registered services when\n   bootstrapping\n + 454157 HttpInput.consumeAll spins if input is in async mode.</pre> \n <p> 下载地址： <a target=\"_blank\" href=\"http://download.eclipse.org/jetty/\" rel=\"nofollow,noindex\">http://download.eclipse.org/jetty/</a> </p> \n</div>\n<p>转自：http://www.oschina.net/news/57854/jetty-9-2-6</p>','   #广州# OSC源创会第31期（12月27日）开始报名，OSC自曝家丑！   Jetty 9.2.6 发布了，该版本改进记录包括：  jetty-9.2.6.v20141205 - 05 December 2014 + 383207 Use BundleFileLocatorHelperFactory to obtain BundleFileLocatorHelper + 443652 Re......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:27:40',0,0,0,0,'',NULL,1),(359,1,6,'使用 RMI + ZooKeeper 实现远程调用框架','<div> \n <p> 在 Java 世界里，有一种技术可以实现“跨虚拟机”的调用，它就是 <code class=\"prettyprint\">RMI （Remote Method Invocation，远程方法调用）。例如，服务A 在 JVM1 中运行，服务B 在 JVM2 中运行，服务A 与 服务B 可相互进行远程调用，就像调用本地方法一样，这就是 RMI。在分布式系统中，我们使用 RMI 技术可轻松将&nbsp; <code class=\"prettyprint\">服务提供者 （Service Provider）与&nbsp; <code class=\"prettyprint\">服务消费者 （Service Consumer）进行分离，充分体现组件之间的弱耦合，系统架构更易于扩展。 </code></code></code></p>\n <code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p>本文先从通过一个最简单的 RMI 服务与调用示例，让读者快速掌握 RMI 的使用方法，然后指出 RMI 的局限性，最后笔者对此问题提供了一种简单的解决方案，即使用 ZooKeeper 轻松解决 RMI 调用过程中所涉及的问题。</p> <p>下面我们就从一个最简单的 RMI 示例开始吧！</p> <h2>1 发布 RMI 服务</h2> <p>发布一个 RMI 服务，我们只需做三件事情：</p> \n    <ol> \n     <li>定义一个 RMI 接口</li> \n     <li>编写 RMI 接口的实现类</li> \n     <li>通过 JNDI 发布 RMI 服务</li> \n    </ol> <h2>1.1 定义一个 RMI 接口</h2> <p> RMI 接口实际上还是一个普通的 Java 接口，只是 RMI 接口必须继承 <code class=\"prettyprint\">java.rmi.Remote ，此外，每个 RMI 接口的方法必须声明抛出一个&nbsp; <code class=\"prettyprint\">java.rmi.RemoteException 异常，就像下面这样： </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> \n      <div> \n       <div> \n        <a href=\"http://my.oschina.net/huangyong/blog/345164\" rel=\"nofollow,noindex\">?</a> \n       </div> \n       <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"> \n        <tbody>\n         <tr> \n          <td> \n           <div>\n             1 \n           </div> \n           <div>\n             2 \n           </div> \n           <div>\n             3 \n           </div> \n           <div>\n             4 \n           </div> \n           <div>\n             5 \n           </div> \n           <div>\n             6 \n           </div> \n           <div>\n             7 \n           </div> \n           <div>\n             8 \n           </div> \n           <div>\n             9 \n           </div> </td> \n          <td> \n           <div> \n            <p> <code class=\"prettyprint\">package <code class=\"prettyprint\">demo.zookeeper.remoting.common; </code></code></p>\n            <code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">java.rmi.Remote; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">java.rmi.RemoteException; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">public <code class=\"prettyprint\">interface <code class=\"prettyprint\">HelloService <code class=\"prettyprint\">extends <code class=\"prettyprint\">Remote { </code></code></code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">String sayHello(String name) <code class=\"prettyprint\">throws <code class=\"prettyprint\">RemoteException; </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> </code></code></code></code></code></code></code></code></code></code></code></code></code>\n           </div><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> </code></code></code></td> \n         </tr> \n        </tbody>\n       </table> \n      </div> <p> 继承了 <code class=\"prettyprint\">Remote 接口，实际上是让 JVM 得知该接口是需要用于远程调用的，抛出了&nbsp; <code class=\"prettyprint\">RemoteException 是为了让调用 RMI 服务的程序捕获这个异常。毕竟远程调用过程中，什么奇怪的事情都会发生（比如：断网）。需要说明的是，RemoteException 是一个“受检异常”，在调用的时候必须使用&nbsp; <code class=\"prettyprint\">try...catch... 自行处理。 </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <h2>1.2 编写 RMI 接口的实现类</h2> <p> 实现以上的 <code class=\"prettyprint\">HelloService 是一件非常简单的事情，但需要注意的是，我们必须让实现类继承&nbsp; <code class=\"prettyprint\">java.rmi.server.UnicastRemoteObject 类，此外，必须提供一个构造器，并且构造器必须抛出&nbsp; <code class=\"prettyprint\">java.rmi.RemoteException 异常。我们既然使用 JVM 提供的这套 RMI 框架，那么就必须按照这个要求来实现，否则是无法成功发布 RMI 服务的，一句话：我们得按规矩出牌！ </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> \n            <div> \n             <div> \n              <a href=\"http://my.oschina.net/huangyong/blog/345164\" rel=\"nofollow,noindex\">?</a> \n             </div> \n             <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"> \n              <tbody>\n               <tr> \n                <td> \n                 <div>\n                   1 \n                 </div> \n                 <div>\n                   2 \n                 </div> \n                 <div>\n                   3 \n                 </div> \n                 <div>\n                   4 \n                 </div> \n                 <div>\n                   5 \n                 </div> \n                 <div>\n                   6 \n                 </div> \n                 <div>\n                   7 \n                 </div> \n                 <div>\n                   8 \n                 </div> \n                 <div>\n                   9 \n                 </div> \n                 <div>\n                   10 \n                 </div> \n                 <div>\n                   11 \n                 </div> \n                 <div>\n                   12 \n                 </div> \n                 <div>\n                   13 \n                 </div> \n                 <div>\n                   14 \n                 </div> \n                 <div>\n                   15 \n                 </div> \n                 <div>\n                   16 \n                 </div> </td> \n                <td> \n                 <div> \n                  <p> <code class=\"prettyprint\">package <code class=\"prettyprint\">demo.zookeeper.remoting.server; </code></code></p>\n                  <code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">demo.zookeeper.remoting.common.HelloService; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">java.rmi.RemoteException; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">java.rmi.server.UnicastRemoteObject; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">public <code class=\"prettyprint\">class <code class=\"prettyprint\">HelloServiceImpl <code class=\"prettyprint\">extends <code class=\"prettyprint\">UnicastRemoteObject <code class=\"prettyprint\">implements <code class=\"prettyprint\">HelloService { </code></code></code></code></code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">protected <code class=\"prettyprint\">HelloServiceImpl() <code class=\"prettyprint\">throws <code class=\"prettyprint\">RemoteException { </code></code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">@Override </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">public <code class=\"prettyprint\">String sayHello(String name) <code class=\"prettyprint\">throws <code class=\"prettyprint\">RemoteException { </code></code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">return <code class=\"prettyprint\">String.format( <code class=\"prettyprint\">\"Hello %s\" <code class=\"prettyprint\">, name); </code></code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> </code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code>\n                 </div><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> </code></code></code></td> \n               </tr> \n              </tbody>\n             </table> \n            </div> <p> 为了满足 RMI 框架的要求，我们确实做了很多额外的工作（继承了 <code class=\"prettyprint\">UnicastRemoteObject 类，抛出了&nbsp; <code class=\"prettyprint\">RemoteException 异常），但这些工作阻止不了我们发布 RMI 服务的决心！我们可以通过 JVM 提供的 JNDI（Java Naming and Directory Interface，Java 命名与目录接口）这个 API 轻松发布 RMI 服务。 </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <h2>1.3 通过 JNDI 发布 RMI 服务</h2> <p>发布 RMI 服务，我们需要告诉 JNDI 三个基本信息：1. 域名或 IP 地址（host）、2. 端口号（port）、3. 服务名（service），它们构成了 RMI 协议的 URL（或称为“RMI 地址”）：</p> \n              <div> \n               <div> \n                <a href=\"http://my.oschina.net/huangyong/blog/345164\" rel=\"nofollow,noindex\">?</a> \n               </div> \n               <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"> \n                <tbody>\n                 <tr> \n                  <td> \n                   <div>\n                     1 \n                   </div> </td> \n                  <td> <p> <code class=\"prettyprint\">rmi: <code class=\"prettyprint\">//&lt;host&gt;:&lt;port&gt;/&lt;service&gt; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> </code></code></td> \n                 </tr> \n                </tbody>\n               </table> \n              </div> <p> 如果我们是在本地发布 RMI 服务，那么 <code class=\"prettyprint\">host 就是“localhost”。此外，RMI 默认的&nbsp; <code class=\"prettyprint\">port 是“1099”，我们也可以自行设置 port 的值（只要不与其它端口冲突即可）。 <code class=\"prettyprint\">service 实际上是一个基于同一 host 与 port 下唯一的服务名，我们不妨使用 Java 完全类名来表示吧，这样也比较容易保证 RMI 地址的唯一性。 </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p>对于我们的示例而言，RMI 地址为：</p> \n                 <div> \n                  <div> \n                   <a href=\"http://my.oschina.net/huangyong/blog/345164\" rel=\"nofollow,noindex\">?</a> \n                  </div> \n                  <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"> \n                   <tbody>\n                    <tr> \n                     <td> \n                      <div>\n                        1 \n                      </div> </td> \n                     <td> <p> <code class=\"prettyprint\">rmi: <code class=\"prettyprint\">//localhost:1099/demo.zookeeper.remoting.server.HelloServiceImpl </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> </code></code></td> \n                    </tr> \n                   </tbody>\n                  </table> \n                 </div> <p>我们只需简单提供一个 main() 方法就能发布 RMI 服务，就像下面这样：</p> \n                 <div> \n                  <div> \n                   <a href=\"http://my.oschina.net/huangyong/blog/345164\" rel=\"nofollow,noindex\">?</a> \n                  </div> \n                  <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"> \n                   <tbody>\n                    <tr> \n                     <td> \n                      <div>\n                        1 \n                      </div> \n                      <div>\n                        2 \n                      </div> \n                      <div>\n                        3 \n                      </div> \n                      <div>\n                        4 \n                      </div> \n                      <div>\n                        5 \n                      </div> \n                      <div>\n                        6 \n                      </div> \n                      <div>\n                        7 \n                      </div> \n                      <div>\n                        8 \n                      </div> \n                      <div>\n                        9 \n                      </div> \n                      <div>\n                        10 \n                      </div> \n                      <div>\n                        11 \n                      </div> \n                      <div>\n                        12 \n                      </div> \n                      <div>\n                        13 \n                      </div> \n                      <div>\n                        14 \n                      </div> </td> \n                     <td> \n                      <div> \n                       <p> <code class=\"prettyprint\">package <code class=\"prettyprint\">demo.zookeeper.remoting.server; </code></code></p>\n                       <code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">java.rmi.Naming; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">java.rmi.registry.LocateRegistry; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">public <code class=\"prettyprint\">class <code class=\"prettyprint\">RmiServer { </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">public <code class=\"prettyprint\">static <code class=\"prettyprint\">void <code class=\"prettyprint\">main(String[] args) <code class=\"prettyprint\">throws <code class=\"prettyprint\">Exception { </code></code></code></code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">int <code class=\"prettyprint\">port = <code class=\"prettyprint\">; </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">String url = <code class=\"prettyprint\">\"rmi://localhost:1099/demo.zookeeper.remoting.server.HelloServiceImpl\" <code class=\"prettyprint\">; </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">LocateRegistry.createRegistry(port); </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">Naming.rebind(url, <code class=\"prettyprint\">new <code class=\"prettyprint\">HelloServiceImpl()); </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> </code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code>\n                      </div><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> </code></code></code></td> \n                    </tr> \n                   </tbody>\n                  </table> \n                 </div> <p> 需要注意的是，我们通过 <code class=\"prettyprint\">LocateRegistry.createRegistry() 方法在 JNDI 中创建一个注册表，只需提供一个 RMI 端口号即可。此外，通过&nbsp; <code class=\"prettyprint\">Naming.rebind() 方法绑定 RMI 地址与 RMI 服务实现类，这里使用了&nbsp; <code class=\"prettyprint\">rebind() 方法，它相当于先后调用 Naming 的&nbsp; <code class=\"prettyprint\">unbind() 与&nbsp; <code class=\"prettyprint\">bind() 方法，只是使用 rebind() 方法来得更加痛快而已，所以我们选择了它。 </code></code></code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p>运行这个 main() 方法，RMI 服务就会自动发布，剩下要做的就是写一个 RMI 客户端来调用已发布的 RMI 服务。</p> <h2>2 调用 RMI 服务</h2> <p>同样我们也使用一个 main() 方法来调用 RMI 服务，相比发布而言，调用会更加简单，我们只需要知道两个东西：1. RMI 请求路径、2. RMI 接口（一定不需要 RMI 实现类，否则就是本地调用了）。数行代码就能调用刚才发布的 RMI 服务，就像下面这样：</p> \n                    <div> \n                     <div> \n                      <a href=\"http://my.oschina.net/huangyong/blog/345164\" rel=\"nofollow,noindex\">?</a> \n                     </div> \n                     <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"> \n                      <tbody>\n                       <tr> \n                        <td> \n                         <div>\n                           1 \n                         </div> \n                         <div>\n                           2 \n                         </div> \n                         <div>\n                           3 \n                         </div> \n                         <div>\n                           4 \n                         </div> \n                         <div>\n                           5 \n                         </div> \n                         <div>\n                           6 \n                         </div> \n                         <div>\n                           7 \n                         </div> \n                         <div>\n                           8 \n                         </div> \n                         <div>\n                           9 \n                         </div> \n                         <div>\n                           10 \n                         </div> \n                         <div>\n                           11 \n                         </div> \n                         <div>\n                           12 \n                         </div> \n                         <div>\n                           13 \n                         </div> \n                         <div>\n                           14 \n                         </div> </td> \n                        <td> \n                         <div> \n                          <p> <code class=\"prettyprint\">package <code class=\"prettyprint\">demo.zookeeper.remoting.client; </code></code></p>\n                          <code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">demo.zookeeper.remoting.common.HelloService; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">java.rmi.Naming; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">public <code class=\"prettyprint\">class <code class=\"prettyprint\">RmiClient { </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">public <code class=\"prettyprint\">static <code class=\"prettyprint\">void <code class=\"prettyprint\">main(String[] args) <code class=\"prettyprint\">throws <code class=\"prettyprint\">Exception { </code></code></code></code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">String url = <code class=\"prettyprint\">\"rmi://localhost:1099/demo.zookeeper.remoting.server.HelloServiceImpl\" <code class=\"prettyprint\">; </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">HelloService helloService = (HelloService) Naming.lookup(url); </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">String result = helloService.sayHello( <code class=\"prettyprint\">\"Jack\" <code class=\"prettyprint\">); </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">System.out.println(result); </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> </code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code>\n                         </div><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> </code></code></code></td> \n                       </tr> \n                      </tbody>\n                     </table> \n                    </div> <p>当我们运行以上 main() 方法，在控制台中看到“Hello Jack”输出，就表明 RMI 调用成功。</p> <h2>3 RMI 服务的局限性</h2> <p> 可见，借助 JNDI 这个所谓的命名与目录服务，我们成功地发布并调用了 RMI 服务。实际上，JNDI 就是一个注册表，服务端将服务对象放入到注册表中，客户端从注册表中获取服务对象。在服务端我们发布了 RMI 服务，并在 JNDI 中进行了注册，此时就在服务端创建了一个 <code class=\"prettyprint\">Skeleton （骨架），当客户端第一次成功连接 JNDI 并获取远程服务对象后，立马就在本地创建了一个&nbsp; <code class=\"prettyprint\">Stub （存根），远程通信实际上是通过 Skeleton 与 Stub 来完成的，数据是基于 TCP/IP 协议，在“传输层”上发送的。毋庸置疑，理论上 RMI 一定比 WebService 要快，毕竟 WebService 是基于 HTTP 的，而 HTTP 所携带的数据是通过“应用层”来传输的，传输层较应用层更为底层，越底层越快。 </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p>既然 RMI 比 WebService 快，使用起来也方便，那么为什么我们有时候还要用 WebService 呢？</p> <p>其实原因很简单，WebService 可以实现跨语言系统之间的调用，而 RMI 只能实现 Java 系统之间的调用。也就是说，RMI 的跨平台性不如 WebService 好，假如我们的系统都是用 Java 开发的，那么当然首选就是 RMI 服务了。</p> <p>貌似 RMI 确实挺优秀的，除了不能跨平台以外，还有那些问题呢？</p> <p>笔者认为有两点局限性：</p> \n                      <ol> \n                       <li>RMI 使用了 Java 默认的序列化方式，对于性能要求比较高的系统，可能需要使用其它序列化方案来解决（例如：Protobuf）。</li> \n                       <li>RMI 服务在运行时难免会存在出故障，例如，如果 RMI 服务无法连接了，就会导致客户端无法响应的现象。</li> \n                      </ol> <p>在一般的情况下，Java 默认的序列化方式确实已经足以满足我们的要求了，如果性能方面如果不是问题的话，我们需要解决的实际上是第二点，也就是说，让使系统具备 HA（High Availability，高可用性）。</p> <h2>4 使用 ZooKeeper 提供高可用的 RMI 服务</h2> <p>ZooKeeper 是 Hadoop 的一个子项目，用于解决分布式系统之间的数据一致性问题。如果读者尚不了解 ZooKeeper 的工作原理与使用方法，可以通过以下链接来了解：</p> \n                      <ul> \n                       <li> <a href=\"http://zookeeper.apache.org/\" rel=\"nofollow,noindex\">ZooKeeper 官网</a> </li> \n                       <li> <a href=\"https://www.ibm.com/developerworks/cn/opensource/os-cn-zookeeper/\" rel=\"nofollow,noindex\">分布式服务框架 ZooKeeper – 管理分布式环境中的数据</a> </li> \n                      </ul> <p> </p> <p>本文假设读者已经对 ZooKeeper 有一定了解的前提下，对 RMI 的高可用性问题提供一个简单的解决方案。</p> <p> 要想解决 RMI 服务的高可用性问题，我们需要利用 ZooKeeper 充当一个 <code class=\"prettyprint\">服务注册表 （Service Registry），让多个&nbsp; <code class=\"prettyprint\">服务提供者 （Service Provider）形成一个集群，让&nbsp; <code class=\"prettyprint\">服务消费者 （Service Consumer）通过服务注册表获取具体的服务访问地址（也就是 RMI 服务地址）去访问具体的服务提供者。如下图所示： </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <img alt=\"服务注册表\" class=\"alignCenter\" data-original=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958862343.jpg\"> </p> <p>需要注意的是，服务注册表并不是 Load Balancer（负载均衡器），提供的不是“反向代理”服务，而是“服务注册”与“心跳检测”功能。</p> <p>利用服务注册表来注册 RMI 地址，这个很好理解，那么“心跳检测”又如何理解呢？说白了就是通过服务中心定时向各个服务提供者发送一个请求（实际上建立的是一个 Socket 长连接），如果长期没有响应，服务中心就认为该服务提供者已经“挂了”，只会从还“活着”的服务提供者中选出一个做为当前的服务提供者。</p> <p>也许读者会考虑到，服务中心可能会出现单点故障，如果服务注册表都坏掉了，整个系统也就瘫痪了。看来要想实现这个架构，必须保证服务中心也具备高可用性。</p> <p>ZooKeeper 正好能够满足我们上面提到的所有需求。</p> \n                         <ol> \n                          <li>使用 ZooKeeper 的临时性 ZNode 来存放服务提供者的 RMI 地址，一旦与服务提供者的 Session 中断，会自动清除相应的 ZNode。</li> \n                          <li>让服务消费者去监听这些 ZNode，一旦发现 ZNode 的数据（RMI 地址）有变化，就会重新获取一份有效数据的拷贝。</li> \n                          <li>ZooKeeper 与生俱来的集群能力（例如：数据同步与领导选举特性），可以确保服务注册表的高可用性。</li> \n                         </ol> <h2>4.1 服务提供者</h2> <p> 需要编写一个 <code class=\"prettyprint\">ServiceProvider 类，来发布 RMI 服务，并将 RMI 地址注册到 ZooKeeper 中（实际存放在 ZNode 上）。 </code></p><code class=\"prettyprint\"> \n                          <div> \n                           <div> \n                            <a href=\"http://my.oschina.net/huangyong/blog/345164\" rel=\"nofollow,noindex\">?</a> \n                           </div> \n                           <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"> \n                            <tbody>\n                             <tr> \n                              <td> \n                               <div>\n                                 1 \n                               </div> \n                               <div>\n                                 2 \n                               </div> \n                               <div>\n                                 3 \n                               </div> \n                               <div>\n                                 4 \n                               </div> \n                               <div>\n                                 5 \n                               </div> \n                               <div>\n                                 6 \n                               </div> \n                               <div>\n                                 7 \n                               </div> \n                               <div>\n                                 8 \n                               </div> \n                               <div>\n                                 9 \n                               </div> \n                               <div>\n                                 10 \n                               </div> \n                               <div>\n                                 11 \n                               </div> \n                               <div>\n                                 12 \n                               </div> \n                               <div>\n                                 13 \n                               </div> \n                               <div>\n                                 14 \n                               </div> \n                               <div>\n                                 15 \n                               </div> \n                               <div>\n                                 16 \n                               </div> \n                               <div>\n                                 17 \n                               </div> \n                               <div>\n                                 18 \n                               </div> \n                               <div>\n                                 19 \n                               </div> \n                               <div>\n                                 20 \n                               </div> \n                               <div>\n                                 21 \n                               </div> \n                               <div>\n                                 22 \n                               </div> \n                               <div>\n                                 23 \n                               </div> \n                               <div>\n                                 24 \n                               </div> \n                               <div>\n                                 25 \n                               </div> \n                               <div>\n                                 26 \n                               </div> \n                               <div>\n                                 27 \n                               </div> \n                               <div>\n                                 28 \n                               </div> \n                               <div>\n                                 29 \n                               </div> \n                               <div>\n                                 30 \n                               </div> \n                               <div>\n                                 31 \n                               </div> \n                               <div>\n                                 32 \n                               </div> \n                               <div>\n                                 33 \n                               </div> \n                               <div>\n                                 34 \n                               </div> \n                               <div>\n                                 35 \n                               </div> \n                               <div>\n                                 36 \n                               </div> \n                               <div>\n                                 37 \n                               </div> \n                               <div>\n                                 38 \n                               </div> \n                               <div>\n                                 39 \n                               </div> \n                               <div>\n                                 40 \n                               </div> \n                               <div>\n                                 41 \n                               </div> \n                               <div>\n                                 42 \n                               </div> \n                               <div>\n                                 43 \n                               </div> \n                               <div>\n                                 44 \n                               </div> \n                               <div>\n                                 45 \n                               </div> \n                               <div>\n                                 46 \n                               </div> \n                               <div>\n                                 47 \n                               </div> \n                               <div>\n                                 48 \n                               </div> \n                               <div>\n                                 49 \n                               </div> \n                               <div>\n                                 50 \n                               </div> \n                               <div>\n                                 51 \n                               </div> \n                               <div>\n                                 52 \n                               </div> \n                               <div>\n                                 53 \n                               </div> \n                               <div>\n                                 54 \n                               </div> \n                               <div>\n                                 55 \n                               </div> \n                               <div>\n                                 56 \n                               </div> \n                               <div>\n                                 57 \n                               </div> \n                               <div>\n                                 58 \n                               </div> \n                               <div>\n                                 59 \n                               </div> \n                               <div>\n                                 60 \n                               </div> \n                               <div>\n                                 61 \n                               </div> \n                               <div>\n                                 62 \n                               </div> \n                               <div>\n                                 63 \n                               </div> \n                               <div>\n                                 64 \n                               </div> \n                               <div>\n                                 65 \n                               </div> \n                               <div>\n                                 66 \n                               </div> \n                               <div>\n                                 67 \n                               </div> \n                               <div>\n                                 68 \n                               </div> \n                               <div>\n                                 69 \n                               </div> \n                               <div>\n                                 70 \n                               </div> \n                               <div>\n                                 71 \n                               </div> \n                               <div>\n                                 72 \n                               </div> \n                               <div>\n                                 73 \n                               </div> \n                               <div>\n                                 74 \n                               </div> \n                               <div>\n                                 75 \n                               </div> \n                               <div>\n                                 76 \n                               </div> \n                               <div>\n                                 77 \n                               </div> \n                               <div>\n                                 78 \n                               </div> \n                               <div>\n                                 79 \n                               </div> \n                               <div>\n                                 80 \n                               </div> \n                               <div>\n                                 81 \n                               </div> </td> \n                              <td> \n                               <div> \n                                <p> <code class=\"prettyprint\">package <code class=\"prettyprint\">demo.zookeeper.remoting.server; </code></code></p>\n                                <code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">demo.zookeeper.remoting.common.Constant; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">java.io.IOException; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">java.net.MalformedURLException; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">java.rmi.Naming; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">java.rmi.Remote; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">java.rmi.RemoteException; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">java.rmi.registry.LocateRegistry; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">java.util.concurrent.CountDownLatch; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">org.apache.zookeeper.CreateMode; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">org.apache.zookeeper.KeeperException; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">org.apache.zookeeper.WatchedEvent; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">org.apache.zookeeper.Watcher; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">org.apache.zookeeper.ZooDefs; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">org.apache.zookeeper.ZooKeeper; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">org.slf4j.Logger; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">org.slf4j.LoggerFactory; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">public <code class=\"prettyprint\">class <code class=\"prettyprint\">ServiceProvider { </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">private <code class=\"prettyprint\">static <code class=\"prettyprint\">final <code class=\"prettyprint\">Logger LOGGER = LoggerFactory.getLogger(ServiceProvider. <code class=\"prettyprint\">class <code class=\"prettyprint\">); </code></code></code></code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">// 用于等待 SyncConnected 事件触发后继续执行当前线程 </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">private <code class=\"prettyprint\">CountDownLatch latch = <code class=\"prettyprint\">new <code class=\"prettyprint\">CountDownLatch( <code class=\"prettyprint\">); </code></code></code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">// 发布 RMI 服务并注册 RMI 地址到 ZooKeeper 中 </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">public <code class=\"prettyprint\">void <code class=\"prettyprint\">publish(Remote remote, String host, <code class=\"prettyprint\">int <code class=\"prettyprint\">port) { </code></code></code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">String url = publishService(remote, host, port); <code class=\"prettyprint\">// 发布 RMI 服务并返回 RMI 地址 </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">if <code class=\"prettyprint\">(url != <code class=\"prettyprint\">null <code class=\"prettyprint\">) { </code></code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">ZooKeeper zk = connectServer(); <code class=\"prettyprint\">// 连接 ZooKeeper 服务器并获取 ZooKeeper 对象 </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">if <code class=\"prettyprint\">(zk != <code class=\"prettyprint\">null <code class=\"prettyprint\">) { </code></code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">createNode(zk, url); <code class=\"prettyprint\">// 创建 ZNode 并将 RMI 地址放入 ZNode 上 </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">// 发布 RMI 服务 </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">private <code class=\"prettyprint\">String publishService(Remote remote, String host, <code class=\"prettyprint\">int <code class=\"prettyprint\">port) { </code></code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">String url = <code class=\"prettyprint\">null <code class=\"prettyprint\">; </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">try <code class=\"prettyprint\">{ </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">url = String.format( <code class=\"prettyprint\">\"rmi://%s:%d/%s\" <code class=\"prettyprint\">, host, port, remote.getClass().getName()); </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">LocateRegistry.createRegistry(port); </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">Naming.rebind(url, remote); </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">LOGGER.debug( <code class=\"prettyprint\">\"publish rmi service (url: {})\" <code class=\"prettyprint\">, url); </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} <code class=\"prettyprint\">catch <code class=\"prettyprint\">(RemoteException | MalformedURLException e) { </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">LOGGER.error( <code class=\"prettyprint\">\"\" <code class=\"prettyprint\">, e); </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">return <code class=\"prettyprint\">url; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">// 连接 ZooKeeper 服务器 </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">private <code class=\"prettyprint\">ZooKeeper connectServer() { </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">ZooKeeper zk = <code class=\"prettyprint\">null <code class=\"prettyprint\">; </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">try <code class=\"prettyprint\">{ </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">zk = <code class=\"prettyprint\">new <code class=\"prettyprint\">ZooKeeper(Constant.ZK_CONNECTION_STRING, Constant.ZK_SESSION_TIMEOUT, <code class=\"prettyprint\">new <code class=\"prettyprint\">Watcher() { </code></code></code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">@Override </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">public <code class=\"prettyprint\">void <code class=\"prettyprint\">process(WatchedEvent event) { </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">if <code class=\"prettyprint\">(event.getState() == Event.KeeperState.SyncConnected) { </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">latch.countDown(); <code class=\"prettyprint\">// 唤醒当前正在执行的线程 </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">}); </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">latch.await(); <code class=\"prettyprint\">// 使当前线程处于等待状态 </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} <code class=\"prettyprint\">catch <code class=\"prettyprint\">(IOException | InterruptedException e) { </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">LOGGER.error( <code class=\"prettyprint\">\"\" <code class=\"prettyprint\">, e); </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">return <code class=\"prettyprint\">zk; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">// 创建 ZNode </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">private <code class=\"prettyprint\">void <code class=\"prettyprint\">createNode(ZooKeeper zk, String url) { </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">try <code class=\"prettyprint\">{ </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">byte <code class=\"prettyprint\">[] data = url.getBytes(); </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">String path = zk.create(Constant.ZK_PROVIDER_PATH, data, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL); <code class=\"prettyprint\">// 创建一个临时性且有序的 ZNode </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">LOGGER.debug( <code class=\"prettyprint\">\"create zookeeper node ({} =&gt; {})\" <code class=\"prettyprint\">, path, url); </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} <code class=\"prettyprint\">catch <code class=\"prettyprint\">(KeeperException | InterruptedException e) { </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">LOGGER.error( <code class=\"prettyprint\">\"\" <code class=\"prettyprint\">, e); </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> </code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code>\n                               </div><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> </code></code></code></td> \n                             </tr> \n                            </tbody>\n                           </table> \n                          </div> <p> 涉及到的 <code class=\"prettyprint\">Constant 常量，见如下代码： </code></p><code class=\"prettyprint\"> \n                           <div> \n                            <div> \n                             <a href=\"http://my.oschina.net/huangyong/blog/345164\" rel=\"nofollow,noindex\">?</a> \n                            </div> \n                            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"> \n                             <tbody>\n                              <tr> \n                               <td> \n                                <div>\n                                  1 \n                                </div> \n                                <div>\n                                  2 \n                                </div> \n                                <div>\n                                  3 \n                                </div> \n                                <div>\n                                  4 \n                                </div> \n                                <div>\n                                  5 \n                                </div> \n                                <div>\n                                  6 \n                                </div> \n                                <div>\n                                  7 \n                                </div> \n                                <div>\n                                  8 \n                                </div> \n                                <div>\n                                  9 \n                                </div> </td> \n                               <td> \n                                <div> \n                                 <p> <code class=\"prettyprint\">package <code class=\"prettyprint\">demo.zookeeper.remoting.common; </code></code></p>\n                                 <code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">public <code class=\"prettyprint\">interface <code class=\"prettyprint\">Constant { </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">String ZK_CONNECTION_STRING = <code class=\"prettyprint\">\"localhost:2181\" <code class=\"prettyprint\">; </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">int <code class=\"prettyprint\">ZK_SESSION_TIMEOUT = <code class=\"prettyprint\">; </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">String ZK_REGISTRY_PATH = <code class=\"prettyprint\">\"/registry\" <code class=\"prettyprint\">; </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">String ZK_PROVIDER_PATH = ZK_REGISTRY_PATH + <code class=\"prettyprint\">\"/provider\" <code class=\"prettyprint\">; </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> </code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code>\n                                </div><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> </code></code></code></td> \n                              </tr> \n                             </tbody>\n                            </table> \n                           </div> <p>注意：我们首先需要使用 ZooKeeper 的客户端工具创建一个持久性 ZNode，名为“/registry”，该节点是不存放任何数据的，可使用如下命令：</p> \n                           <div> \n                            <div> \n                             <a href=\"http://my.oschina.net/huangyong/blog/345164\" rel=\"nofollow,noindex\">?</a> \n                            </div> \n                            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"> \n                             <tbody>\n                              <tr> \n                               <td> \n                                <div>\n                                  1 \n                                </div> </td> \n                               <td> <p> <code class=\"prettyprint\">create /registry <code class=\"prettyprint\">null </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> </code></code></td> \n                              </tr> \n                             </tbody>\n                            </table> \n                           </div> <h2>4.2 服务消费者</h2> <p> 服务消费者需要在创建的时候连接 ZooKeeper，同时监听 <code class=\"prettyprint\">/registry 节点的&nbsp; <code class=\"prettyprint\">NodeChildrenChanged 事件，也就是说，一旦该节点的子节点有变化，就需要重新获取最新的子节点。这里提到的子节点，就是存放服务提供者发布的 RMI 地址。需要强调的是，这些子节点都是临时性的，当服务提供者与 ZooKeeper 服务注册表的 Session 中断后，该临时性节会被自动删除。 </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> \n                             <div> \n                              <div> \n                               <a href=\"http://my.oschina.net/huangyong/blog/345164\" rel=\"nofollow,noindex\">?</a> \n                              </div> \n                              <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"> \n                               <tbody>\n                                <tr> \n                                 <td> \n                                  <div>\n                                    1 \n                                  </div> \n                                  <div>\n                                    2 \n                                  </div> \n                                  <div>\n                                    3 \n                                  </div> \n                                  <div>\n                                    4 \n                                  </div> \n                                  <div>\n                                    5 \n                                  </div> \n                                  <div>\n                                    6 \n                                  </div> \n                                  <div>\n                                    7 \n                                  </div> \n                                  <div>\n                                    8 \n                                  </div> \n                                  <div>\n                                    9 \n                                  </div> \n                                  <div>\n                                    10 \n                                  </div> \n                                  <div>\n                                    11 \n                                  </div> \n                                  <div>\n                                    12 \n                                  </div> \n                                  <div>\n                                    13 \n                                  </div> \n                                  <div>\n                                    14 \n                                  </div> \n                                  <div>\n                                    15 \n                                  </div> \n                                  <div>\n                                    16 \n                                  </div> \n                                  <div>\n                                    17 \n                                  </div> \n                                  <div>\n                                    18 \n                                  </div> \n                                  <div>\n                                    19 \n                                  </div> \n                                  <div>\n                                    20 \n                                  </div> \n                                  <div>\n                                    21 \n                                  </div> \n                                  <div>\n                                    22 \n                                  </div> \n                                  <div>\n                                    23 \n                                  </div> \n                                  <div>\n                                    24 \n                                  </div> \n                                  <div>\n                                    25 \n                                  </div> \n                                  <div>\n                                    26 \n                                  </div> \n                                  <div>\n                                    27 \n                                  </div> \n                                  <div>\n                                    28 \n                                  </div> \n                                  <div>\n                                    29 \n                                  </div> \n                                  <div>\n                                    30 \n                                  </div> \n                                  <div>\n                                    31 \n                                  </div> \n                                  <div>\n                                    32 \n                                  </div> \n                                  <div>\n                                    33 \n                                  </div> \n                                  <div>\n                                    34 \n                                  </div> \n                                  <div>\n                                    35 \n                                  </div> \n                                  <div>\n                                    36 \n                                  </div> \n                                  <div>\n                                    37 \n                                  </div> \n                                  <div>\n                                    38 \n                                  </div> \n                                  <div>\n                                    39 \n                                  </div> \n                                  <div>\n                                    40 \n                                  </div> \n                                  <div>\n                                    41 \n                                  </div> \n                                  <div>\n                                    42 \n                                  </div> \n                                  <div>\n                                    43 \n                                  </div> \n                                  <div>\n                                    44 \n                                  </div> \n                                  <div>\n                                    45 \n                                  </div> \n                                  <div>\n                                    46 \n                                  </div> \n                                  <div>\n                                    47 \n                                  </div> \n                                  <div>\n                                    48 \n                                  </div> \n                                  <div>\n                                    49 \n                                  </div> \n                                  <div>\n                                    50 \n                                  </div> \n                                  <div>\n                                    51 \n                                  </div> \n                                  <div>\n                                    52 \n                                  </div> \n                                  <div>\n                                    53 \n                                  </div> \n                                  <div>\n                                    54 \n                                  </div> \n                                  <div>\n                                    55 \n                                  </div> \n                                  <div>\n                                    56 \n                                  </div> \n                                  <div>\n                                    57 \n                                  </div> \n                                  <div>\n                                    58 \n                                  </div> \n                                  <div>\n                                    59 \n                                  </div> \n                                  <div>\n                                    60 \n                                  </div> \n                                  <div>\n                                    61 \n                                  </div> \n                                  <div>\n                                    62 \n                                  </div> \n                                  <div>\n                                    63 \n                                  </div> \n                                  <div>\n                                    64 \n                                  </div> \n                                  <div>\n                                    65 \n                                  </div> \n                                  <div>\n                                    66 \n                                  </div> \n                                  <div>\n                                    67 \n                                  </div> \n                                  <div>\n                                    68 \n                                  </div> \n                                  <div>\n                                    69 \n                                  </div> \n                                  <div>\n                                    70 \n                                  </div> \n                                  <div>\n                                    71 \n                                  </div> \n                                  <div>\n                                    72 \n                                  </div> \n                                  <div>\n                                    73 \n                                  </div> \n                                  <div>\n                                    74 \n                                  </div> \n                                  <div>\n                                    75 \n                                  </div> \n                                  <div>\n                                    76 \n                                  </div> \n                                  <div>\n                                    77 \n                                  </div> \n                                  <div>\n                                    78 \n                                  </div> \n                                  <div>\n                                    79 \n                                  </div> \n                                  <div>\n                                    80 \n                                  </div> \n                                  <div>\n                                    81 \n                                  </div> \n                                  <div>\n                                    82 \n                                  </div> \n                                  <div>\n                                    83 \n                                  </div> \n                                  <div>\n                                    84 \n                                  </div> \n                                  <div>\n                                    85 \n                                  </div> \n                                  <div>\n                                    86 \n                                  </div> \n                                  <div>\n                                    87 \n                                  </div> \n                                  <div>\n                                    88 \n                                  </div> \n                                  <div>\n                                    89 \n                                  </div> \n                                  <div>\n                                    90 \n                                  </div> \n                                  <div>\n                                    91 \n                                  </div> \n                                  <div>\n                                    92 \n                                  </div> \n                                  <div>\n                                    93 \n                                  </div> \n                                  <div>\n                                    94 \n                                  </div> \n                                  <div>\n                                    95 \n                                  </div> \n                                  <div>\n                                    96 \n                                  </div> \n                                  <div>\n                                    97 \n                                  </div> \n                                  <div>\n                                    98 \n                                  </div> \n                                  <div>\n                                    99 \n                                  </div> \n                                  <div>\n                                    100 \n                                  </div> \n                                  <div>\n                                    101 \n                                  </div> \n                                  <div>\n                                    102 \n                                  </div> \n                                  <div>\n                                    103 \n                                  </div> \n                                  <div>\n                                    104 \n                                  </div> \n                                  <div>\n                                    105 \n                                  </div> \n                                  <div>\n                                    106 \n                                  </div> \n                                  <div>\n                                    107 \n                                  </div> \n                                  <div>\n                                    108 \n                                  </div> \n                                  <div>\n                                    109 \n                                  </div> \n                                  <div>\n                                    110 \n                                  </div> \n                                  <div>\n                                    111 \n                                  </div> \n                                  <div>\n                                    112 \n                                  </div> \n                                  <div>\n                                    113 \n                                  </div> \n                                  <div>\n                                    114 \n                                  </div> \n                                  <div>\n                                    115 \n                                  </div> \n                                  <div>\n                                    116 \n                                  </div> \n                                  <div>\n                                    117 \n                                  </div> \n                                  <div>\n                                    118 \n                                  </div> \n                                  <div>\n                                    119 \n                                  </div> </td> \n                                 <td> \n                                  <div> \n                                   <p> <code class=\"prettyprint\">package <code class=\"prettyprint\">demo.zookeeper.remoting.client; </code></code></p>\n                                   <code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">demo.zookeeper.remoting.common.Constant; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">java.io.IOException; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">java.net.MalformedURLException; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">java.rmi.ConnectException; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">java.rmi.Naming; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">java.rmi.NotBoundException; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">java.rmi.Remote; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">java.rmi.RemoteException; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">java.util.ArrayList; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">java.util.List; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">java.util.concurrent.CountDownLatch; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">java.util.concurrent.ThreadLocalRandom; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">org.apache.zookeeper.KeeperException; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">org.apache.zookeeper.WatchedEvent; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">org.apache.zookeeper.Watcher; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">org.apache.zookeeper.ZooKeeper; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">org.slf4j.Logger; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">org.slf4j.LoggerFactory; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">public <code class=\"prettyprint\">class <code class=\"prettyprint\">ServiceConsumer { </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">private <code class=\"prettyprint\">static <code class=\"prettyprint\">final <code class=\"prettyprint\">Logger LOGGER = LoggerFactory.getLogger(ServiceConsumer. <code class=\"prettyprint\">class <code class=\"prettyprint\">); </code></code></code></code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">// 用于等待 SyncConnected 事件触发后继续执行当前线程 </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">private <code class=\"prettyprint\">CountDownLatch latch = <code class=\"prettyprint\">new <code class=\"prettyprint\">CountDownLatch( <code class=\"prettyprint\">); </code></code></code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">// 定义一个 volatile 成员变量，用于保存最新的 RMI 地址（考虑到该变量或许会被其它线程所修改，一旦修改后，该变量的值会影响到所有线程） </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">private <code class=\"prettyprint\">volatile <code class=\"prettyprint\">List&lt;String&gt; urlList = <code class=\"prettyprint\">new <code class=\"prettyprint\">ArrayList&lt;&gt;(); </code></code></code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">// 构造器 </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">public <code class=\"prettyprint\">ServiceConsumer() { </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">ZooKeeper zk = connectServer(); <code class=\"prettyprint\">// 连接 ZooKeeper 服务器并获取 ZooKeeper 对象 </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">if <code class=\"prettyprint\">(zk != <code class=\"prettyprint\">null <code class=\"prettyprint\">) { </code></code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">watchNode(zk); <code class=\"prettyprint\">// 观察 /registry 节点的所有子节点并更新 urlList 成员变量 </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">// 查找 RMI 服务 </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">public <code class=\"prettyprint\">&lt;T <code class=\"prettyprint\">extends <code class=\"prettyprint\">Remote&gt; T lookup() { </code></code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">T service = <code class=\"prettyprint\">null <code class=\"prettyprint\">; </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">int <code class=\"prettyprint\">size = urlList.size(); </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">if <code class=\"prettyprint\">(size &gt; <code class=\"prettyprint\">) { </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">String url; </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">if <code class=\"prettyprint\">(size == <code class=\"prettyprint\">) { </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">url = urlList.get( <code class=\"prettyprint\">); <code class=\"prettyprint\">// 若 urlList 中只有一个元素，则直接获取该元素 </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">LOGGER.debug( <code class=\"prettyprint\">\"using only url: {}\" <code class=\"prettyprint\">, url); </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} <code class=\"prettyprint\">else <code class=\"prettyprint\">{ </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">url = urlList.get(ThreadLocalRandom.current().nextInt(size)); <code class=\"prettyprint\">// 若 urlList 中存在多个元素，则随机获取一个元素 </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">LOGGER.debug( <code class=\"prettyprint\">\"using random url: {}\" <code class=\"prettyprint\">, url); </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">service = lookupService(url); <code class=\"prettyprint\">// 从 JNDI 中查找 RMI 服务 </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">return <code class=\"prettyprint\">service; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">// 连接 ZooKeeper 服务器 </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">private <code class=\"prettyprint\">ZooKeeper connectServer() { </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">ZooKeeper zk = <code class=\"prettyprint\">null <code class=\"prettyprint\">; </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">try <code class=\"prettyprint\">{ </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">zk = <code class=\"prettyprint\">new <code class=\"prettyprint\">ZooKeeper(Constant.ZK_CONNECTION_STRING, Constant.ZK_SESSION_TIMEOUT, <code class=\"prettyprint\">new <code class=\"prettyprint\">Watcher() { </code></code></code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">@Override </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">public <code class=\"prettyprint\">void <code class=\"prettyprint\">process(WatchedEvent event) { </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">if <code class=\"prettyprint\">(event.getState() == Event.KeeperState.SyncConnected) { </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">latch.countDown(); <code class=\"prettyprint\">// 唤醒当前正在执行的线程 </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">}); </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">latch.await(); <code class=\"prettyprint\">// 使当前线程处于等待状态 </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} <code class=\"prettyprint\">catch <code class=\"prettyprint\">(IOException | InterruptedException e) { </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">LOGGER.error( <code class=\"prettyprint\">\"\" <code class=\"prettyprint\">, e); </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">return <code class=\"prettyprint\">zk; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">// 观察 /registry 节点下所有子节点是否有变化 </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">private <code class=\"prettyprint\">void <code class=\"prettyprint\">watchNode( <code class=\"prettyprint\">final <code class=\"prettyprint\">ZooKeeper zk) { </code></code></code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">try <code class=\"prettyprint\">{ </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">List&lt;String&gt; nodeList = zk.getChildren(Constant.ZK_REGISTRY_PATH, <code class=\"prettyprint\">new <code class=\"prettyprint\">Watcher() { </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">@Override </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">public <code class=\"prettyprint\">void <code class=\"prettyprint\">process(WatchedEvent event) { </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">if <code class=\"prettyprint\">(event.getType() == Event.EventType.NodeChildrenChanged) { </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">watchNode(zk); <code class=\"prettyprint\">// 若子节点有变化，则重新调用该方法（为了获取最新子节点中的数据） </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">}); </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">List&lt;String&gt; dataList = <code class=\"prettyprint\">new <code class=\"prettyprint\">ArrayList&lt;&gt;(); <code class=\"prettyprint\">// 用于存放 /registry 所有子节点中的数据 </code></code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">for <code class=\"prettyprint\">(String node : nodeList) { </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">byte <code class=\"prettyprint\">[] data = zk.getData(Constant.ZK_REGISTRY_PATH + <code class=\"prettyprint\">\"/\" <code class=\"prettyprint\">+ node, <code class=\"prettyprint\">false <code class=\"prettyprint\">, <code class=\"prettyprint\">null <code class=\"prettyprint\">); <code class=\"prettyprint\">// 获取 /registry 的子节点中的数据 </code></code></code></code></code></code></code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">dataList.add( <code class=\"prettyprint\">new <code class=\"prettyprint\">String(data)); </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">LOGGER.debug( <code class=\"prettyprint\">\"node data: {}\" <code class=\"prettyprint\">, dataList); </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">urlList = dataList; <code class=\"prettyprint\">// 更新最新的 RMI 地址 </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} <code class=\"prettyprint\">catch <code class=\"prettyprint\">(KeeperException | InterruptedException e) { </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">LOGGER.error( <code class=\"prettyprint\">\"\" <code class=\"prettyprint\">, e); </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">// 在 JNDI 中查找 RMI 远程服务对象 </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">@SuppressWarnings <code class=\"prettyprint\">( <code class=\"prettyprint\">\"unchecked\" <code class=\"prettyprint\">) </code></code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">private <code class=\"prettyprint\">&lt;T&gt; T lookupService(String url) { </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">T remote = <code class=\"prettyprint\">null <code class=\"prettyprint\">; </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">try <code class=\"prettyprint\">{ </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">remote = (T) Naming.lookup(url); </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} <code class=\"prettyprint\">catch <code class=\"prettyprint\">(NotBoundException | MalformedURLException | RemoteException e) { </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">if <code class=\"prettyprint\">(e <code class=\"prettyprint\">instanceof <code class=\"prettyprint\">ConnectException) { </code></code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">// 若连接中断，则使用 urlList 中第一个 RMI 地址来查找（这是一种简单的重试方式，确保不会抛出异常） </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">LOGGER.error( <code class=\"prettyprint\">\"ConnectException -&gt; url: {}\" <code class=\"prettyprint\">, url); </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">if <code class=\"prettyprint\">(urlList.size() != <code class=\"prettyprint\">) { </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">url = urlList.get( <code class=\"prettyprint\">); </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">return <code class=\"prettyprint\">lookupService(url); </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">LOGGER.error( <code class=\"prettyprint\">\"\" <code class=\"prettyprint\">, e); </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">return <code class=\"prettyprint\">remote; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> </code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code>\n                                  </div><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> </code></code></code></td> \n                                </tr> \n                               </tbody>\n                              </table> \n                             </div> <h2>4.3 发布服务</h2> <p>我们需要调用 ServiceProvider 的 publish() 方法来发布 RMI 服务，发布成功后也会自动在 ZooKeeper 中注册 RMI 地址。</p> \n                             <div> \n                              <div> \n                               <a href=\"http://my.oschina.net/huangyong/blog/345164\" rel=\"nofollow,noindex\">?</a> \n                              </div> \n                              <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"> \n                               <tbody>\n                                <tr> \n                                 <td> \n                                  <div>\n                                    1 \n                                  </div> \n                                  <div>\n                                    2 \n                                  </div> \n                                  <div>\n                                    3 \n                                  </div> \n                                  <div>\n                                    4 \n                                  </div> \n                                  <div>\n                                    5 \n                                  </div> \n                                  <div>\n                                    6 \n                                  </div> \n                                  <div>\n                                    7 \n                                  </div> \n                                  <div>\n                                    8 \n                                  </div> \n                                  <div>\n                                    9 \n                                  </div> \n                                  <div>\n                                    10 \n                                  </div> \n                                  <div>\n                                    11 \n                                  </div> \n                                  <div>\n                                    12 \n                                  </div> \n                                  <div>\n                                    13 \n                                  </div> \n                                  <div>\n                                    14 \n                                  </div> \n                                  <div>\n                                    15 \n                                  </div> \n                                  <div>\n                                    16 \n                                  </div> \n                                  <div>\n                                    17 \n                                  </div> \n                                  <div>\n                                    18 \n                                  </div> \n                                  <div>\n                                    19 \n                                  </div> \n                                  <div>\n                                    20 \n                                  </div> \n                                  <div>\n                                    21 \n                                  </div> \n                                  <div>\n                                    22 \n                                  </div> \n                                  <div>\n                                    23 \n                                  </div> </td> \n                                 <td> \n                                  <div> \n                                   <p> <code class=\"prettyprint\">package <code class=\"prettyprint\">demo.zookeeper.remoting.server; </code></code></p>\n                                   <code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">demo.zookeeper.remoting.common.HelloService; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">public <code class=\"prettyprint\">class <code class=\"prettyprint\">Server { </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">public <code class=\"prettyprint\">static <code class=\"prettyprint\">void <code class=\"prettyprint\">main(String[] args) <code class=\"prettyprint\">throws <code class=\"prettyprint\">Exception { </code></code></code></code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">if <code class=\"prettyprint\">(args.length != <code class=\"prettyprint\">) { </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">System.err.println( <code class=\"prettyprint\">\"please using command: java Server &lt;rmi_host&gt; &lt;rmi_port&gt;\" <code class=\"prettyprint\">); </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">System.exit(- <code class=\"prettyprint\">); </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">String host = args[ <code class=\"prettyprint\">]; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">int <code class=\"prettyprint\">port = Integer.parseInt(args[ <code class=\"prettyprint\">]); </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">ServiceProvider provider = <code class=\"prettyprint\">new <code class=\"prettyprint\">ServiceProvider(); </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">HelloService helloService = <code class=\"prettyprint\">new <code class=\"prettyprint\">HelloServiceImpl(); </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">provider.publish(helloService, host, port); </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">Thread.sleep(Long.MAX_VALUE); </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> </code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code>\n                                  </div><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> </code></code></code></td> \n                                </tr> \n                               </tbody>\n                              </table> \n                             </div> <p>注意：在运行 Server 类的 main() 方法时，一定要使用命令行参数来指定 host 与 port，例如：</p> \n                             <div> \n                              <div> \n                               <a href=\"http://my.oschina.net/huangyong/blog/345164\" rel=\"nofollow,noindex\">?</a> \n                              </div> \n                              <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"> \n                               <tbody>\n                                <tr> \n                                 <td> \n                                  <div>\n                                    1 \n                                  </div> \n                                  <div>\n                                    2 \n                                  </div> </td> \n                                 <td> \n                                  <div> \n                                   <p> <code class=\"prettyprint\">java Server localhost </code></p>\n                                   <code class=\"prettyprint\"> <p> <code class=\"prettyprint\">java Server localhost </code></p><code class=\"prettyprint\"> </code></code>\n                                  </div><code class=\"prettyprint\"><code class=\"prettyprint\"> </code></code></td> \n                                </tr> \n                               </tbody>\n                              </table> \n                             </div> <p>以上两条 Java 命令可在本地运行两个 Server 程序，当然也可以同时运行更多的 Server 程序，只要 port 不同就行。</p> <h2>4.4 调用服务</h2> <p>通过调用 ServiceConsumer 的 lookup() 方法来查找 RMI 远程服务对象。我们使用一个“死循环”来模拟每隔 3 秒钟调用一次远程方法。</p> \n                             <div> \n                              <div> \n                               <a href=\"http://my.oschina.net/huangyong/blog/345164\" rel=\"nofollow,noindex\">?</a> \n                              </div> \n                              <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"> \n                               <tbody>\n                                <tr> \n                                 <td> \n                                  <div>\n                                    1 \n                                  </div> \n                                  <div>\n                                    2 \n                                  </div> \n                                  <div>\n                                    3 \n                                  </div> \n                                  <div>\n                                    4 \n                                  </div> \n                                  <div>\n                                    5 \n                                  </div> \n                                  <div>\n                                    6 \n                                  </div> \n                                  <div>\n                                    7 \n                                  </div> \n                                  <div>\n                                    8 \n                                  </div> \n                                  <div>\n                                    9 \n                                  </div> \n                                  <div>\n                                    10 \n                                  </div> \n                                  <div>\n                                    11 \n                                  </div> \n                                  <div>\n                                    12 \n                                  </div> \n                                  <div>\n                                    13 \n                                  </div> \n                                  <div>\n                                    14 \n                                  </div> \n                                  <div>\n                                    15 \n                                  </div> \n                                  <div>\n                                    16 \n                                  </div> \n                                  <div>\n                                    17 \n                                  </div> </td> \n                                 <td> \n                                  <div> \n                                   <p> <code class=\"prettyprint\">package <code class=\"prettyprint\">demo.zookeeper.remoting.client; </code></code></p>\n                                   <code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">import <code class=\"prettyprint\">demo.zookeeper.remoting.common.HelloService; </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">public <code class=\"prettyprint\">class <code class=\"prettyprint\">Client { </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">public <code class=\"prettyprint\">static <code class=\"prettyprint\">void <code class=\"prettyprint\">main(String[] args) <code class=\"prettyprint\">throws <code class=\"prettyprint\">Exception { </code></code></code></code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">ServiceConsumer consumer = <code class=\"prettyprint\">new <code class=\"prettyprint\">ServiceConsumer(); </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">while <code class=\"prettyprint\">( <code class=\"prettyprint\">true <code class=\"prettyprint\">) { </code></code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">HelloService helloService = consumer.lookup(); </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">String result = helloService.sayHello( <code class=\"prettyprint\">\"Jack\" <code class=\"prettyprint\">); </code></code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">System.out.println(result); </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">Thread.sleep( <code class=\"prettyprint\">); </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> <p> <code class=\"prettyprint\">} </code></p><code class=\"prettyprint\"> </code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code>\n                                  </div><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> </code></code></code></td> \n                                </tr> \n                               </tbody>\n                              </table> \n                             </div> <h2>4.5 使用方法</h2> <p>根据以下步骤验证 RMI 服务的高可用性：</p> \n                             <ol> \n                              <li>运行两个 Server 程序，一定要确保 port 是不同的。</li> \n                              <li>运行一个 Client 程序。</li> \n                              <li>停止其中一个 Server 程序，并观察 Client 控制台的变化（停止一个 Server 不会导致 Client 端调用失败）。</li> \n                              <li>重新启动刚才关闭的 Server 程序，继续观察 Client 控制台变化（新启动的 Server 会加入候选）。</li> \n                              <li>先后停止所有的 Server 程序，还是观察 Client 控制台变化（Client 会重试连接，多次连接失败后，自动关闭）。</li> \n                             </ol> <h2>5 总结</h2> <p>通过本文，我们尝试使用 ZooKeeper 实现了一个简单的 RMI 服务高可用性解决方案，通过 ZooKeeper 注册所有服务提供者发布的 RMI 服务，让服务消费者监听 ZooKeeper 的 Znode，从而获取当前可用的 RMI 服务。此方案局限于 RMI 服务，对于任何形式的服务（比如：WebService），也提供了一定参考。</p> <p>如果再配合 ZooKeeper 自身的集群，那才是一个相对完美的解决方案，对于 ZooKeeper 的集群，请读者自行实践。</p> <p>由于笔者水平有限，对于描述有误之处，还请各位读者提出建议，并期待更加优秀的解决方案。</p> <p>转载：http://my.oschina.net/huangyong/blog/345164</p> </code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code>\n</div>\n<p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\">转自：http://itindex.net/detail/52156-rmi-zookeeper-框架</code></code></code></p>\n<code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> </code></code></code>','   在 Java 世界里，有一种技术可以实现“跨虚拟机”的调用，它就是 RMI （Remote Method Invocation，远程方法调用）。例如，服务A 在 JVM1 中运行，服务B 在 JVM2 中运行，服务A 与 服务B 可相互进行远程调用，就像调用本地方法一样，这就是 RMI。在分布式系统中，我们使用 RMI 技术可轻松将  服务提供者 （Service Provider）与  服......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:27:42',0,2,0,0,'http://www.fzqblog.top/upload/201608/1471958862343.jpg|',NULL,1),(360,1,6,'linux下服务器重启shell脚本','<pre class=\"brush:java;toolbar:false\">drwxr-xr-x. 4 richmail richmail     4096 12月  8 15:17 admin\ndrwxr-xr-x. 5 richmail richmail     4096 12月 11 09:56 help\n-rw-rw-r--. 1 richmail richmail 46398327 12月 11 11:25 help.zip\ndrwxr-xr-x. 4 richmail richmail     4096 12月 10 17:39 mail\n-rwxr-xr-x. 1 richmail richmail      500 12月  5 17:56 restartTomcat.sh\n-rw-r--r--. 1 richmail richmail 51784276 12月 10 17:40 ThinkMail_webmail(V2.0.0)_201412101739.zip\ndrwxr-xr-x. 9 richmail richmail     4096 11月 17 18:17 tomcat7\n-rw-rw-r--. 1 richmail richmail        0 10月 22 13:12 x\n[richmail@datanode1 webmailsvr]$ cat restartTomcat.sh \n#Author : dengliang\n#Desc : restart tomcat\n#Time : 2014-12-05\ntomcatpath=\"/home/richmail/web/webmailsvr/tomcat7\"\n\n#!/bin/sh\n#kill tomcat pid\npidlist=`ps -ef|grep $tomcatpath |grep -v \"grep\"|awk \'{print $2}\'`\n\nif [ \"$pidlist\" = \"\" ]\n   then\n       echo \"no tomcat pid alive!\"\nelse\n  echo \"tomcat pid list :  $pidlist\"\n  echo \"killing pidlist :  $pidlist\"\n  kill -9 $pidlist\n  echo \"tomcat stopped successfully!\" \n  sleep 1 \nfi\necho \"now starting tomcat......\"\n\n\ncd $tomcatpath/bin\n\n./startup.sh\ncd - \n[richmail@datanode1 webmailsvr]$ \n[richmail@datanode1 webmailsvr]$</pre>\n<p>转自：http://wuzhaohuixy-qq-com.iteye.com/blog/2165892</p>','drwxr-xr-x. 4 richmail richmail     4096 12月  8 15:17 admindrwxr-xr-x. 5 richmail richmail     4096 12月 11 09:56 help-rw-rw-r--. 1 richmail richmail 46398327 12月 11 11:25 help.zipdrwxr-xr-x. 4 richmai......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:27:43',0,0,0,0,'',NULL,1),(361,1,6,'Apache Struts 2.3.20 发布','<div> \n <p> <a href=\"http://city.oschina.net/guangzhou/event/195924\" target=\"_blank\" rel=\"nofollow,noindex\">#广州# OSC源创会第31期（12月27日）开始报名，OSC自曝家丑！</a> </p> \n <p>Apache Struts 2.3.20 发布了，改进包括：</p> \n <p>合并后的安全修补程序版本中，2.3.16.1、&nbsp;2.3.16.2、&nbsp;2.3.16.3</p> \n <p>扩展现有的安全机制，来阻止访问给&nbsp;Java&nbsp;包和类</p> \n <p>RedirectResult&nbsp;参数集合</p> \n <p> 在 <span>默认情况下,</span> 使&nbsp;ParametersInterceptor&nbsp;支持中文 <span>哈希</span> <span>键</span> </p> \n <p> <span>themes.properties</span> 可以使用加载&nbsp;&nbsp;ServletContext&nbsp;允许放在&nbsp;WEB-INF&nbsp;下或在类路径中的模板文件夹 </p> \n <p>新标记&nbsp;datetextfield</p> \n <p> 只有 <span>缓存</span> 有效的&nbsp;Ognl&nbsp;表达式 </p> \n <p>自定义&nbsp;TextProvider&nbsp;可用于验证错误的模型驱动的行动</p> \n <p>datetimepicker 的标签固定</p> \n <p>PropertiesJudge&nbsp;删除和属性已签入&nbsp;SecurityMemberAccess</p> \n <p>在&nbsp;IBM&nbsp;JVM&nbsp;资源重新加载工作</p> \n <p>默认加载设置已被删除从&nbsp;default.properties</p> \n <p>升级到版本&nbsp;1.3.1&nbsp;要修复潜在的安全漏洞的共同性 fileupload&nbsp;图书馆</p> \n <p>计划属性接受&nbsp;s:url&nbsp;标记中的表达式</p> \n <p>解决这些问题在&nbsp;FastByteArrayOutputStream&nbsp;中的无限循环</p> \n <p>LocalizedTextUtil&nbsp;支持很多的类加载器</p> \n <p>介绍了条例草案的材料&nbsp;pom</p> \n <p>调试 = browser|console&nbsp;被迁移到&nbsp;jQuery</p> \n <p>struts_dojo.js&nbsp;被固定的</p> \n <p>接口&nbsp;org/apache/struts2/意见/标记库被恢复，并且标记为&nbsp;@Depreacted</p> \n <p> 更多内容请看 <a target=\"_blank\" href=\"http://struts.apache.org/announce.html#a20141207\" rel=\"nofollow,noindex\">发行说明</a> 。 </p> \n</div>\n<p>转自：http://www.oschina.net/news/57872/struts-2-3-20</p>','   #广州# OSC源创会第31期（12月27日）开始报名，OSC自曝家丑！   Apache Struts 2.3.20 发布了，改进包括：  合并后的安全修补程序版本中，2.3.16.1、 2.3.16.2、 2.3.16.3  扩展现有的安全机制，来阻止访问给 Java 包和类  RedirectResult 参数集合   在 默认情况下, 使 ParametersInterceptor ......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:27:43',0,0,0,0,'',NULL,1),(362,1,6,'Spring mvc 对Controller配置AOP','<div> \n <p>希望对所有Controller&nbsp;的请求参数都统一做一个日志记录，如果没有controller都需要手工去写的化，不能保证格式统一也不能保证不会被遗漏！&nbsp;如果在配置文件中仅仅配置：</p> \n <pre class=\"brush:java;toolbar:false\">&lt;aop:aspectj-autoproxy /&gt;</pre> \n <p>则会发现AOP的配置对controller&nbsp;根本不起作用！&nbsp;是因为 proxy-target-class&nbsp;默认是false ，无法对未实现接口的类进行代理，而controller ，但是如果将proxy-target-class=\"true\"又会因为&nbsp;这个配置导致启动报错！因</p> \n <pre class=\"brush:java;toolbar:false\">&lt;aop:aspectj-autoproxy proxy-target-class=\"true\"&gt;\n  &lt;aop:include name=\"controllerAspect\"/&gt;\n &lt;/aop:aspectj-autoproxy&gt;\n &lt;bean id=\"controllerAspect\" class=\"com.david.aop.ControllerAspect\"/&gt;</pre> \n <p>结果：</p> \n <pre class=\"brush:java;toolbar:false\">2014-12-15 11:42:39  [ http-bio-8080-exec-5:6681 ] - [ DEBUG ]  Last-Modified value for [/WebApp/locale.htm] is: -1\n2014-12-15 11:42:39  [ http-bio-8080-exec-5:6686 ] - [ DEBUG ]  Invoking request handler method: public java.lang.String com.david.web.controller.WelcomeController.locale()\n2014-12-15 11:42:39  [ http-bio-8080-exec-5:6687 ] - [ INFO ]  locale 被调用，请求参数是[Ljava.lang.Object;@1546c85</pre> \n</div>\n<p>转自：http://zhangwei-david.iteye.com/blog/2166338</p>','  希望对所有Controller 的请求参数都统一做一个日志记录，如果没有controller都需要手工去写的化，不能保证格式统一也不能保证不会被遗漏！ 如果在配置文件中仅仅配置：    则会发现AOP的配置对controller 根本不起作用！ 是因为 proxy-target-class 默认是false ，无法对未实现接口的类进行代理，而controller ，但是如果将proxy-tar......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:27:44',0,0,0,0,'',NULL,1),(363,1,6,'Spring IO Platform 1.1.0.RC1 发布','<div> \n <p> <a href=\"http://city.oschina.net/guangzhou/event/195924\" target=\"_blank\" rel=\"nofollow,noindex\">#广州# OSC源创会第31期（12月27日）开始报名，OSC自曝家丑！</a> </p> \n <p> Spring IO Platform 1.1.0.RC1 发布，此版本现已提供在 <a textvalue=\"repo.spring.io\" target=\"_blank\" href=\"https://repo.spring.io/milestone\" rel=\"nofollow,noindex\">repo.spring.io</a> 。 </p> \n <h3>Spring IO Platform 1.1 包括的新项目： </h3> \n <ul> \n  <li> <p>Spring Integration Flow 1.0</p> </li> \n  <li> <p>Spring Integration Java DSL 1.0</p> </li> \n  <li> <p>Spring Integration Splunk 1.1</p> </li> \n </ul> \n <h3>Spring IO Platform 1.1 升级的项目： </h3> \n <ul> \n  <li> <p>Spring Boot 1.2</p> </li> \n  <li> <p>Spring Cloud Connectors 1.1</p> </li> \n  <li> <p>Spring Data JPA 1.7</p> </li> \n  <li> <p>Spring Data MongoDB 1.6</p> </li> \n  <li> <p>Spring Data Neo4J 3.2</p> </li> \n  <li> <p>Spring Data Redis 1.4</p> </li> \n  <li> <p>Spring Data REST 2.2</p> </li> \n  <li> <p>Spring Data Solr 1.3</p> </li> \n  <li> <p>Spring Framework 4.1</p> </li> \n  <li> <p>Spring Integration 4.1</p> </li> \n </ul> \n <p>同时升级了大量的第三方依赖。</p> \n <p> <a textvalue=\"Project Page\" target=\"_blank\" href=\"http://platform.spring.io/platform\" rel=\"nofollow,noindex\">Project Page</a> | <a textvalue=\"GitHub\" target=\"_blank\" href=\"https://github.com/spring-io/platform\" rel=\"nofollow,noindex\">GitHub</a> | <a textvalue=\"Issues\" target=\"_blank\" href=\"https://github.com/spring-io/platform/issues\" rel=\"nofollow,noindex\">Issues</a> | <a textvalue=\"Documentation\" target=\"_blank\" href=\"http://docs.spring.io/platform/docs/1.1.0.RC1/reference/htmlsingle\" rel=\"nofollow,noindex\">Documentation</a> </p> \n <p>Spring IO 是可集成的，构建现代化应用的版本平台。Spring IO 是模块化的，企业级的分布式系统，包括了一系列的依赖，使得开发者仅能对自己所需的部分进行完全的部署控制。Spring IO 是 100% 开源，可靠和模块化的。</p> \n <p>主要特性：</p> \n <ul> \n  <li> <p>一个平台，多个工作负载 - Web 构建，集成，批处理，响应式或者大数据应用</p> </li> \n  <li> <p>极致简化 Spring Boot 的开发经验</p> </li> \n  <li> <p>提供开箱即用的生产特性</p> </li> \n  <li> <p>模块化平台，允许开发者只部署他们需要的那部分</p> </li> \n  <li> <p>支持嵌入式运行时，传统应用服务器和 PaaS 部署</p> </li> \n  <li> <p>仅仅依赖 Java SE，支持 Groovy, Grails 和一部分 Java EE</p> </li> \n  <li> <p>可以结合现有的依赖系统运行（Maven 和 Gradle）</p> </li> \n  <li> <p> 支持 JDK 7 和 8 <sup>*</sup> </p> </li> \n </ul> \n</div>\n<p>转自：http://www.oschina.net/news/57881/spring-io-platform-1-1-0-rc1-released</p>','   #广州# OSC源创会第31期（12月27日）开始报名，OSC自曝家丑！    Spring IO Platform 1.1.0.RC1 发布，此版本现已提供在 repo.spring.io 。   Spring IO Platform 1.1 包括的新项目：       Spring Integration Flow 1.0     Spring Integration Java DSL ......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:27:44',0,0,0,0,'',NULL,1),(364,1,6,'构建一个跨 Bluemix 和私有云模式的可移植 Java EE 应用程序','<div> \n <p>作为 Java 开发人员，您一定希望实现 Java 的“编写一次，随处运行”的承诺。如果在 IBM Bluemix 与 SmartCloud Orchestrator 或 PureApplication System 这样的内部云环境之间迁移应用程序，如何确保这一承诺得以实现？</p> \n <p>在开始使用不同的部署平台时，您的应用程序代码可能会意外地变得非常依赖平台，偏离了“随处运行” 的价值主张。在本教程中，我们将介绍如何解决两种平台在数据库链接和数据库初始化上的差异。文中提供了应用程序代码，以及部署自动化代码和数据库初始化代码。</p> \n <p> </p> \n <p> <span>“</span> 我们将介绍如何编写一个 Java EE 应用程序，该应用程序既可以无缝地部署到 Bluemix，也可以使用 Web Application Pattern 部署到 SmartCloud Orchestrator。 <span>”</span> </p> \n <p>我们首先查看一些代码，看看这些平台之间的数据库连接差异，以及我们如何实现一个可移植的解决方案。然后，我们将会演示部署自动化，以及打包应用程序将它部署到两种平台上的步骤。最后，我们将在不损害应用程序可移植性的情况下解决 Bluemix 中的数据库初始化挑战。</p> \n <div> \n  <p> <a href=\"http://samplej2eeinvoices.mybluemix.net/\" rel=\"nofollow,noindex\">运行应用程序</a> </p> \n  <p> <a href=\"https://hub.jazz.net/project/mdesantis/J2EEBluemixSCO/overview/\" rel=\"nofollow,noindex\">获取代码</a> </p> \n </div> \n <h2>构建您的应用程序需要做的准备工作</h2> \n <ul> \n  <li> 一个 <a href=\"https://ace.ng.bluemix.net/\" rel=\"nofollow,noindex\">Bluemix</a> 帐户 </li> \n  <li> 一个 <a href=\"https://hub.jazz.net/\" rel=\"nofollow,noindex\">DevOps Services</a> 帐户 </li> \n  <li>熟悉 Java EE</li> \n  <li>访问 SmartCloud Orchestrator 或 PureApplication 实例</li> \n </ul> \n <h2>第 1 步. 理解 Java EE 应用程序示例</h2> \n <ul> \n  <li> <strong>设计：</strong> 我们的示例应用程序将会显示一个发票列表。它的设计遵循模型-视图-控制器 (MVC) 模式。一个 Java servlet 将会调用数据访问层来获取发票列表，然后将它传递到演示层，后者将对数据应用格式化规则并呈现一个网页。 </li> \n  <li> <strong>代码：</strong> 单击上面的 <strong>获取代码</strong> 按钮，在一个 DevOps Services 项目中查看源代码。如果希望更改该代码，可以单击 <strong>EDIT CODE</strong> 按钮。 <br> <img alt=\"DevOps Services 中的 EDIT CODE 按钮\" class=\"alignCenter\" data-original=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958865377.jpg\"> 然后将 <strong>分解</strong> DevOps Service 项目来创建您自己的副本： <img alt=\"DevOps Services 中的 FORK 按钮\" class=\"alignCenter\" data-original=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958865597.jpg\"> 或者可以使用 <strong>File &gt; Export</strong> 菜单项将它下载到您的文件系统，并使用您最喜爱的编辑器修改它： <img alt=\"DevOps Services 中的 File > Export 菜单\" class=\"alignCenter\" data-original=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958866758.jpg\"> </li> \n  <li> <strong>数据库结构：</strong> 我们的示例数据库非常简单：是一种模式，包含用来表示发票的一个表。以下摘取了 <code class=\"prettyprint\">SampleDatabase.sql 的部分内容： <p> 点击查看代码清单 </p> \n    <div> \n     <p> 关闭 [x] </p> \n     <pre class=\"brush:java;toolbar:false\">CREATE SCHEMA DEMO;\n\nCREATE TABLE DEMO.INVOICES (\n INVOICE_ID INTEGER NOT NULL,\n CUSTOMER_NAME VARCHAR(100),\n SHIPPING_ADDRESS VARCHAR(250),\n AMOUNT DOUBLE\n);\n\nALTER TABLE DEMO.INVOICES ADD PRIMARY KEY (INVOICE_ID);\n\nINSERT INTO DEMO.INVOICES (INVOICE_ID, CUSTOMER_NAME, SHIPPING_ADDRESS, AMOUNT)\n VALUES ( 11222, \'Marco De Santis\', \'Via Sciangai 53 000144 Rome Italy\', 100.0);\nINSERT INTO DEMO.INVOICES (INVOICE_ID, CUSTOMER_NAME, SHIPPING_ADDRESS, AMOUNT)\n VALUES ( 11223, \'Ruth Willenborg\', \'3901 S MIAMI BLVD DURHAM , NC , 27703-9135 United States\', 1000.0);</pre> \n    </div> </code></li>\n  <code class=\"prettyprint\"> <li> <strong>模型：</strong> 为了建模我们的 <code class=\"prettyprint\">Invoice 对象，class=\"lazy-load\" data-original/com/ibm/vapps/model/Invoice.java 中一个简单的 POJO 包含了一些字段、一个构造函数和 getter/setter 方法： <pre class=\"brush:java;toolbar:false\">public class Invoice { \n private int id; \n private String customerName; \n private String shippingAddress; \n private double amount; \n ...\n}</pre> </code></li><code class=\"prettyprint\"> <li> <strong>控制器：</strong> servlet 从数据访问对象 (Data Access Object, DAO) 检索数据，并将它转发到表示层： <pre class=\"brush:java;toolbar:false\">private static final String INVOICES_JSP_PAGE = \"invoices.jsp\";\n\nprotected void doGet(HttpServletRequest request,\n   HttpServletResponse response) throws ServletException, IOException {\n  List&lt;Invoice&gt; invoices = new ArrayList&lt;Invoice&gt;();\n  try {\n   invoices = InvoicesDAO.retrieveInvoices();\n  } catch (DatabaseException e) {\n   request.setAttribute(ERROR_ATTRIBUTE_NAME,\n     ErrorMessages.ERROR_RETRIEVING_DATA_MESSAGE);\n  }\n  request.setAttribute(INVOICES_ATTRIBUTE_NAME, invoices);\n  RequestDispatcher rd = getServletContext().getRequestDispatcher(\n    INVOICES_JSP_PAGE);\n  rd.forward(request, response);\n }</pre> </li> <li> <strong>视图：</strong> 视图层是通过一个 JSP 页面实现的，该页面在一个具有某种样式的 HTML 表中显示发票细节： <pre class=\"brush:java;toolbar:false\">&lt;table&gt;\n  &lt;thead&gt;\n   &lt;tr&gt;\n    &lt;th&gt;Invoice Id&lt;/th&gt;\n    &lt;th&gt;Customer Name&lt;/th&gt;\n    &lt;th&gt;Shipping Address&lt;/th&gt;\n    &lt;th&gt;Amount&lt;/th&gt;\n   &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;  \n  &lt;%\n   List&lt;Invoice&gt; invoices = (List&lt;Invoice&gt;)request.getAttribute(\"invoices\");\n   for (Iterator&lt;Invoice&gt; iter = invoices.iterator(); iter.hasNext();) {\n    Invoice invoice = iter.next();\n  %&gt;\n  &lt;tr&gt;\n    &lt;td&gt;&lt;%=invoice.getId()%&gt;&lt;/td&gt;\n    &lt;td&gt;&lt;%=invoice.getCustomerName()%&gt;&lt;/td&gt;\n    &lt;td&gt;&lt;%=invoice.getShippingAddress()%&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;%\n   }\n  %&gt;\n  &lt;/tbody&gt;\n &lt;/table&gt;</pre> </li> </code></code>\n </ul>\n <code class=\"prettyprint\"><code class=\"prettyprint\"> <p> 您可以在 <a href=\"https://hub.jazz.net/project/mdesantis/J2EEBluemixSCO/overview/\" rel=\"nofollow,noindex\">DevOps Services 项目</a> 中的 <code class=\"prettyprint\">WebContent/invoices.jsp 中查看完整的代码。 </code></p><code class=\"prettyprint\"> <h2>第 2 步. 了解部署平台</h2> <p>要处理我们的 Java EE 应用程序，需要具备 3 样东西：一个 Java EE 容器、一个 DBMS 和一个用于支持通信的 JDBC 配置。我们将查看部署基础架构包含哪些要素，以及如何使用它们完成我们的任务。</p> \n    <ul> \n     <li> 在 SmartCloud Orchestrator 和 PureApplication 上，我们将使用 Virtual Application (VApp) Patterns 定义我们的应用程序的一个可部署模型。使用 Application Builder User Interface，我们可以使用节点并将这些节点彼此连接起来，以便定义逻辑拓扑结构。在我们的例子中，VApp 类似于： <br> <img alt=\"IBM SmartCloud Orchestrator - Virtual Application Builder 的屏幕截图\" class=\"alignCenter\" data-original=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958867363.jpg\"> \n      <ol> \n       <li> <strong>Enterprise Application</strong> 节点表示一个 WebSphere 经典实例，需要以配置参数形式上传一个 EAR 文件。 </li> \n       <li> <strong>Database</strong> 节点表示一个 DB2 实例，需要以配置参数形式上传一个 SQL 脚本。 </li> \n       <li> 它们之间的 <strong>连接</strong> 表示 JDBC 配置，需要以配置参数的形式获取数据源的 JNDI 名称。 </li> \n      </ol> </li> \n     <li> 在 Bluemix 上创建一个新应用程序时，我们有丰富的中间件运行时可供选择。 \n      <ol> \n       <li> WebSphere <strong>Liberty for Java</strong> 将满足我们的应用服务器需求。使用 CLI，可以推送一个完整的 appserver profile 归档文件，构建您的 EAR。 </li> \n       <li> <strong>SQL Database</strong> 服务将实现持久存储层。服务应该绑定到应用程序，所以这是应用服务器与数据库之间的链接。这会自动实现中间件之间的通信，将配置推送到一个名为 VCAP_SERVICES 的环境变量。这是 Bluemix 中的标准设置。 </li> \n      </ol> <img alt=\"Bluemix 仪表板显示添加了 Liberty for Java 运行时和 SQL Database 服务\" class=\"alignCenter\" data-original=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958868203.jpg\"> </li> \n    </ul> <h2>第 3 步. 了解访问服务</h2> <p>尽管似乎两个平台提供了相同的工具，但应用服务器和数据库配通信配置存在着细微的差异。对于 SmartCloud Orchestrator/PureApplication VApp，我们被明确要求提供一个 JNDI 名称来查找数据源，这不同于 Bluemix VCAP_SERVICES 方法。</p> <p> 仔细看看 Bluemix <a href=\"https://www.ng.bluemix.net/docs/#services/SQLDB/index.html%23bind_rdb\" rel=\"nofollow,noindex\">SQL Database 服务文档</a> ，您会注意到其中包含更多的内容。JDBC 自动配置特性创建了一个名为 <code class=\"prettyprint\">/jdbc/&lt;ServiceInstanceName&gt; 的 JNDI 资源，并向 Liberty 公开它。 </code></p><code class=\"prettyprint\"> <p>如果使用 SmartCloud 中的 Virtual Application 模式，那么 Orchestrator 会要求使用 JNDI 标准来检索数据源。但是，根据文档中的描述，还需要将要查找的 JNDI 名称编码到应用程序中：</p> <p>“应用程序应使用 Java Naming and Directory Interface (JNDI) 设置来定位数据源。在链接属性面板中指定 JNDI 名称。在部署期间，JNDI 名称被设置为相应的数据源，该名称必须与编码到应用程序中的名称相匹配。”</p> <p> Bluemix 既支持包含数据库连接配置的 <code class=\"prettyprint\">VCAP_SERVICES 变量，也支持可查找的 JNDI 名称。为了预防我们的代码变得依赖于 Bluemix VCAP_SERVICES，我们选择了 Java EE JNDI 标准。 </code></p><code class=\"prettyprint\"> <p>通过编码我们的 DAO，使用一个已知的 JNDI 名称来满足 SmartCloud Orchestrator 约束，并相应地在 Bluemix 端命名我们的 SQL Database 实例，我们的应用程序保留了可移植性。</p> <p> 所以我们的 <code class=\"prettyprint\">class=\"lazy-load\" data-original/com/ibm/vapps/dao/InvoicesDAO.java 类似于： </code></p><code class=\"prettyprint\"> <p> 点击查看代码清单 </p> \n       <div> \n        <p> 关闭 [x] </p> \n        <pre class=\"brush:java;toolbar:false\">public class InvoicesDAO {\n      \n private static final String DATASOURCE_JNDI_NAME = \"jdbc/DemoDataSource\"; \n \n private static Connection getJNDIConnection() throws NamingException, SQLException {\n  Context initialContext = new InitialContext();   \n  DataSource datasource = (DataSource) initialContext.lookup(DATASOURCE_JNDI_NAME);  \n  return datasource.getConnection();  \n }\n \n public static List&lt;Invoice&gt; retrieveInvoices() throws DatabaseException {\n  ...\n }\n}</pre> \n       </div> <h2>第 4 步. 打包您的应用程序</h2> \n       <ol> \n        <li> 按照 Java EE 标准来打包 Enterprise Application EAR 文件 ( <code class=\"prettyprint\">&lt;filename.ear&gt; )。 </code></li>\n        <code class=\"prettyprint\"> <li> 数据库是以一个包含 Database Definition Language 语句和一些示例数据的 SQL 文件形式 ( <code class=\"prettyprint\">&lt;filename.sql&gt; ) 进行分发的。 </code></li><code class=\"prettyprint\"> <li>总体上讲，我们的应用程序由 EAR 归档文件和 SQL 文件组成。</li> </code></code>\n       </ol><code class=\"prettyprint\"><code class=\"prettyprint\"> <h2>第 5 步. 部署到 Bluemix 并进行测试</h2> \n         <ol> \n          <li> 借助 Cloud Foundry CLI，您可以直接推送 WAR 文件，但不能推送 EAR 文件。为了在 Liberty 运行时中运行 EAR 文件，它必须是一个套装的服务器。您可以按照以下步骤构建自己的 EAR 文件： \n           <ol> \n            <li> 解压所提供的模板 <code class=\"prettyprint\">wlp.zip 。 </code></li>\n            <code class=\"prettyprint\"> <li> 将您的 EAR 文件重命名为 <code class=\"prettyprint\">bluemix.ear 。 </code></li><code class=\"prettyprint\"> <li> 将重命名的 EAR 文件复制到 <code class=\"prettyprint\">wlp/usr/servers/libertyProfileServer/apps 目录中，覆盖现有的占位符。 </code></li><code class=\"prettyprint\"> <li> 将目录结构重新打包为 <code class=\"prettyprint\">zip 归档文件；例如 <code class=\"prettyprint\">server.zip 。 </code></code></li><code class=\"prettyprint\"><code class=\"prettyprint\"> <li> 运行以下命令： <pre class=\"brush:java;toolbar:false\">cf push server.zip</pre> </li> </code></code></code></code></code>\n           </ol><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> </code></code></code></li>\n          <code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <li> 将一个 SQL Database 服务实例绑定到一个新应用程序。该实例的名称必须与 JNDI 资源相匹配。我们将我们的服务实例命名为 <code class=\"prettyprint\">DemoDataSource ，因为我们的应用程序应查找字符串 <code class=\"prettyprint\">jdbc/DemoDataSource 。自动配置特性将在名为 <code class=\"prettyprint\">jdbc/&lt;service_name&gt; 的容器中自动创建一个 JNDI 资源。 </code></code></code></li><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <li> 打开 SQL Database 实例管理应用程序，并加载该 SQL 文件以使用所提供的 SQL 脚本来初始化该数据库。 <img alt=\"初始化 SQL Database 实例\" class=\"alignCenter\" data-original=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958868726.jpg\"> </li> <li> 通过 Bluemix 所提供的 URL 访问该应用程序。 <img alt=\"访问该应用程序\" class=\"alignCenter\" data-original=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958869022.jpg\"> </li> </code></code></code></code></code></code>\n         </ol><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <h2>第 6 步. 部署到 SmartCloud Orchestrator 并进行测试</h2> \n            <ol> \n             <li> 首先从主菜单选择 <strong>Images&amp;Pattern &gt; Virtual Application Patterns</strong> 。单击绿色的加号创建一个新模式。 <img alt=\"绿色加号\" class=\"lazy-load\" data-original=\"\" width=\"21\" src=\"http://www.fzqblog.top/upload/201608/1471958869327.jpg\"> </li> \n             <li> 将一个 <strong>Enterprise Application</strong> 节点从左侧面板拖放到画布上。使用右侧的配置面板上传该 EAR 文件。 <img alt=\"上传 EAR 文件\" class=\"alignCenter\" data-original=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958869455.jpg\"> </li> \n             <li> 对 <strong>DB2 Database</strong> 节点执行相同操作并上传模式文件。 <img alt=\"上传模式文件\" class=\"alignCenter\" data-original=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958870193.jpg\"> </li> \n             <li> 绘制一个从应用程序到数据库的箭头，将这些节点连接起来。为该配置提供相同的 JNDI 名称 <code class=\"prettyprint\">jdbc/DemoDataSource 。单击 <strong>Deploy</strong> 。 <img alt=\"连接各个节点\" class=\"alignCenter\" data-original=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958870807.jpg\"> </code></li>\n             <code class=\"prettyprint\"> <li> 在部署过程结束时，我们之前部署的同一个应用程序将会在私有云上运行。 <img alt=\"运行的应用程序\" class=\"alignCenter\" data-original=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958871724.jpg\"> </li> </code>\n            </ol><code class=\"prettyprint\"> <h2>第 7 步. 使用 SmartCloud Orchestrator 自动化部署</h2> <p> 上述两个流程都可以使用 <a href=\"https://www-304.ibm.com/software/brandcatalog/ismlibrary/details?catalog.label=1TW10SO7R\" rel=\"nofollow,noindex\">SmartCloud Orchestrator Content Pack for Web Applications</a> 进行自动化。将它和所有依赖项安装在 <code class=\"prettyprint\">SmartCloudOrchestrator 目录中后，可以在您的 Self Service 目录中找到用来将您的 Java EE 应用程序部署在 SmartCloud Orchestrator 或 Bluemix 上的服务产品。我们看看 Bluemix 示例。 </code></p><code class=\"prettyprint\"> \n              <ol> \n               <li> 选择 Self-Service 目录中的服务产品： <img alt=\"在 IBM SmartCloud Orchestrator Self-Service 目录中选择 ‘Deploy Java EE Web Application to Bluemix’\" class=\"alignCenter\" data-original=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958872431.jpg\"> <img alt=\"选择 Java Enterprise 归档文件\" class=\"alignCenter\" data-original=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958873104.jpg\"> </li> \n               <li> 上传 SQL 脚本： <img alt=\"上传 SQL 脚本\" class=\"alignCenter\" data-original=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958873686.jpg\"> <img alt=\"部署 Java EE 应用程序\" class=\"alignCenter\" data-original=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958874476.jpg\"> <p> 单击 <strong>OK</strong> 按钮将会触发一个 SmartCloud Orchestrator 业务流程，该流程会联系 Bluemix 并执行您在第 4 步中手动执行的相同操作。 </p> </li> \n              </ol> <h2>第 8 步. 初始化该数据库</h2> <p>自动化数据库的初始化是 Bluemix 与 SmartCloud Orchestrator VApp 模式的另一个不同之处。</p> <p>在 Bluemix 手动步骤中，我们采用了一个用户界面来管理我们的数据库。但是，没有程序化的途径来执行同样的操作。此外，出于安全原因，Bluemix 服务在一个无法从互联网访问的内部网络中运行。这使我们不能配置 SQL 客户端来连接我们的托管数据库。</p> <p>Bluemix 最佳实践建议是，让应用程序包含用来启动数据库结构的逻辑。但是，因为我们希望保持应用程序可移植，所以我们使用一个简单的辅助应用程序开发了一个备用解决方案。</p> <p> 对于我们的自动化解决方案，我们根据 Bluemix 所提供的 <a href=\"https://ace.ng.bluemix.net/#/store/appTemplateGuid=nodejswebstarter&amp;fromCatalog=true\" rel=\"nofollow,noindex\">Node.js Cache Web Starter</a> 编写了一个 Node.js 应用程序。这个样板应用程序公开了一个 HTTP 端点来接受 POST 请求，这些请求的正文中包含一个为了 SQL Database 绑定的服务而运行的 SQL 脚本。辅助应用程序的寿命较短，因为它仅用于处理初始化数据库的 POST 请求，随后就会被删除。 </p> <p> <span>阅读：</span> <a href=\"https://www.ng.bluemix.net/docs/#starters/NodejsDataCache/index.html%23nodejsdatacache\" rel=\"nofollow,noindex\">使用 Node.js Cache Web Starter 创建应用程序</a> </p> <p> 初始化流程通过让 SmartCloud Orchestrator 控制一个 shell 脚本来实现，该脚本执行以下 <code class=\"prettyprint\">cf CLI 命令： </code></p><code class=\"prettyprint\"> \n               <ol> \n                <li> 使用您的凭据登录。 <pre class=\"brush:java;toolbar:false\">cf login -a http://api.stage1.ng.bluemix.net -u ${USER} -p ${PASSWORD}</pre> </li> \n                <li> 使用 <code class=\"prettyprint\">–no-start 选项推送一个 Liberty 套装服务器，防止应用程序立即启动。 <pre class=\"brush:java;toolbar:false\">cf push ${APP_NAME} -p ${PACKED_SERVER}.zip --no-start</pre> </code></li>\n                <code class=\"prettyprint\"> <li> 创建一个 SQL DB 服务实例。 <pre class=\"brush:java;toolbar:false\">cf create-service sqldb sqldb_small ${JNDI_NAME}</pre> </li> <li> 将 SQL DB 服务绑定到 Liberty 应用程序。 <pre class=\"brush:java;toolbar:false\">cf bind-service ${APP_NAME} ${JNDI_NAME}</pre> </li> <li> 推送辅助应用程序。 <pre class=\"brush:java;toolbar:false\">cf push ${APP_NAME}_dbinit -c \"node app.js\" -p $WORK_DIR/dbinit.zip –no-start</pre> </li> <li> 将辅助应用程序绑定到同一个 SQL DB 服务实例。 <pre class=\"brush:java;toolbar:false\">cf bind-service ${APP_NAME}_dbinit ${JNDI_NAME}</pre> </li> <li> 启动辅助应用程序。 <pre class=\"brush:java;toolbar:false\">cf start ${APP_NAME}_dbinit</pre> </li> <li> 执行一个 HTTP POST，该请求是通过要对数据库执行的 SQL 语句来发送的。 <p> 点击查看代码清单 </p> \n                  <div> \n                   <p> 关闭 [x] </p> \n                   <pre class=\"brush:java;toolbar:false\">curl -i -X POST -H \"Content-Type: application/x-www-form-urlencoded\" --data \"@${SQL_FILE}{APP_NAME}\" http://${APP_NAME}-dbinit.stage1.mybluemix.net/runSQLScript</pre> \n                  </div> </li> <li> 解除辅助应用程序与 SQL DB 服务实例的绑定。 <pre class=\"brush:java;toolbar:false\">cf unbind-service ${APP_NAME}_dbinit ${JNDI_NAME}</pre> </li> <li> 从 Bluemix 空间删除辅助应用程序。 <pre class=\"brush:java;toolbar:false\">cf d -f ${APP_NAME}_dbinit</pre> </li> <li> 启动 Liberty 应用程序。 <pre class=\"brush:java;toolbar:false\">cf start ${APP_NAME}</pre> </li> </code>\n               </ol><code class=\"prettyprint\"> <p>在 SmartCloud Orchestrator 中，数据库由 Pattern Engine 自动初始化，该引擎处理作为输入提供的脚本。在 DB2 实例启动时，您将发现您的数据库已经被初始化。</p> <p>通过始终遵守 Java EE 标准，Java 的“编写一次，随处运行”的承诺可以在 IBM Bluemix 和内部部署的虚拟应用程序模式上保持不变。在本教程中，您看到了数据库连接上的差异，以及如何使用 JNDI 保持代码可移植性。此外，您还看到了一项技术，该技术能够在不将初始化过程编码到应用程序中的情况下自动化 Bluemix 数据库的初始化。只需少量的额外工作，您的应用程序就能独立于它所部署到的平台。</p> <p>感谢和我们一起研究 Bluemix 数据库初始化的团队成员：</p> <p> <a href=\"https://www.ibm.com/developerworks/community/profiles/html/profileView.do?key=12dfbff1-b30f-41f1-80c3-6a32af4cabe7\" rel=\"nofollow,noindex\">Claudio Marinelli</a> </p> <p> <a href=\"https://www.ibm.com/developerworks/community/profiles/html/profileView.do?key=3ff992e5-adf3-4516-b3df-6815c2f2c9cd\" rel=\"nofollow,noindex\">Gianluca Bernardini</a> </p> <p> <a href=\"https://www.ibm.com/developerworks/community/profiles/html/profileView.do?key=b00f2892-a7cf-4ff4-a87b-5e70905993b3\" rel=\"nofollow,noindex\">Paolo Ottaviano</a> </p> <p>本教程中使用到的 Bluemix 服务:</p> \n                <ul> \n                 <li> <a href=\"https://ace.ng.bluemix.net/#/store/serviceOfferingGuid=0d5a104d-d700-4315-9b7c-8f84a9c85ae3&amp;fromCatalog=true\" rel=\"nofollow,noindex\">SQL Database 服务</a> 向您的应用程序添加一个按需关系数据库。 </li> \n                 <li> <a href=\"https://ace.ng.bluemix.net/#/store/fromCatalog=true&amp;appTemplateGuid=javaHelloWorld\" rel=\"nofollow,noindex\">Liberty for Java 运行时</a> 帮助您轻松地开发、部署和扩展 Java Web 应用程序。 </li> \n                 <li> <a href=\"https://ace.ng.bluemix.net/#/store/appTemplateGuid=nodejswebstarter&amp;fromCatalog=true\" rel=\"nofollow,noindex\">Node.js Cache Web Starter</a> 是一个示例应用程序，演示了如何结合使用 IBM DataCache Service 和 Node.js 运行时 </li> \n                </ul> </code></code></code></code></code></code></code></code></code></code></code></code></code></code></code>\n</div>\n<p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\">转自：http://www.ibm.com/developerworks/cn/java/j-portable-j2ee-app/index.html?ca=drs-</code></code></code></p>\n<code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> </code></code></code>','  作为 Java 开发人员，您一定希望实现 Java 的“编写一次，随处运行”的承诺。如果在 IBM Bluemix 与 SmartCloud Orchestrator 或 PureApplication System 这样的内部云环境之间迁移应用程序，如何确保这一承诺得以实现？  在开始使用不同的部署平台时，您的应用程序代码可能会意外地变得非常依赖平台，偏离了“随处运行” 的价值主张。在本教程......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:27:55',0,2,0,0,'http://www.fzqblog.top/upload/201608/1471958865377.jpg|http://www.fzqblog.top/upload/201608/1471958865597.jpg|http://www.fzqblog.top/upload/201608/1471958867363.jpg|http://www.fzqblog.top/upload/201608/1471958868203.jpg|http://www.fzqblog.top/upload/201608/1471958868726.jpg|http://www.fzqblog.top/upload/201608/1471958869022.jpg|http://www.fzqblog.top/upload/201608/1471958869327.jpg|http://www.fzqblog.top/upload/201608/1471958869455.jpg|http://www.fzqblog.top/upload/201608/1471958870193.jpg|http://www.fzqblog.top/upload/201608/1471958870807.jpg|http://www.fzqblog.top/upload/201608/1471958871724.jpg|http://www.fzqblog.top/upload/201608/1471958872431.jpg|http://www.fzqblog.top/upload/201608/1471958873104.jpg|http://www.fzqblog.top/upload/201608/1471958873686.jpg|http://www.fzqblog.top/upload/201608/1471958874476.jpg|',NULL,1),(365,1,6,'js解析文本数据 xml格式数据,json数据和ajax和servlet交互乱码解决','<div> \n <p>AjAx与数据库的交互,一般返回的是字符串, 常见的js解析有 &nbsp;文本解析,xml格式解析,json解析</p> \n <p>1,在ajax与后台的交互中经常会出现乱码,</p> \n <p>解决办法: 在后台获取数据的时候要改变其编码</p> \n <p>//获取jsp页面传递过来的userName</p> \n <pre class=\"brush:java;toolbar:false\">String user= request.getParameter(\"userName\");\n//使用String来改变获取到的字符集编码\nString userid = new String(user.getBytes(\"iso8859-1\"),\"GBK\");</pre> \n <p> 2,文本解析 <a href=\"http://baihe747.iteye.com/blog/2164311\" target=\"_blank\" rel=\"nofollow,noindex\">http://baihe747.iteye.com/blog/2164311</a> </p> \n <p>3,js解析xml格式的数据 &nbsp;例子: xml动态检查用户名是否存在</p> \n <p>后台代码:</p> \n <pre class=\"brush:java;toolbar:false\">/**xml传递数据\n * \n * @author Administrator 通过局部刷新来实现数据的查找Ajax\n */\npublic class AjaxServlet extends HttpServlet {\n\n @Override\n protected void doPost(HttpServletRequest request,\n   HttpServletResponse response) throws ServletException, IOException {\n  doGet(request, response);\n }\n\n @Override\n protected void doGet(HttpServletRequest request,\n   HttpServletResponse response) throws ServletException, IOException {\n  //xml传递数据:response.setContentType(\"text/xml\");必须是xml的\n \n  response.setCharacterEncoding(\"GBK\");\n  request.setCharacterEncoding(\"GBK\");\n  PrintWriter out = response.getWriter();\n  response.setContentType(\"text/xml\");\n  //获取url传递的参数\n  //解决js与servlet之间数据的乱码问题\n  String userName = request.getParameter(\"userName\");\n  String str =new String(userName.getBytes(\"iso8859-1\"),\"GBK\");\n  System.out.println(str);\n  \n  //修改点二:xml的返回格式必须是有开始和结束的\n  StringBuffer buffer = new StringBuffer();\n  buffer.append(\"&lt;msg&gt;\");\n  //假设连接上数据库,判断 并给予返回值 ,ok表示可以注册,ON表示不可以注册\n  if (\"123\".equals(str)) {\n   buffer.append(str +\"用户名已存在\").append(\"&lt;/msg&gt;\");\n  } else {\n   buffer.append(str +\"可以注册!!!\").append(\"&lt;/msg&gt;\");\n  }\n  //输出StringBuffer字符串\n  out.print(buffer);\n }\n\n}</pre> \n <p>jsp界面代码</p> \n <pre class=\"brush:java;toolbar:false\">&lt;script type=\"text/javascript\" class=\"lazy-load\" data-original=\"js/jquery-1.8.3.js\"&gt;\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n &lt;script type=\"text/javascript\"&gt;\n  //javascript中需要引入Jquery包就不能将函数写在同一级下\n  var xmlHttp;\n  function fun_user() {\n   //使用Jquery获取id的值\n   var username = $(\"#userName\").val();\n   //创建XMLHttpRequest的对象,js创建对象和java类似,也是使用new\n   //XMLHttpRequest的open(),send(),abort(),readyState,responseText\n   xmlHttp = new XMLHttpRequest();\n   //    if(xmlHttp){\n   //   alert(\"创建\")\n   //     }else{\n   //    alert(\"出错了\");\n   // }\n   //2,创建回调函数callback\n   xmlHttp.onreadystatechange = callback;\n   //3,创建与Servlet的连接符,定义连接的方式,是否为异步,是否需要账号和密码验证\n   var url=\"AjaxServlet?userName=\" + username;\n   xmlHttp.open(\"GET\", url, true);\n   //4,发送请求头信息\n  // xmlHttp.setRequestHeader(\"Content-Type\", \"application/x-www-from-urlencoded\");\n   //5,发送数据,数据已经通过连接方式传送,所以这里只需要发送null\n   xmlHttp.send(null);\n  //  xmlHttp.send(\"userName=\" + username);\n  }\n //回调函数callback\n  function callback() {\n   //判断是否Ajax交互完成\n  // alert(xmlHttp.readyState);\n   //readyState的书中状态\n   if (xmlHttp.readyState == 4) {\n    //200表示网页是否找到\n    if (xmlHttp.status == 200) {\n     var xmlobj=xmlHttp.responseXML;\n     //&lt;msg&gt; &lt;/msg&gt;\n     //使用document来解析返回的xml数据获取节点,返回一组元素\n     var domxml =xmlobj.getElementsByTagName(\"msg\");\n    if(domxml.length&gt;0){ \n     //获取domxml的第一个节点 firstChild\n      var responsexml =domxml[0].firstChild;\n     //获取节点的值nodeValue\n      var nodexml=responsexml.nodeValue;\n      alert(\"长度为:\"+nodexml);\n     //以文本的方式返回值\n    // var xmltext = xmlHttp.responseText;\n    // alert(xmltext);\n    }else{\n     alert(\"解析出错:\"+xmlHttp.responseText);\n     }\n    }\n   }\n  }\n &lt;/script&gt;\n &lt;form&gt;\n  用户名: &lt;input type=\"text\" id=\"userName\" onblur=\"fun_user()\" /&gt;\n  &lt;div id=\"divName\"&gt;&lt;/div&gt;\n  &lt;br /&gt; 密 码: &lt;input type=\"password\" id=\"userPwd\" /&gt;\n  &lt;div id=\"divPwd\"&gt;&lt;/div&gt;\n  &lt;input type=\"button\" value=\"提交\" /&gt;\n &lt;/form&gt;\n</pre> \n <p> <img class=\"alignCenter\" data-original=\"\" alt=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958877427.png\"> </p> \n <p> 3,js解析json数据; &nbsp;json格式 <span>动态检查用户名是否存在</span> </p> \n <p>后台关键代码;</p> \n <pre class=\"brush:java;toolbar:false\">//接受数据\n  String user= request.getParameter(\"userName\");\n  String userid = new String(user.getBytes(\"iso8859-1\"),\"GBK\");\n  System.out.println(userid);\n   //创建java转json的数据对象\n   String jsonstr=\"{}\";\n   JSONObject jsonsql = JSONObject.fromObject(jsonstr);\n    //00001 \n     // id: 1 2 3  \n     // menu: 工资   奖金   会议室的申请  \n     // href: salary.jsp  money.jsp  meetingRoom.jsp    \n   //存储Jsonobject对象的队列\n   ArrayList&lt;JSONObject&gt; jsonlist= new ArrayList&lt;JSONObject&gt;(); \n   try {\n   //连接数据库查询用户的权限\n   Connection conn=DBUilt.getConn();\n   String consql =\" select  parentnode, menuname,menuhref from role_menu where parentnode   in (select menuid from role_role where userid=?)\";\n  PreparedStatement pstm=conn.prepareStatement(consql);\n  pstm.setString(1, userid);\n  ResultSet rs=pstm.executeQuery();\n  while( rs.next()){\n   //创建java转json的对象\n   JSONObject pstmjson = JSONObject.fromObject(jsonstr);\n   pstmjson.put(\"id\", rs.getString(1));\n   pstmjson.put(\"menu\", rs.getString(2));\n   pstmjson.put(\"href\", rs.getString(3)); \n   jsonlist.add(pstmjson); //创建json队列存放数据库取出来的对象\n  }\n  rs.close();\n    } catch (Exception e) {\n  e.printStackTrace();\n   }\n   //写到jsp页面\n  out.write(jsonlist.toString());\n</pre> \n <p>jsp前台代码;</p> \n <pre class=\"brush:java;toolbar:false\">&lt;script type=\"text/javascript\" class=\"lazy-load\" data-original=\"js/jquery-1.8.3.js\"&gt;\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n &lt;script type=\"text/javascript\"&gt;\n  //javascript中需要引入Jquery包就不能将函数写在同一级下\n  var xmlHttp;\n  function fun_user() {\n   //使用Jquery获取id的值\n   var username = $(\"#userName\").val();\n   //创建XMLHttpRequest的对象,js创建对象和java类似,也是使用new\n   //XMLHttpRequest的open(),send(),abort(),readyState,responseText\n   xmlHttp = new XMLHttpRequest();\n   // if(xmlHttp){\n   //        alert(\"创建\")\n   //     }else{\n   //    alert(\"出错了\");\n   // }\n   //2,创建回调函数callback\n   xmlHttp.onreadystatechange = callback;\n   //3,创建与Servlet的连接符,定义连接的方式,是否为异步,是否需要账号和密码验证\n   var url=\"AJAXJson?userName=\" + username;\n   xmlHttp.open(\"POST\", url, true);\n   //4,发送请求头信息\n  // xmlHttp.setRequestHeader(\"Content-Type\", \"application/x-www-from-urlencoded\");\n   //5,发送数据,数据已经通过连接方式传送,所以这里只需要发送null\n   xmlHttp.send(null);\n  //  xmlHttp.send(\"userName=\" + username);\n  }\n      //回调函数callback\n  function callback() {\n   //判断是否Ajax交互完成\n  // alert(xmlHttp.readyState);\n   //readyState的书中状态\n   if (xmlHttp.readyState == 4) {\n    //200表示网页是否找到\n    if (xmlHttp.status == 200) {\n     //纯文本的方式返回\n     var xmltext=xmlHttp.responseText;\n     alert(xmltext);\n     //以文本的方式返回值 eval将json数据解析成\n     //var xmltext = eval(xmlHttp.responseText);\n     //alert(xmltext[0].menu+\"连接\"+ xmltext[0].href); \n    }\n   }\n  }\n &lt;/script&gt;\n &lt;form&gt;\n  用户名: &lt;input type=\"text\" id=\"userName\" onblur=\"fun_user()\" /&gt;\n  &lt;div id=\"divName\"&gt;&lt;/div&gt;\n  &lt;br /&gt; 密 码: &lt;input type=\"password\" id=\"userPwd\" /&gt;\n  &lt;div id=\"divPwd\"&gt;&lt;/div&gt;\n  &lt;input type=\"button\" value=\"提交\" /&gt;\n &lt;/form&gt;\n</pre> \n <p> <img class=\"alignCenter\" data-original=\"\" alt=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958877582.png\"> </p> \n</div>\n<p>转自：http://baihe747.iteye.com/blog/2167169</p>','  AjAx与数据库的交互,一般返回的是字符串, 常见的js解析有  文本解析,xml格式解析,json解析  1,在ajax与后台的交互中经常会出现乱码,  解决办法: 在后台获取数据的时候要改变其编码  //获取jsp页面传递过来的userName  String user= request.getParameter(\"userName\");//使用String来改变获取到的字符集编码Stri......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:27:57',0,0,0,0,'http://www.fzqblog.top/upload/201608/1471958877427.png|http://www.fzqblog.top/upload/201608/1471958877582.png|',NULL,1),(368,1,6,'LINUX下使用Shell自动监控tomcat并且执行重启操作','<div> \n <div> \n  <p>转自http://my.oschina.net/chinaearl/blog/111830，如有侵权，请通知我，我及时删除。</p> \n  <p>下面的文件名称为monitor.sh，如果没有执行权限请使用chmod 777 monitor.sh</p> \n </div> \n <div> \n  <p> [plain] <a href=\"http://blog.csdn.net/ygh_0912/article/details/11081219\" title=\"view plain\" rel=\"nofollow,noindex\">view plain</a> <a href=\"http://blog.csdn.net/ygh_0912/article/details/11081219\" title=\"copy\" rel=\"nofollow,noindex\">copy</a> </p> \n  <ol> \n   <li>#!/bin/sh&nbsp;&nbsp;</li> \n   <li></li> \n   <li>#&nbsp;func:自动监控tomcat脚本并且执行重启操作&nbsp;&nbsp;</li> \n   <li>#&nbsp;author:danny&nbsp;&nbsp;</li> \n   <li>#&nbsp;date:02/20/2013&nbsp;&nbsp;</li> \n   <li>#&nbsp;DEFINE&nbsp;&nbsp;</li> \n   <li></li> \n   <li>#&nbsp;获取tomcat进程ID&nbsp;&nbsp;</li> \n   <li>TomcatID=$(ps&nbsp;-ef&nbsp;|grep&nbsp;tomcat&nbsp;|grep&nbsp;-w&nbsp;\'dw\\/apache-tomcat-7.0.34\\/conf\'|grep&nbsp;-v&nbsp;\'grep\'|awk&nbsp;\'{print&nbsp;$2}\')&nbsp;&nbsp;</li> \n   <li></li> \n   <li>#&nbsp;tomcat启动程序(这里注意tomcat实际安装的路径)&nbsp;&nbsp;</li> \n   <li>StartTomcat=/home/dw/apache-tomcat-7.0.34/bin/startup.sh&nbsp;&nbsp;</li> \n   <li>#TomcatCache=/usr/apache-tomcat-5.5.23/work&nbsp;&nbsp;</li> \n   <li></li> \n   <li>#&nbsp;定义要监控的页面地址&nbsp;&nbsp;</li> \n   <li>WebUrl=http://haoyayi.eyar.com&nbsp;&nbsp;</li> \n   <li></li> \n   <li>#&nbsp;日志输出&nbsp;&nbsp;</li> \n   <li>GetPageInfo=/dev/null&nbsp;&nbsp;</li> \n   <li>TomcatMonitorLog=/tmp/TomcatMonitor.log&nbsp;&nbsp;</li> \n   <li></li> \n   <li>Monitor()&nbsp;&nbsp;</li> \n   <li>{&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;echo&nbsp;\"[info]开始监控tomcat...[$(date&nbsp;+\'%F&nbsp;%H:%M:%S\')]\"&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;if&nbsp;[[&nbsp;$TomcatID&nbsp;]];then&nbsp;#&nbsp;这里判断TOMCAT进程是否存在&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"[info]当前tomcat进程ID为:$TomcatID,继续检测页面...\"&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;检测是否启动成功(成功的话页面会返回状态\"200\")&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;TomcatServiceCode=$(curl&nbsp;-s&nbsp;-o&nbsp;$GetPageInfo&nbsp;-m&nbsp;10&nbsp;--connect-timeout&nbsp;10&nbsp;$WebUrl&nbsp;-w&nbsp;%{http_code})&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;[&nbsp;$TomcatServiceCode&nbsp;-eq&nbsp;200&nbsp;];then&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"[info]页面返回码为$TomcatServiceCode,tomcat启动成功,测试页面正常......\"&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"[error]tomcat页面出错,请注意......状态码为$TomcatServiceCode,错误日志已输出到$GetPageInfo\"&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"[error]页面访问出错,开始重启tomcat\"&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#kill&nbsp;-9&nbsp;$TomcatID&nbsp;&nbsp;#&nbsp;杀掉原tomcat进程&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#sleep&nbsp;3&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#rm&nbsp;-rf&nbsp;$TomcatCache&nbsp;#&nbsp;清理tomcat缓存&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#$StartTomcat&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;fi&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;else&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"[error]tomcat进程不存在!tomcat开始自动重启...\"&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"[info]$StartTomcat,请稍候......\"&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;#rm&nbsp;-rf&nbsp;$TomcatCache&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;#$StartTomcat&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;fi&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;echo&nbsp;\"------------------------------\"&nbsp;&nbsp;</li> \n   <li>}&nbsp;&nbsp;</li> \n   <li>Monitor&gt;&gt;$TomcatMonitorLog&nbsp;&nbsp;</li> \n  </ol> \n </div> \n <p>下面是的这段代码是监控tomcat是否运行，如果运行，则将其停止.文件名称本人叫做shutdown.sh </p> \n <div> \n  <p> [plain] <a href=\"http://blog.csdn.net/ygh_0912/article/details/11081219\" title=\"view plain\" rel=\"nofollow,noindex\">view plain</a> <a href=\"http://blog.csdn.net/ygh_0912/article/details/11081219\" title=\"copy\" rel=\"nofollow,noindex\">copy</a> </p> \n  <ol> \n   <li>#!/bin/sh&nbsp;&nbsp;</li> \n   <li>TomcatID=$(ps&nbsp;-ef&nbsp;|grep&nbsp;hudson-3.01&nbsp;|grep&nbsp;java&nbsp;|&nbsp;awk&nbsp;\'&nbsp;{&nbsp;print&nbsp;$2&nbsp;}&nbsp;\')&nbsp;&nbsp;</li> \n   <li>echo&nbsp;\"tomcat的pid为$TomcatID\"&nbsp;&nbsp;</li> \n   <li>Monitor(){&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"[info]开始监控tomcat...[$(date&nbsp;+\'%F&nbsp;%H:%M:%S\')]\"&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;[[&nbsp;$TomcatID&nbsp;]]&nbsp;&nbsp;</li> \n   <li>#&nbsp;这里判断TOMCAT进程是否存在&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;then&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"tomca启动正常\"&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kill&nbsp;-9&nbsp;$TomcatID&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempTomcatID=$(ps&nbsp;-ef&nbsp;|grep&nbsp;hudson-3.01&nbsp;|grep&nbsp;java&nbsp;|&nbsp;awk&nbsp;\'&nbsp;{&nbsp;print&nbsp;$2&nbsp;}&nbsp;\')&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;[[&nbsp;$tempTomcatID&nbsp;]]&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;then&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"停止失败\"&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"成功停止\"&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fi&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"tomcat没有启动\"&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fi&nbsp;&nbsp;</li> \n   <li>}&nbsp;&nbsp;</li> \n   <li></li> \n   <li></li> \n   <li>Monitor&nbsp;&nbsp;</li> \n  </ol> \n </div> \n <h2>下面的代码是启动tomca并将其日志显示出来,文件名称本人叫做startup.sh </h2> \n <div> \n  <p> [plain] <a href=\"http://blog.csdn.net/ygh_0912/article/details/11081219\" title=\"view plain\" rel=\"nofollow,noindex\">view plain</a> <a href=\"http://blog.csdn.net/ygh_0912/article/details/11081219\" title=\"copy\" rel=\"nofollow,noindex\">copy</a> </p> \n  <ol> \n   <li>cd&nbsp;/home/test/hudson-3.01/bin&nbsp;&amp;&amp;&nbsp;./startup.sh&nbsp;&amp;&amp;&nbsp;tail&nbsp;-f&nbsp;../logs/catalina.out &nbsp;</li> \n  </ol> \n </div> \n</div>\n<p>转自：http://itindex.net/detail/52327-linux-shell-tomcat</p>','     转自http://my.oschina.net/chinaearl/blog/111830，如有侵权，请通知我，我及时删除。   下面的文件名称为monitor.sh，如果没有执行权限请使用chmod 777 monitor.sh        [plain] view plain copy        #!/bin/sh          # func:自动监控tomcat脚本并且执......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:28:46',0,1,0,0,'',NULL,1),(369,1,6,'struts2 返回 json','<div> \n <p>1、action 片段</p> \n <pre class=\"brush:java;toolbar:false\">public Map responseJson;   \n    public Map getResponseJson() {   \n        return responseJson;   \n    }   \n    public void setResponseJson(Map responseJson) {   \n        this.responseJson = responseJson;   \n    }</pre> \n <pre class=\"brush:java;toolbar:false\">Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();  \n  List&lt;Map&lt;String, Object&gt;&gt; list = new ArrayList&lt;Map&lt;String, Object&gt;&gt;();  \n  \n  \n   Map&lt;String, Object&gt; m = new HashMap&lt;String, Object&gt;();  \n   m.put(\"m0001\",m0005.getM0001()); \n   m.put(\"m0002\",m0005.getM0002()); \n   \n   list.add(m); \n\n  map.put(\"status\", 1);\n  map.put(\"M0005List\", list);\n  this.setResponseJson(map);</pre> \n <p>2、struts2 XML</p> \n <pre class=\"brush:java;toolbar:false\">&lt;package name=\"shopManagerJson\" extends=\"json-default\" namespace=\"/shopManagerJson\"&gt;\n  &lt;action name=\"*\"\n   class=\"com.mall.shop.action.ShopAction\" method=\"{1}\"&gt;\n   &lt;result type=\"json\"&gt;\n    &lt;!-- 这里指定将被Struts2序列化的属性，该属性在action中必须有对应的getter方法 --&gt;\n    &lt;param name=\"root\"&gt;responseJson&lt;/param&gt;\n   &lt;/result&gt;\n   &lt;/action&gt;\n &lt;/package&gt;</pre> \n <p>3、js</p> \n <pre class=\"brush:java;toolbar:false\">$.post(postUrl,{gid:goodsId,num:goodsNum,sid:shopid},function(data){\n             \n             if(data.status){\n\n              tdTemp.empty();\n              \n              $.each(data.M0005List,function(i, item){\n                       \n                       tdTemp.append(\'&lt;td bgcolor=\"#ffffff\" align=\"center\" style=\"width:250px;\" valign=\"middle\"&gt;&lt;a href=\"&lt;%=basePath%&gt;goodsManager/toFindGoodsPage.do?id=\'+item.m0003+\'\" target=\"_blank\"&gt;&lt;img style=\"width:50px; height:50px;\" class=\"lazy-load\" data-original=\"&lt;%=basePath%&gt;photo/\'+item.m0010+\'\" border=\"0\"&gt;&lt;br&gt;\'+item.m0007+\'&lt;/a&gt; &lt;/td&gt;\');\n                      tdTemp.append(\'&lt;input name=\"goodsId\" type=\"hidden\" value=\"\'+item.m0003+\'\"&gt;&lt;input name=\"sid\" type=\"hidden\" value=\"\'+item.m0001+\'\"&gt;\');\n                     tdTemp.append(\'&lt;td bgcolor=\"#ffffff\" align=\"center\"&gt;\'+item.m0004+\' &lt;br&gt;&lt;/td&gt;\');\n                     tdTemp.append(\'&lt;td align=\"center\" bgcolor=\"#ffffff\"&gt;&lt;span class=\"price\"&gt;\'+item.m0008.toFixed(1)+\'&lt;/span&gt;&lt;/td&gt;\');\n                     tdTemp.append(\'&lt;td align=\"center\" bgcolor=\"#ffffff\"&gt;&lt;input class=\"min\" name=\"\" type=\"button\" value=\"-\"&gt; &lt;input type=\"text\" name=\"\" id=\"goods_number\" readonly=\"readonly\" value=\"\'+item.m0005+\'\" size=\"4\" class=\"text_box\" style=\"text-align:center \"&gt; &lt;input class=\"add\" name=\"\" type=\"button\" value=\"+\"&gt; &lt;/td&gt;\');\n                    tdTemp.append(\'&lt;td align=\"center\" bgcolor=\"#ffffff\"&gt;&lt;span class=\"priceSmallTotal\"&gt;\'+item.m0006.toFixed(1)+\'&lt;/span&gt;&lt;/td&gt;\');\n                   tdTemp.append(\'&lt;td align=\"center\" bgcolor=\"#ffffff\"&gt;&lt;a href=\"javascript:if (confirm(\\\'您确实要把该商品移出购物车吗？\\\')) location.href=\\\'&lt;%=basePath%&gt;shopManager/delM0005.do?id=\'+item.m0001+\'\\\';\"&gt;删除&lt;/a&gt;&lt;/td&gt;\');\n                      \n\n                    \n                    });\n                    \n              \n             }else{\n              alert(\'获取失败！\');\n              window.location.reload();\n             }\n             \n            },\'json\');</pre> \n</div>\n<p>转自：http://chang8536.iteye.com/blog/2170455</p>','  1、action 片段  public Map responseJson;       public Map getResponseJson() {           return responseJson;       }       public void setResponseJson(Map responseJson) {           this.responseJson = ......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:28:46',0,0,0,0,'',NULL,1),(370,1,6,'jsp Cookie记住用户的登录状态','<div> \n <h2>jsp Cookie记住用户的登录状态 </h2> \n <p> 2014-12-29 10:53:40&nbsp;&nbsp;www.hackbase.com&nbsp;&nbsp;来源：互联网 </p> \n <p>Login.jsp[html] view plaincopy&lt;%@ page language=\"java\" import=\"java.util.*,java.net.*\" contentType=\"text/html; charset=utf-8\"%&gt; &lt;% String path = request.getContextPath(); String basePath ...</p> \n <div> \n  <p>Login.jsp</p> \n  <div> \n   <p> <b>[html]</b> <a href=\"http://blog.csdn.net/u012079603/article/details/42234459#\" title=\"view plain\" rel=\"nofollow,noindex\">view plain</a> <a href=\"http://blog.csdn.net/u012079603/article/details/42234459#\" title=\"copy\" rel=\"nofollow,noindex\">copy</a> <img class=\"lazy-load\" data-original=\"\" width=\"12\" height=\"12\" alt=\"在CODE上查看代码片\" src=\"http://www.fzqblog.top/upload/201608/1471958927434.png\"> <img class=\"lazy-load\" data-original=\"\" width=\"12\" height=\"12\" alt=\"派生到我的代码片\" src=\"http://www.fzqblog.top/upload/201608/1471958927576.jpg\"> </p> \n   <ol start=\"1\"> \n    <li> <span> <span>&lt;</span> <span>%@&nbsp;page&nbsp;</span> <span>language</span> <span>=</span> <span>\"java\"</span> <span>&nbsp;</span> <span>import</span> <span>=</span> <span>\"java.util.*,java.net.*\"</span> <span>&nbsp;</span> <span>contentType</span> <span>=</span> <span>\"text/html;&nbsp;charset=utf-8\"</span> <span>%</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> <span>&lt;</span> <span>%&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> String&nbsp; <span>path</span> <span>&nbsp;=&nbsp;</span> <span>request</span> <span>.getContextPath();&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> String&nbsp; <span>basePath</span> <span>&nbsp;=&nbsp;</span> <span>request</span> <span>.getScheme()+\"://\"+request.getServerName()+\":\"+request.getServerPort()+path+\"/\";&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> % <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;</span> </li> \n    <li> <span> &lt;!DOCTYPE&nbsp;HTML&nbsp;PUBLIC&nbsp;\"-//W3C//DTD&nbsp;HTML&nbsp;4.01&nbsp;Transitional//EN\" <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> <span>&lt;</span> <span>html</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp; <span>&lt;</span> <span>head</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>base</span> <span>&nbsp;</span> <span>href</span> <span>=</span> <span>\"&lt;%=basePath%&gt;\"</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>title</span> <span>&gt;</span> <span>My&nbsp;JSP&nbsp;\'index.jsp\'&nbsp;starting&nbsp;page</span> <span>&lt;/</span> <span>title</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>meta</span> <span>&nbsp;</span> <span>http-equiv</span> <span>=</span> <span>\"pragma\"</span> <span>&nbsp;</span> <span>content</span> <span>=</span> <span>\"no-cache\"</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>meta</span> <span>&nbsp;</span> <span>http-equiv</span> <span>=</span> <span>\"cache-control\"</span> <span>&nbsp;</span> <span>content</span> <span>=</span> <span>\"no-cache\"</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>meta</span> <span>&nbsp;</span> <span>http-equiv</span> <span>=</span> <span>\"expires\"</span> <span>&nbsp;</span> <span>content</span> <span>=</span> <span>\"0\"</span> <span>&gt;</span> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>meta</span> <span>&nbsp;</span> <span>http-equiv</span> <span>=</span> <span>\"keywords\"</span> <span>&nbsp;</span> <span>content</span> <span>=</span> <span>\"keyword1,keyword2,keyword3\"</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>meta</span> <span>&nbsp;</span> <span>http-equiv</span> <span>=</span> <span>\"description\"</span> <span>&nbsp;</span> <span>content</span> <span>=</span> <span>\"This&nbsp;is&nbsp;my&nbsp;page\"</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;!--</span> &nbsp; </span> </li> \n    <li> <span> <span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;link&nbsp;rel=\"stylesheet\"&nbsp;type=\"text/css\"&nbsp;href=\"styles.css\"&gt;</span> &nbsp; </span> </li> \n    <li> <span> <span>&nbsp;&nbsp;&nbsp;&nbsp;--&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp; <span>&lt;/</span> <span>head</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp; <span>&lt;</span> <span>body</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>h1</span> <span>&gt;</span> <span>用户登录</span> <span>&lt;/</span> <span>h1</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>hr</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>%&nbsp;&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;request.setCharacterEncoding(\"utf-8\");&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp; <span>username</span> <span>=</span> <span>\"\"</span> <span>;&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp; <span>password</span> <span>&nbsp;=&nbsp;</span> <span>\"\"</span> <span>;&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Cookie[]&nbsp; <span>cookies</span> <span>&nbsp;=&nbsp;</span> <span>request</span> <span>.getCookies();&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(cookies!=null&amp;&amp;cookies.length <span>&gt;</span> <span>0)&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(Cookie&nbsp;c:cookies)&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(c.getName().equals(\"username\"))&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span>username</span> <span>&nbsp;=&nbsp;&nbsp;</span> <span>URLDecoder</span> <span>.decode(c.getValue(),\"utf-8\");&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(c.getName().equals(\"password\"))&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span>password</span> <span>&nbsp;=&nbsp;&nbsp;</span> <span>URLDecoder</span> <span>.decode(c.getValue(),\"utf-8\");&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;% <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>form</span> <span>&nbsp;</span> <span>name</span> <span>=</span> <span>\"loginForm\"</span> <span>&nbsp;</span> <span>action</span> <span>=</span> <span>\"dologin.jsp\"</span> <span>&nbsp;</span> <span>method</span> <span>=</span> <span>\"post\"</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>table</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>tr</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>td</span> <span>&gt;</span> <span>用户名：</span> <span>&lt;/</span> <span>td</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>td</span> <span>&gt;</span> <span>&lt;</span> <span>input</span> <span>&nbsp;</span> <span>type</span> <span>=</span> <span>\"text\"</span> <span>&nbsp;</span> <span>name</span> <span>=</span> <span>\"username\"</span> <span>&nbsp;</span> <span>value</span> <span>=</span> <span>\"&lt;%=username&nbsp;%&gt;\"</span> <span>/&gt;</span> <span>&lt;/</span> <span>td</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;/</span> <span>tr</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>tr</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>td</span> <span>&gt;</span> <span>密码：</span> <span>&lt;/</span> <span>td</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>td</span> <span>&gt;</span> <span>&lt;</span> <span>input</span> <span>&nbsp;</span> <span>type</span> <span>=</span> <span>\"password\"</span> <span>&nbsp;</span> <span>name</span> <span>=</span> <span>\"password\"</span> <span>&nbsp;</span> <span>value</span> <span>=</span> <span>\"&lt;%=password&nbsp;%&gt;\"</span> <span>&nbsp;</span> <span>/&gt;</span> <span>&lt;/</span> <span>td</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;/</span> <span>tr</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>tr</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>td</span> <span>&nbsp;</span> <span>colspan</span> <span>=</span> <span>\"2\"</span> <span>&gt;</span> <span>&lt;</span> <span>input</span> <span>&nbsp;</span> <span>type</span> <span>=</span> <span>\"checkbox\"</span> <span>&nbsp;</span> <span>name</span> <span>=</span> <span>\"isUseCookie\"</span> <span>&nbsp;</span> <span>checked</span> <span>=</span> <span>\"checked\"</span> <span>/&gt;</span> <span>十天内记住我的登录状态</span> <span>&lt;/</span> <span>td</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;/</span> <span>tr</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>tr</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>td</span> <span>&nbsp;</span> <span>colspan</span> <span>=</span> <span>\"2\"</span> <span>&nbsp;</span> <span>align</span> <span>=</span> <span>\"center\"</span> <span>&gt;</span> <span>&lt;</span> <span>input</span> <span>&nbsp;</span> <span>type</span> <span>=</span> <span>\"submit\"</span> <span>&nbsp;</span> <span>value</span> <span>=</span> <span>\"登录\"</span> <span>/&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>input</span> <span>&nbsp;</span> <span>type</span> <span>=</span> <span>\"reset\"</span> <span>&nbsp;</span> <span>value</span> <span>=</span> <span>\"取消\"</span> <span>/&gt;</span> <span>&lt;/</span> <span>td</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;/</span> <span>tr</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;/</span> <span>table</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;/</span> <span>form</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp; <span>&lt;/</span> <span>body</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> <span>&lt;/</span> <span>html</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n   </ol> \n  </div> \n  <p>doLogin.jsp</p> \n  <div> \n   <p> <b>[html]</b> <a href=\"http://blog.csdn.net/u012079603/article/details/42234459#\" title=\"view plain\" rel=\"nofollow,noindex\">view plain</a> <a href=\"http://blog.csdn.net/u012079603/article/details/42234459#\" title=\"copy\" rel=\"nofollow,noindex\">copy</a> <img class=\"lazy-load\" data-original=\"\" width=\"12\" height=\"12\" alt=\"在CODE上查看代码片\" src=\"http://www.fzqblog.top/upload/201608/1471958927729.png\"> <img class=\"lazy-load\" data-original=\"\" width=\"12\" height=\"12\" alt=\"派生到我的代码片\" src=\"http://www.fzqblog.top/upload/201608/1471958927887.jpg\"> </p> \n   <ol start=\"1\"> \n    <li> <span> <span>&lt;</span> <span>%@&nbsp;page&nbsp;</span> <span>language</span> <span>=</span> <span>\"java\"</span> <span>&nbsp;</span> <span>import</span> <span>=</span> <span>\"java.util.*,java.net.*\"</span> <span>&nbsp;</span> <span>contentType</span> <span>=</span> <span>\"text/html;&nbsp;charset=utf-8\"</span> <span>%</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> <span>&lt;</span> <span>%&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> String&nbsp; <span>path</span> <span>&nbsp;=&nbsp;</span> <span>request</span> <span>.getContextPath();&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> String&nbsp; <span>basePath</span> <span>&nbsp;=&nbsp;</span> <span>request</span> <span>.getScheme()+\"://\"+request.getServerName()+\":\"+request.getServerPort()+path+\"/\";&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> % <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;</span> </li> \n    <li> <span> &lt;!DOCTYPE&nbsp;HTML&nbsp;PUBLIC&nbsp;\"-//W3C//DTD&nbsp;HTML&nbsp;4.01&nbsp;Transitional//EN\" <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> <span>&lt;</span> <span>html</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp; <span>&lt;</span> <span>head</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>base</span> <span>&nbsp;</span> <span>href</span> <span>=</span> <span>\"&lt;%=basePath%&gt;\"</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>title</span> <span>&gt;</span> <span>My&nbsp;JSP&nbsp;\'dologin.jsp\'&nbsp;starting&nbsp;page</span> <span>&lt;/</span> <span>title</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>meta</span> <span>&nbsp;</span> <span>http-equiv</span> <span>=</span> <span>\"pragma\"</span> <span>&nbsp;</span> <span>content</span> <span>=</span> <span>\"no-cache\"</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>meta</span> <span>&nbsp;</span> <span>http-equiv</span> <span>=</span> <span>\"cache-control\"</span> <span>&nbsp;</span> <span>content</span> <span>=</span> <span>\"no-cache\"</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>meta</span> <span>&nbsp;</span> <span>http-equiv</span> <span>=</span> <span>\"expires\"</span> <span>&nbsp;</span> <span>content</span> <span>=</span> <span>\"0\"</span> <span>&gt;</span> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>meta</span> <span>&nbsp;</span> <span>http-equiv</span> <span>=</span> <span>\"keywords\"</span> <span>&nbsp;</span> <span>content</span> <span>=</span> <span>\"keyword1,keyword2,keyword3\"</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>meta</span> <span>&nbsp;</span> <span>http-equiv</span> <span>=</span> <span>\"description\"</span> <span>&nbsp;</span> <span>content</span> <span>=</span> <span>\"This&nbsp;is&nbsp;my&nbsp;page\"</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;!--</span> &nbsp; </span> </li> \n    <li> <span> <span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;link&nbsp;rel=\"stylesheet\"&nbsp;type=\"text/css\"&nbsp;href=\"styles.css\"&gt;</span> &nbsp; </span> </li> \n    <li> <span> <span>&nbsp;&nbsp;&nbsp;&nbsp;--&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp; <span>&lt;/</span> <span>head</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp; <span>&lt;</span> <span>body</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>h1</span> <span>&gt;</span> <span>登录成功</span> <span>&lt;/</span> <span>h1</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>hr</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>br</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>br</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>br</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>%&nbsp;&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;request.setCharacterEncoding(\"utf-8\");&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//首先判断用户是否选择了记住登录状态&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String[]&nbsp; <span>isUseCookies</span> <span>&nbsp;=&nbsp;</span> <span>request</span> <span>.getParameterValues(\"isUseCookie\");&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(isUseCookies!=null&amp;&amp;isUseCookies.length <span>&gt;</span> <span>0)&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//把用户名和密码保存在Cookie对象里面&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp; <span>username</span> <span>&nbsp;=&nbsp;</span> <span>URLEncoder</span> <span>.encode(request.getParameter(\"username\"),\"utf-8\");&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//使用URLEncoder解决无法在Cookie当中保存中文字符串问题&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp; <span>password</span> <span>&nbsp;=&nbsp;</span> <span>URLEncoder</span> <span>.encode(request.getParameter(\"password\"),\"utf-8\");&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Cookie&nbsp; <span>usernameCookie</span> <span>&nbsp;=&nbsp;</span> <span>new</span> <span>&nbsp;Cookie(\"username\",username);&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Cookie&nbsp; <span>passwordCookie</span> <span>&nbsp;=&nbsp;</span> <span>new</span> <span>&nbsp;Cookie(\"password\",password);&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;usernameCookie.setMaxAge(864000);&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;passwordCookie.setMaxAge(864000);//设置最大生存期限为10天&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.addCookie(usernameCookie);&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.addCookie(passwordCookie);&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Cookie[]&nbsp; <span>cookies</span> <span>&nbsp;=&nbsp;</span> <span>request</span> <span>.getCookies();&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(cookies!=null&amp;&amp;cookies.length <span>&gt;</span> <span>0)&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(Cookie&nbsp;c:cookies)&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(c.getName().equals(\"username\")||c.getName().equals(\"password\"))&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c.setMaxAge(0);&nbsp;//设置Cookie失效&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.addCookie(c);&nbsp;//重新保存。&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;% <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>a</span> <span>&nbsp;</span> <span>href</span> <span>=</span> <span>\"users.jsp\"</span> <span>&nbsp;</span> <span>target</span> <span>=</span> <span>\"_blank\"</span> <span>&gt;</span> <span>查看用户信息</span> <span>&lt;/</span> <span>a</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp; <span>&lt;/</span> <span>body</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> <span>&lt;/</span> <span>html</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n   </ol> \n  </div> \n  <p>user.jsp</p> \n  <div> \n   <p> <b>[html]</b> <a href=\"http://blog.csdn.net/u012079603/article/details/42234459#\" title=\"view plain\" rel=\"nofollow,noindex\">view plain</a> <a href=\"http://blog.csdn.net/u012079603/article/details/42234459#\" title=\"copy\" rel=\"nofollow,noindex\">copy</a> <img class=\"lazy-load\" data-original=\"\" width=\"12\" height=\"12\" alt=\"在CODE上查看代码片\" src=\"http://www.fzqblog.top/upload/201608/1471958928066.png\"> <img class=\"lazy-load\" data-original=\"\" width=\"12\" height=\"12\" alt=\"派生到我的代码片\" src=\"http://www.fzqblog.top/upload/201608/1471958929481.jpg\"> </p> \n   <ol start=\"1\"> \n    <li> <span> <span>&lt;</span> <span>%@&nbsp;page&nbsp;</span> <span>language</span> <span>=</span> <span>\"java\"</span> <span>&nbsp;</span> <span>import</span> <span>=</span> <span>\"java.util.*,java.net.*\"</span> <span>&nbsp;</span> <span>contentType</span> <span>=</span> <span>\"text/html;&nbsp;charset=utf-8\"</span> <span>%</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> <span>&lt;</span> <span>%&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> String&nbsp; <span>path</span> <span>&nbsp;=&nbsp;</span> <span>request</span> <span>.getContextPath();&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> String&nbsp; <span>basePath</span> <span>&nbsp;=&nbsp;</span> <span>request</span> <span>.getScheme()+\"://\"+request.getServerName()+\":\"+request.getServerPort()+path+\"/\";&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> % <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;</span> </li> \n    <li> <span> &lt;!DOCTYPE&nbsp;HTML&nbsp;PUBLIC&nbsp;\"-//W3C//DTD&nbsp;HTML&nbsp;4.01&nbsp;Transitional//EN\" <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> <span>&lt;</span> <span>html</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp; <span>&lt;</span> <span>head</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>base</span> <span>&nbsp;</span> <span>href</span> <span>=</span> <span>\"&lt;%=basePath%&gt;\"</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>title</span> <span>&gt;</span> <span>My&nbsp;JSP&nbsp;\'users.jsp\'&nbsp;starting&nbsp;page</span> <span>&lt;/</span> <span>title</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>meta</span> <span>&nbsp;</span> <span>http-equiv</span> <span>=</span> <span>\"pragma\"</span> <span>&nbsp;</span> <span>content</span> <span>=</span> <span>\"no-cache\"</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>meta</span> <span>&nbsp;</span> <span>http-equiv</span> <span>=</span> <span>\"cache-control\"</span> <span>&nbsp;</span> <span>content</span> <span>=</span> <span>\"no-cache\"</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>meta</span> <span>&nbsp;</span> <span>http-equiv</span> <span>=</span> <span>\"expires\"</span> <span>&nbsp;</span> <span>content</span> <span>=</span> <span>\"0\"</span> <span>&gt;</span> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>meta</span> <span>&nbsp;</span> <span>http-equiv</span> <span>=</span> <span>\"keywords\"</span> <span>&nbsp;</span> <span>content</span> <span>=</span> <span>\"keyword1,keyword2,keyword3\"</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>meta</span> <span>&nbsp;</span> <span>http-equiv</span> <span>=</span> <span>\"description\"</span> <span>&nbsp;</span> <span>content</span> <span>=</span> <span>\"This&nbsp;is&nbsp;my&nbsp;page\"</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;!--</span> &nbsp; </span> </li> \n    <li> <span> <span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;link&nbsp;rel=\"stylesheet\"&nbsp;type=\"text/css\"&nbsp;href=\"styles.css\"&gt;</span> &nbsp; </span> </li> \n    <li> <span> <span>&nbsp;&nbsp;&nbsp;&nbsp;--&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp; <span>&lt;/</span> <span>head</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp; <span>&lt;</span> <span>body</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>h1</span> <span>&gt;</span> <span>用户信息</span> <span>&lt;/</span> <span>h1</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>hr</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>%&nbsp;&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;request.setCharacterEncoding(\"utf-8\");&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp; <span>username</span> <span>=</span> <span>\"\"</span> <span>;&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp; <span>password</span> <span>&nbsp;=&nbsp;</span> <span>\"\"</span> <span>;&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Cookie[]&nbsp; <span>cookies</span> <span>&nbsp;=&nbsp;</span> <span>request</span> <span>.getCookies();&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(cookies!=null&amp;&amp;cookies.length <span>&gt;</span> <span>0)&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(Cookie&nbsp;c:cookies)&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(c.getName().equals(\"username\"))&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span>username</span> <span>&nbsp;=&nbsp;</span> <span>URLDecoder</span> <span>.decode(c.getValue(),\"utf-8\");&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(c.getName().equals(\"password\"))&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span>password</span> <span>&nbsp;=&nbsp;</span> <span>URLDecoder</span> <span>.decode(c.getValue(),\"utf-8\");&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;% <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>BR</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>BR</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>BR</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用户名： <span>&lt;</span> <span>%=username&nbsp;%</span> <span>&gt;</span> <span>&lt;</span> <span>br</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;密码： <span>&lt;</span> <span>%=password&nbsp;%</span> <span>&gt;</span> <span>&lt;</span> <span>br</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp; <span>&lt;/</span> <span>body</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> <span>&lt;/</span> <span>html</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n   </ol> \n  </div> \n </div> \n <table border=\"0\" width=\"100%\" cellspacing=\"4\" cellpadding=\"0\"> \n  <tbody>\n   <tr> \n    <td> <p>免责声明：本文仅代表作者个人观点，与本站无关。其原创性以及文中陈述文字和内容未经本站证实，对本文以及其中全部或者部分内容、文字的真实性、完整性、及时性本站不作任何保证或承诺，请读者仅作参考，并请自行核实相关内容。</p> </td> \n   </tr> \n  </tbody>\n </table> \n <h3> 责任编辑：blacksnake </h3> \n <p> <span>本文引用网址：</span> </p> \n</div>\n<p>转自：http://www.hackbase.com/tech/2014-12-29/70233.html</p>','  jsp Cookie记住用户的登录状态    2014-12-29 10:53:40  www.hackbase.com  来源：互联网   Login.jsp[html] view plaincopy <% String path = request.getContextPath(); String basePath ...     Login.jsp        [html] view ......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:28:49',0,0,0,0,'http://www.fzqblog.top/upload/201608/1471958927434.png|http://www.fzqblog.top/upload/201608/1471958927576.jpg|http://www.fzqblog.top/upload/201608/1471958927729.png|http://www.fzqblog.top/upload/201608/1471958927887.jpg|http://www.fzqblog.top/upload/201608/1471958928066.png|http://www.fzqblog.top/upload/201608/1471958929481.jpg|',NULL,1),(371,1,6,'集成 IBM WebSphere DataPower SOA Appliances 与 WebSphere MQ 的最佳实践','<div> \n <h2>简介</h2> \n <p>IBM WebSphere DataPower SOA Appliances（以下简称 DataPower）是为特定用途而构建的计算设备，它为许多服务提供了集成端点，比如 WebSphere MQ、使用 Java™ Messaging Service (JMS) 的 WebSphere Service Integration Bus、WebSphere Service Registry and Repository (WSRR)、TIBCO Enterprise Message Service (EMS)、Lightweight Directory Access Protocol(LDAP) 和数据库服务器。这些集成功能旨在为企业快速而又安全地部署业务解决方案。此外，DataPower 固件和硬件组件针对使用这些集成端点更快执行业务策略和事务而进行了优化。</p> \n <p>DataPower 提供了一种编程模型来开发配置工件。这些工件包含许多控件，比如服务对象、处理策略、规则、动作、客户端协议处理函数 和 URL 打开程序，它们可以使用 Web 图形用户界面 (webGUI) 轻松地创建业务应用程序。例如，您可以配置多协议网关 (Multi-Protocol Gateway, MPGW) 服务，通过访问可使用 MPGW 服务处理的集中化的 LDAP 服务或消息来实现安全策略，而 MPGW 服务为后端 MQ 服务器使用了 MQ Queue Manager (mq-qm) 对象和 MQ 前端处理函数 (FSH)。这些 DataPower 对象需要可以提供最佳的性能和资源（比如设备中的 CPU、内存和连接）过度使用保护性能。本教程讨论集成 DataPower 对象与 MQ 服务器，以便有效地处理各种流量模式的讨论。</p> \n <p> 免费下载： <a href=\"https://www.ibm.com/developerworks/cn/downloads/ws/wsdvad/index.html\" rel=\"nofollow,noindex\">IBM® WebSphere® DataPower XC10 Virtual Appliance for Developers 试用版</a> 下载更多的IBM 软件试用版，并加入 <a href=\"https://www.ibm.com/developerworks/mydeveloperworks/groups/service/html/communityview?communityUuid=38997896-bb16-451a-aa97-189a27a3cd5a/?lang=zh\" onmouseover=\"linkQueryAppend(this)\" rel=\"nofollow,noindex\">IBM 软件下载与技术交流群组</a> ，参与在线交流。 </p> \n <p> 免费下载： <a href=\"http://www.ibm.com/developerworks/cn/downloads/ws/wmq/\" rel=\"nofollow,noindex\">IBM® WebSphere® MQ 试用版</a> 下载更多的IBM 软件试用版，并加入 <a href=\"https://www.ibm.com/developerworks/mydeveloperworks/groups/service/html/communityview?communityUuid=38997896-bb16-451a-aa97-189a27a3cd5a/?lang=zh\" onmouseover=\"linkQueryAppend(this)\" rel=\"nofollow,noindex\">IBM 软件下载与技术交流群组</a> ，参与在线交流。 </p> \n <p>DataPower 中的 MQ 集成端点是通过 MQ Queue Manager Object “mq-qm” 和 MQ Front side 处理函数对象来提供的。因此，有必要提供这些对象，并提供它们的各种属性的符合 MQ 产品集成最佳实践的配置设置。</p> \n <p> 回页首 </p> \n <h2>配置 DataPower mq-qm 对象</h2> \n <p> <em>mq-qm 对象</em> 是为 MQ 提供连接功能的主要组件。它管理着连接池大小和空闲超时。在为建立与后端 MQ 服务器的连接和同步点流时，会重试该行为。图 1 显示了 mq-qm 对象的各种属性。必需的属性都标记了一个星号，通过这些属性才能提供与 MQ 服务器的连接。但是，重要属性使用了红色进行标识，它们 <em>不应</em> 使用默认设置。如果这些属性配置了最佳实践所建议的值，它将为设备提供保护和性能改进。您可以结合使用 mq-qm 对象和多协议网关或 Webservice-Proxy 服务来处理 MQ 流量。 </p> \n <p>图 1. mq-qm 对象的配置面板显示了重要属性，它们在 Main 选项卡中以红色突出显示</p> \n <img alt=\"mq-qm 对象的配置面板显示了重要属性，它们在 Main 选项卡中以红色突出显示\" class=\"alignCenter\" data-original=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958931684.jpg\"> \n <p>main 选项卡提供了多个必需的字段，必须提供它们才能将 mq-qm 对象与后端 MQ 服务器相连。但是，配置这个 mq-qm 对象时一些属性需要特殊考虑：</p> \n <ol type=\"1\"> \n  <li> <strong>Maximum Message Size</strong> ：定义 mq-qm 对象将处理的消息的最大大小（以字节为单位）。此值应小于等于通道的 MaxMsgLength 属性和 MQ 服务器的队列。大于此大小的消息会被拒绝。队列中的消息大小超出此属性的值时，DataPower 将显示 MQ 返回代码 2010 (MQRC_DATA_LENGTH_ERROR)。服务的请求类型为 XML 或 SOAP 时，关联的 XML Manager 的 “XML Bytes Scanned” 属性应从默认值 4194304 字节调整为此属性的值，这样才能成功处理该消息。 </li> \n  <li> <strong>Cache Timeout：</strong> 指定DataPower 设备在连接缓存中保留一个连接（保持活动）的秒数。默认值为一个空字符串。如果 mq-qm 对象使用了默认值，那么连接不会断开。因此，一定要使用一个大于协商的检测信号间隔、但小于 MQ 服务器的 “KeepAlive” 间隔的值。如果 “KeepAlive” 超时未知，那么可以使用 60 秒作为此属性的值。请注意，此属性仅与空闲连接相关。如果连接正在使用，此值不会影响活动的连接。如果在第一个 MQ 事务中找到一个 “连接” 错误，并且已经处理了后续事务，那么该错误很可能与默认缓存超时值有关。在不活动的连接达到 Cache Timeout 阈值时，DataPower 设备会从缓存中删除该连接。如果缓存中不再包含连接，那么 DataPower 设备会创建与后端 MQ 服务器的新连接。 <p> 备注：Cache Timeout 属性是为 DataPower 设备配置超时值的惟一方式。DataPower 设备上的其他任何配置设置都无法让 MQ 连接超时。 </p> </li> \n  <li> <strong>Units of Work</strong> ：此配置在设置为 “1” 时使用同步点流。默认值设置为 0，该值会导致设备获取和发出消息时没有配备回滚。MQ 操作要么成功，要么失败。无法传送的消息会默默地丢弃，留给更高级的协议来负责检测和重新传输丢失的包。将此配置设置为 1 时，DataPower 设备会使用同步点流来允许每个 MQ 消息的 MQ 提交和回滚，而不是整个事务。如果配置了同步点流，DataPower 仅在发出从一个队列获得消息后才会删除该消息。当事务失败且消息留在队列中时，DataPower 会对该消息重试 MQPUT，直到达到 Backout Threshold。如果 Automatic Backout 被设置为 “on”，那么失败的消息会路由到已配置的 Backout Queue。 <p> 备注：如果 units-of-work 被设置为 1，那么应该将 Automatic Backout 配置为 “on”，使用 mq-qm 对象中指定的关联的 Backout Threshold 和 Backout Queue 属性。 </p> </li> \n  <li> <strong>Automatic Backout</strong> ：在 units-of-work 被设置为 1 时，需要将此属性设置为 “on”。此单选钮可以启用 (on) 或禁用 (off) 有害消息的自动撤销。有害消息指的是接收设备不知道如何处理的任何消息。通常，在设备回滚留在输入队列上的消息时，撤销计数 (MQMD.BackoutCount) 会递增。随着 MQ FSH 对象继续重新获取消息，撤销计数也会递增。在撤销计数超出撤销阈值时，mq-qm 对象会将该消息删除到撤销队列中。如果禁用自动撤销，有害消息会保留在 GET 队列中，继续由 MQ FSH 处理，直到管理 GET 队列的 Queue Manager 删除它，或者设备重新路由这条难以处理的消息。这会在设备中创建一种循环条件，该循环可能导致设备的内存和 CPU 使用的激增。 <em>最佳实践</em> 是将此属性配置为 “on”，以便应用程序可为有害消息提供一个存在路径。 </li> \n  <li> <strong>Backout Threshold</strong> ：指定每条消息的重试尝试的最大次数。在处理期间，计数从 0 开始，它会将最初收到消息考虑在内。如果最初尝试失败，撤销计数会被设置为 1。在尝试重新处理消息失败后，该计数被设置为 2。因此，此属性的值 1 表示尝试了两次：初始尝试和一次重新处理尝试。 <em>最佳实践</em> 是使用值 1。为了提高错误条件的容忍能力，可以将此值设置为大于 1 的值。这会导致性能降级，因为消息的重新处理尝试次数增加了。 <p> 备注：如果 MQ FSH 配置了并发 MQ 连接数，而且该值大于 1，那么应该将此值设置为与并发 MQ 连接数 + 1 相等的值，以便强制将消息回滚到输入队列中。否则，回滚消息将路由到撤销队列。如果多个设备在使用 MQ 服务器中一个共同的输入队列的消息，而且一个设备发生了重新加载，那么由于此失败而回滚的消息可由另一个活动设备的 MQ FSH 重新处理。 </p> </li> \n  <li> <strong>Backout Queue Name</strong> ：定义由于超出撤销阈值中建立的限制，要包含被处理的消息的队列。此队列必须由与定义的输入队列相同的 MQ 服务器来管理。撤销队列（通常为 SYSTEM.DEAD.LETTER.QUEUE）包含无法处理或传送的消息。但是， <em>最佳实践</em> 是为此属性使用一个本地队列。 <p>图 2. mq-qm 对象的配置面板显示了重要属性，它们在 Connection 选项卡中以红色突出显示</p> <img alt=\"mq-qm 对象的配置面板显示了重要属性，它们在 Connection 选项卡中以红色突出显示\" class=\"alignCenter\" data-original=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958932168.jpg\"> </li> \n  <li> <strong>Total-connection-limit</strong> ：定义 mq-qm 对象的连接池大小。默认值为 250。对于大容量的 MQ 流量，这个默认值可能不是在预期的响应时间内处理事务的最佳选择。如果 MQ 事务表现出较高的延迟，那么可以调节 total-connection-limit 来使用更大数量的连接，以便实现想要的性能目标。这种调节应根据经验来进行，让设备能够稳定地保持该负载，后端 MQ 服务器可无错误地处理该负载。如果负载不高，那么应该根据负载系数将连接数量减少到更小的值。 <p> 备注：此属性是增加或降低连接池大小的惟一机制。增加此值时，应该注意确认后端 MQ 服务器的配置能容纳所有客户端连接。应该在各个 MQ 服务器中检查 “MaxChannel” 值，确保该值大于来自所有 DataPower 和非 DataPower 客户端的与这个 MQ 服务器的连接的数量。 </p> </li> \n  <li> <strong>Local Address</strong> ：定义与一个特定的本地接口和端口的出站连接的本地地址。支持的格式为 x.x.x.x、x.x.x.x(1414) 或仅为 (1414)，以便告诉 TCP 绑定到端口 1414。对于某个端口范围，可以使用 (1414,1420) 或 x.x.x.x(1414,1420)。如果设置了端口，该范围必须大于允许的连接总数。因为 DataPower 有多个网络接口卡 (NIC)，而且可以在配置了这些接口的默认路由时随机路由流量，所以 <em>最佳实践</em> 是在此属性中配置一个网络接口 IP 地址。此配置会将 mq-qm 对象与一个专用的 IP 绑定，以便以一致的、可预测的方式来路由 MQ 消息。 <p> 备注：在为多个网络接口配置了默认路由并使用 MQ Queue Manager Group (mq-qm-group) 作为 DataPower 设备中的 MQ 流量的故障转移机制时，此方法很有用。 </p> </li> \n  <li> <strong>Retry Interval</strong> ：指定重试与一个远程主机的失败连接的尝试之间的时间间隔（以秒为单位）。此设置不会影响通过一个已建立的连接对 PUT 或 GET 消息的尝试。默认值为 1 秒。如果使用默认值，那么该设备将会每秒重试一次，这可能导致 CPU 和内存消息激增。 <em>最佳实践</em> 是使用值 10 或 15 秒作为失败连接的重试间隔。 </li> \n  <li> <strong>Retry Attempts</strong> ：定义了重试失败连接的尝试次数。达到该尝试数量后，将会使用 Long Retry Interval 代替它。应该注意的是，默认值 0（零）表示不会使用 Long Retry Interval，而是永远使用 Retry Interval 来重试。 <em>最佳实践</em> 是为此属性配置一个大于 0 的值。例如，如果配置了值 6，则允许在 10 秒间隔内尝试充重试 6 次。完成 6 次尝试后，mq-qm 对象会退而使用 Long Retry Interval，如果未与后端建立连接，则会继续重试。此机制有助于减轻重试的影响。 </li> \n  <li> <strong>Long Retry Interval</strong> ：配置在达到重试尝试次数后，要使用的长期重试间隔。默认值为 1800 秒，它应大于 Retry Interval。否则不会起作用。在配置此属性时，应考虑等待下一次重试与 MQ 服务器的连接的秒数。 <em>最佳实践</em> 是使用 600 秒作为此属性的值。但是，对于其他用例，配置小于 600 秒的值可能更合适。 </li> \n  <li> <strong>Reporting Interval</strong> ：定义在重试失败的连接时在错误级别上报告日志消息的秒数。此设置会过滤生成的发送到 MQ 日志目标的相同错误消息。 <em>最佳实践</em> 是在大多数用例中，配置一个与此属性的 Retry Interval 相等的值。但是，在不想在系统日志中显示日志消息时，可以考虑为此属性配置一个更高的值。 </li> \n  <li> <strong>Sharing Conversations</strong> <p>：配置共享单个 TCP/IP 连接的最大对话数量。要启用对话共享，可以参照以下指南：</p> <p>WebSphere MQ V7.0 和更高版本在 SVRCONN 通道上提供了共享对话 (SHARECNV) 属性，用以指定可以共享每个 TCP/IP 通道实例的最大对话数量。此特性可以在 DataPower 中进行配置，因为它使用了与队列管理器 SVRCONN 通道的客户端连接。</p> <p>在 DataPower mq-qm 对象中，共享对话 (SHARECNV) 值的默认设置为 0。针对 MQ SVRCONN 通道的默认值为 10。共享对话值在 MQ 服务器与 DataPower 之间协商确定，较低的值有效。但是，在目前的 DataPower 固件版本中，在与 MQ 服务器进行协商时，共享对话设置 1 会被视为 0。</p> <p>在 DataPower mq-qm 对象中配置共享对话，有 3 种使用情形：</p> \n   <ul> \n    <li> <strong>情形 1</strong> <p>：协商的共享对话值为 0。通道在一种与 WebSphere MQ V6.0 类似的模式下运行，不会使用以下特性：</p> \n     <ul> \n      <li>管理员静默停止</li> \n      <li>检测信号</li> \n      <li>提前读取</li> \n      <li>客户端同步使用</li> \n     </ul> <p>如果在 DataPower 中的 mq-qm 对象的 Sharing Conversations 属性上设置值 0 或 1，则会禁用共享对话，无论 MQ SVRCONN 设置是什么。</p> </li> \n    <li> <strong>情形 2</strong> ：协商的共享对话值为 1。通道支持情形 1 中列出的 MQ V7.0 和更高版本的特性，但每个 TCP/IP 通道实例只有 1 个对话。 <br> 在 DataPower 中的 mq-qm 对象的 Sharing Conversations 属性上设置值 2，在 MQ SVRCONN 设置上设置值 1。 </li> \n    <li> <strong>情形 3</strong> <p>：协商的共享对话值为 2 或更大。通道支持 MQ V7.0 和更高版本的特性，每个 TCP/IP 通道实例支持两个或更多的对话。</p> <p>在 DataPower 中的 mq-qm 对象的 Sharing Conversations 属性上和 MQ SVRCONN 通道上设置值 2 或更大的值。</p> <p> 大致上讲，与 SHARECNV(0) 相比，在使用 SHARECNV(10) 时，来自客户端应用程序的消息的处理速度会降低 15%。请参阅 <a href=\"http://publib.boulder.ibm.com/infocenter/wmqv7/v7r0/index.jsp?topic=%2Fcom.ibm.mq.csqzaf.doc%2Fmi12240_.htm\" target=\"_blank\" rel=\"nofollow,noindex\">客户端连接通道上的共享对话的性能影响</a> 。 </p> </li> \n   </ul> </li> \n  <li> <strong>Dedicated XML Manager</strong> ：在多个 mq-qm 对象使用同一个 XML 管理器时，比如单个应用程序域中的 “default”，一个 mq-qm 对象中的配置更改可能影响其他 mq-qm 对象的状态，因为它们共享相同的 XML 管理器。 <em>最佳实践</em> 是对每个 mq-qm 对象使用一个专用的 XML Manager 以及与它有关联的 User Agent 对象，以便应用程序能够有效地管理更低级对象的状态更改。 </li> \n </ol> \n <p> 回页首 </p> \n <h2>配置 DataPower MQ Front Side Handler 对象</h2> \n <p>MQ Front Side Handler (FSH) 对象配置来处理来自 MQ 服务器队列的客户端 GET 和 PUT 操作。图 3 和图 4 给出了以红色突出显示的重要属性，用户在配置此对象时需要考虑它们。</p> \n <p>图 3. MQ FSH 对象的配置面板以红色突出显示了重要的一般属性</p> \n <img alt=\"MQ FSH 对象的配置面板以红色突出显示了重要的一般属性\" class=\"alignCenter\" data-original=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958932687.jpg\"> \n <p>图 4. MQ FSH 对象的配置面板以红色突出显示了 Properties 和 Headers 的重要属性</p> \n <img alt=\"MQ FSH 对象的配置面板以红色突出显示了 Properties 和 Headers 的重要属性\" class=\"alignCenter\" data-original=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958933189.jpg\"> \n <p>MQ FSH 根据轮询间隔来轮询输入队列。它允许从指定队列获取和向其发送消息。此对象也被称为来源 MQ 处理函数 (source MQ handler)，在配置各种参数时需要考虑它。</p> \n <ol type=\"1\"> \n  <li> <strong>并发 MQ 连接的数量</strong> <p>：指定分配给这个 MQ FSH 的并发 MQ 连接数量。考虑到 MQ FSH 的行为，名称 “并发 MQ 连接” 有些用词不当。它表示前端输入队列 (GETQ) 的活动和暂停 MQGET 的数量。对于 1 个连接的默认值，如果输入队列中有多个消息可用，那么可以使用多个连接来处理活动和暂停 MQGET 操作。因此，在大多数使用情形中，此默认值都适用。如果需要处理更多负载，此属性的值可增加到更高的数量。但是，应根据经验对此数量进行测试，以确保后端 MQ 服务器可以处理负载，设备不会由于后端 MQ 服务器中的延迟而在其内存中保留太多事务。下面介绍了 MQ FSH 处理消息的行为。</p> <p>MQ FSH 使用 MQ 连接（以下简称 C1）轮询消息。消息从 GETQ 返回后，DataPower 开始处理该消息，这可能涉及到 MQPUT。如果 MQ FSH 和后端 MQ URL 使用了不同的 mq-qm 对象，则会获得额外的连接。但是，如果前端和后端都使用配置了 units-of-work 的相同 mq-qm 对象，连接 (C1) 将与后端 MQ URL 共享。</p> <p>与此同时，MQ FSH 将继续执行 MQGET，这些 MQGET 可能保持暂停状态。这会增加 MQ FSH 的并发连接数量，使其大于 1。在处理所有消息后，在 mq-qm 对象中指定的缓存超时过期时，此值将变为 1。请注意，即使将并发 MQ 连接数设置为 1，MQ FSH 仍然可以使用至少两个 MQ 连接（C1 用于事务处理，C2 用于轮询一个输入队列）。</p> <p>在极端条件下，如果事务处理俗话时间比前端超时更长，而且 GETQ 中有许多消息，那么 MQ FSH 可以使用连接池允许的尽可能多的连接（在 mq-qm 对象的总连接限制中配置）来处理这些消息。换句话说，如果请求消息以较慢的速率到达 GETQ，那么 MQ FSH 将保持较低的使用连接数量。如果请求消息以较快的速率到达，MQ FSH 将使用大量链接。</p> <p>在大多数使用情形中，默认值 1 就足够用了。将它设置为大于 1 的值可能获得一定的性能提升，但变化微乎其微。如果需要消息排序，那么它必须使用值 1，因为多个 MQGET 将破坏消息排序。</p> <p> <em>最佳实践</em> 是为大多数使用情形使用默认值 1。对于高容量流量场景，可以在 MQ FSH 配置中对此属性使用 2-5 个连接。 </p> </li> \n  <li> <strong>Polling Interval</strong> ：指定在输入队列中没有消息时，MQ FSH 将等待后续 MQGET 操作的秒数。应将此值设置得最小，这有助于快速检测网络连接问题和队列管理器故障。但是，它会增加网络流量。在大多数使用情形中，30 秒的默认值就足够用了。 </li> \n  <li> <strong>Retrieve Backout Settings</strong> ：控制是否从 MQ 服务器检索撤销设置。在启用此选项时，MQ FSH 会从 MQ 服务器检索 Backout Threshold 和 Backout Queue Name 设置，并将这些值与 mq-qm 对象的撤销设置相比较。重试时，该处理函数使用较高优先级的撤销设置。如果 MQ 服务器不包含撤销设置，处理函数将会使用来自 mq-qm 对象的现有撤销值，无论是空的还是已填充的。如果 mq-qm 对象没有定义撤销值，则会禁用此功能。 <p> 禁用此功能时，默认情况下不会从 MQ 服务器检索撤销设置。如果 mq-qm 对象中已存在这些属性，那么处理函数会使用这些值。 <em>最佳实践</em> 是使用默认值 “off”。如果需要使用此特性，一定要注意确保 MQ 服务器中的队列配置了撤销队列名称和撤销计数阈值。 </p> <p> 备注：将 Retrieve Backout Settings 设置为 “on” 时，对每个 MQGET 操作的额外的 MQ API 调用可能导致性能降级。对于高容量的 MQ 流量， <em>最佳实践</em> 是使用默认值 “off”。在启用了 units-of-work 来处理消息回滚时，应将 Automatic Backout 配置为 “on”，并提供在 mq-qm 对象中提供关联的 Backout Threshold 值和 Backout Queue Name。 </p> </li> \n  <li> <strong>Parse Properties：</strong> 启用此选项时，它将解析从队列或订阅传入的消息的属性。默认情况下，该属性被设置为 “off”。在 MQ 消息不包含属性时， <em>最佳实践</em> 是禁用此属性。 </li> \n  <li> <strong>Async Put</strong> ：允许消息异步发送到一个队列，而不必等待来自队列管理器的响应。在关联的 mq-qm 对象中配置了 units-of-work 时，不要使用此选项，因为一个同步点流需要来自队列管理器的响应才能处理消息的回滚和提交操作。 <em>最佳实践</em> 是在后端 MQ 服务器环境稳定时使用此选项，以便提高性能。 </li> \n  <li> <strong>Exclude Message Headers</strong> ：在选择此选项时，允许 MQ FSH 从 MQ 消息剥离这些标头。如果消息仅包含 MQMD 标头，则无需勾选这些复选框。如果消息包含其他类型的标头，比如 MQRFH2 或 MQIIH 标头， <em>最佳实践</em> 是选择合适的复选框，以便在载荷中排除这些标头。但是，仍然可以在 DataPower 中使用这些标头值，以便在规则中操作这些标头。 \n   <ul> \n    <li>CICS Bridge Header (MQCIH)</li> \n    <li>Dead Letter Header (MQDLH)</li> \n    <li>IMS Information Header (MQIIH)</li> \n    <li>Rules and Formatting Header (MQRFH)</li> \n    <li>Rules and Formatting Header (MQRFH2)</li> \n    <li>Work Information Header (MQWIH)</li> \n   </ul> </li> \n </ol> \n <p> 回页首 </p> \n <h2>配置 DataPower MQ URL 打开程序</h2> \n <p> MQ URL 打开程序用于将消息路由到它的目的地。 <em>最佳实践</em> 是使用多协议网关 (MPGW) 服务中的 “构建一个 MQ URL” 帮助。图 5 中突出显示的字段中包含为后端目标构造一个有效 MQ URL 的值。 </p> \n <p>图 5. 使用 MQ Helper 为后端构建 MQ URL</p> \n <img alt=\"使用 MQ Helper 为后端构建 MQ URL\" class=\"alignCenter\" data-original=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958934152.jpg\"> \n <h4>数据报流量的后端静态 MQ URL 示例：</h4> \n <ul> \n  <li> <code class=\"prettyprint\">dpmq://LNX-DP1/?RequestQueue=QUEUE1（不带 units-of-work） </code></li>\n  <code class=\"prettyprint\"> <li> <code class=\"prettyprint\">dpmq://LNX-DP1/?RequestQueue=QUEUE1;Transactional=true（带 units-of-work） </code></li><code class=\"prettyprint\"> </code></code>\n </ul>\n <code class=\"prettyprint\"><code class=\"prettyprint\"> <h4>请求/回复流量的后端静态 MQ URL 示例：</h4> \n   <ul> \n    <li> <code class=\"prettyprint\">dpmq://LNX-DP1/?RequestQueue=QUEUE1;ReplyQueue=QUEUE2;SetReplyTo=true（不带 units-of-work） </code></li>\n    <code class=\"prettyprint\"> <li> <code class=\"prettyprint\">dpmq://LNX-DP1/?RequestQueue=QUEUE1;ReplyQueue=QUEUE2;Transactional=true;Sync=true;SetReplyTo=true（带 units-of-work） </code></li><code class=\"prettyprint\"> </code></code>\n   </ul><code class=\"prettyprint\"><code class=\"prettyprint\"> <h4>用于发送消息的静态 URL 的语法：</h4> <pre class=\"brush:java;toolbar:false\">dpmq://<em>mqQueueManagerObject</em>/<em>URI</em>?RequestQueue=<em>requestQueueName</em>;<em>queryParameters</em></pre> <h4>用于检索消息的静态 URL 的语法：</h4> <pre class=\"brush:java;toolbar:false\">dpmq://<em>mqQueueManagerObject</em>/<em>URI</em>?ReplyQueue=<em>replyQueueName</em>;<em>queryParameters</em></pre> <h4>用于检索或发送消息的动态 URL 的语法：</h4> <p> 点击查看代码清单 </p> \n     <div> \n      <p> 关闭 [x] </p> \n      <pre class=\"brush:java;toolbar:false\">mq://<em>host</em>:<em>port</em>?QueueManager=<em>queueManager</em>;UserName=<em>userName</em>;Channel=<em>channelName</em>;ChannelTimeout=<em>channelTimeout</em>; \nchannelLimit=<em>channelLimit</em>;Size=<em>maxMsgSize</em>; \nMQCSPUserId=<em>MQCSPUserID</em>;MQCSPPassword=<em>MQCSPPassword</em>;<em>queryParameters</em></pre> \n     </div> <p>要从后端剥离出标头，可以使用 MQ URL 参数 “ParseHeaders” 或其别名 “ExcludeHeaders”。它会从载荷中排除所有标头。</p> <p> 备注：在回复消息包含 MQRFH2 标头，而且这些额外的标头需要从载荷中删除以创建格式良好的 XML 载荷时，在 MQ URL 中使用 “ParseHeaders” 标签很有用。 </p> <p> 要覆盖服务后端超时，可以在 MQ URL 中使用 <code class=\"prettyprint\">TimeOut=&lt;以毫秒为单位的值&gt; 标签。 <em>最佳实践</em> 是在 MQ URL 包含 “replyQueue” 标签时配置 “TimeOut”。通过在 MQ URL 中使用这个 “TimeOut” 参数，后端连接将等待响应消息，直到超时过期。如果在指定的超时内未收到回复，后端 MQ URL 会返回代码 2033，表示超时期限内没有回复消息可用。 </code></p><code class=\"prettyprint\"> <p> 备注：MQ URL “TimeOut” 的优先级高于网关后端超时设置。 <em>最佳实践</em> 是将此值配置为低于配置的网关服务后端超时值。 </p> <p> 有关的更多细节，请参阅这个信息中心主题中的 MQ URL 语法。 </p> <p> 回页首 </p> <h2>在 DataPower 中处理 MQ 标头</h2> <p>DataPower 在处理策略中处理 MQ 标头，比如 MQ Message Descriptor (MQMD) 和 MQ Rules Formatting Header 1 和 2 (MQRFH &amp; MQRFH2)。在请求规则中处理请求消息时，网关服务不会修改 MQMD。但是，MQMD 可以通过处理规则中某个特定的转换（xform 或 xformbin）操作来处理。您可以通过两种方法处理 MQ 标头：使用标头注入或使用自定义样式表。</p> <h3>使用标头注入方法</h3> <p>当 MQ 标头对于请求和回复消息是静态标头时，此方法适用于每种消息类型，可以添加必要的标头，这些标头的值不会在不同请求或回复消息之间更改。换句话说，为每个请求或回复消息填充相同的 MQ 标头值。</p> <p>使用网关服务的 header 选项卡，使用以下示例来填充 MQ 标头：</p> <h4>添加一个新的标头注入参数</h4> \n      <ul> \n       <li> <strong>Direction</strong> : <code class=\"prettyprint\">Back （或 <code class=\"prettyprint\">Backend MQPUT ） </code></code></li>\n       <code class=\"prettyprint\"><code class=\"prettyprint\"> <li> <strong>Header Name</strong> ： <code class=\"prettyprint\">MQMD </code></li><code class=\"prettyprint\"> <li> <strong>Header Value</strong> ： <code class=\"prettyprint\">&lt;MQMD&gt;&lt;Format&gt;MQSTR&lt;/Format&gt;&lt;Persistence&gt;1&lt;/Persistence&gt;&lt;/MQMD&gt; </code></li><code class=\"prettyprint\"> </code></code></code></code>\n      </ul><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <h4>使用样式表方法</h4> <p>清单 1 显示了包含值的完整的 MQMD 标头。</p> <p>清单 1. 包含值的 MQMD 标头示例</p> <pre class=\"brush:java;toolbar:false\">&lt;MQMD&gt;\n  &lt;StrucId&gt;MD &lt;/StrucId&gt;\n  &lt;Version&gt;1&lt;/Version&gt;\n  &lt;Report&gt;0&lt;/Report&gt;\n  &lt;MsgType&gt;8&lt;/MsgType&gt;\n  &lt;Expiry&gt;-1&lt;/Expiry&gt;\n  &lt;Feedback&gt;0&lt;/Feedback&gt;\n  &lt;Encoding&gt;546&lt;/Encoding&gt;\n  &lt;CodedCharSetId&gt;819&lt;/CodedCharSetId&gt;\n  &lt;Format&gt;MQSTR&lt;/Format&gt;\n  &lt;Priority&gt;0&lt;/Priority&gt;\n  &lt;Persistence&gt;0&lt;/Persistence&gt;\n  &lt;MsgId&gt;414d5120454d42444954312020202020d724c84199990002&lt;/MsgId&gt;\n  &lt;CorrelId&gt;000000000000000000000000000000000000000000000000&lt;/CorrelId&gt;\n  &lt;BackoutCount&gt;0&lt;/BackoutCount&gt;\n  &lt;ReplyToQ&gt;ADAPTERTEST.POSTFORMAT02 &lt;/ReplyToQ&gt;\n &lt;ReplyToQMgr&gt;EMBDIT2 &lt;/ReplyToQMgr&gt;\n  &lt;UserIdentifier&gt;MUSR_MQADMIN&lt;/UserIdentifier&gt;\n  &lt;AccountingToken&gt;\n     16010515000000271d19306f0b7216262a1345eb03000000000000000000000b\n  &lt;/AccountingToken&gt;\n &lt;ApplIdentityData&gt;&lt;/ApplIdentityData&gt;\n  &lt;PutApplType&gt;28&lt;/PutApplType&gt;\n &lt;PutApplName&gt;Websphere MQ Client for Java&lt;/PutApplName&gt;\n  &lt;PutDate&gt;20061005&lt;/PutDate&gt;\n  &lt;PutTime&gt;18401655&lt;/PutTime&gt;\n &lt;ApplOriginData&gt;&lt;/ApplOriginData&gt;\n  &lt;GroupId&gt;000000000000000000000000000000000000000000000000&lt;/GroupId&gt;\n  &lt;MsgSeqNumber&gt;1&lt;/MsgSeqNumber&gt;\n &lt;Offset&gt;0&lt;/Offset&gt;\n  &lt;MsgFlags&gt;0&lt;/MsgFlags&gt;\n  &lt;OriginalLength&gt;-1&lt;/OriginalLength&gt;\n&lt;/MQMD&gt;</pre> <p>清单 2 显示了处理 MQMD 标头的样式表。</p> <p>清单 2. 注入 MQMD 标头的自定义样式表方法</p> <pre class=\"brush:java;toolbar:false\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;xsl:stylesheet version=\"1.0\"\n xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n xmlns:dp=\"http://www.datapower.com/extensions\"\n extension-element-prefixes=\"dp\"\n exclude-result-prefixes=\"dp\"&gt;\n  &lt;xsl:output method=\"xml\"/&gt;\n  &lt;xsl:template match=\"/\"&gt;\n  &lt;xsl:variable name=\"newMQMDStr\"&gt;\n    &lt;MQMD&gt;\n  &lt;Format&gt;MQSTR&lt;/Format&gt;&lt;Persistence&gt;1&lt;/Persistence&gt;\n    &lt;/MQMD&gt;\n  &lt;/xsl:variable&gt;\n  &lt;xsl:variable name=\"mqmdStr\"&gt;\n    &lt;dp:serialize select=\"$newMQMDStr\" omit-xml-decl=\"yes\"/&gt;\n  &lt;/xsl:variable&gt;\n  &lt;xsl:message dp:priority=\"debug\"&gt;\n    &lt;xsl:value-of select=\"concat(\'The New MQMD : \', $mqmdStr)\"/&gt;\n  &lt;/xsl:message&gt;\n  &lt;!-- <strong>for request rule</strong> --&gt;\n  &lt;dp:set-request-header name=\"\'MQMD\'\" \n  value=\"$mqmdStr\"/&gt;\n  &lt;!-- <strong>for response rule</strong> --&gt;\n  &lt;!-- &lt;dp:set-response-header name=\"\'MQMD\'\" \n  value=\"$mqmdStr\"/&gt; --&gt;\n   &lt;!-- <strong>adding MQ header when MQ URL open call is used</strong><strong>for MQPUT</strong>--&gt;\n   &lt;!--\n   &lt;xsl:variable name=\"mqHeaders\"&gt;\n    &lt;header name=\"MQMD\"&gt;&lt;xsl:value-of \n    select=\"$mqmdStr\"/&gt;&lt;/header&gt;\n   &lt;/xsl:variable&gt;\n   &lt;xsl:variable name=\"sendmessage\"&gt;\n  &lt;dp:url-open\n     target=\"dpmq://DP4/?RequestQueue=QUEUE6\"\n    http-headers=\"$mqHeaders\"\n   response=\"responsecode-ignore\"&gt;\n    &lt;xsl:copy-of select=\".\" /&gt;\n    &lt;/dp:url-open&gt;\n    &lt;/xsl:variable&gt;\n  --&gt;\n  &lt;/xsl:template&gt;\n&lt;/xsl:stylesheet&gt;\n</pre> <p>标头注入或样式表方法不会注入完整 MQMD 标头时，DataPower 会添加具有默认值的缺少 MQMD 字段来构造一个完整 MQMD。在为完整的 MQMD 标头字段添加新值时，可以创建具有各个标头和关联值的结构，并使用样式表方法注入它。</p> <p>在一些异常情况下，上述 MQ 标头注入方法不会生效。在 Result Action 的目标框中使用 MQ URL 的情形中，应该使用 “context” 变量方法注入 MQMD。例如，请求规则需要记录设置了 MQMD.Expiry 标头的 MQ 消息。该消息使用 Result Action 和目标框中配置的 MQ URL 来路由。在这种情况下，可以使用 “context” 变量方法来注入相关的 MQMD 标头，如清单 3 所示。</p> <p>清单 3. 注入 MQMD 标头的 Context 变量方法</p> <pre class=\"brush:java;toolbar:false\">&lt;xsl:variable name=\"MQMDStr\"&gt;      \n &lt;MQMD&gt;  \n    &lt;Expiry&gt;8000&lt;/Expiry&gt;\n    &lt;Priority&gt;0&lt;/Priority&gt;\n    &lt;Format&gt;MQSTR&lt;/Format&gt;        \n &lt;/MQMD&gt;            \n&lt;/xsl:variable&gt;           \n&lt;xsl:variable name=\"MQMDStr2\"&gt;        \n &lt;dp:serialize select=\"$MQMDStr\" \n omit-xml-decl=\"yes\"/&gt;           \n&lt;/xsl:variable&gt;\n&lt;dp:set-variable name=\"\'\nvar://context/EVENTS/_extension/header/MQMD\'\"\n value=\"$MQMDStr2\"/&gt;\n</pre> <p>确保 Result Action 的 INPUT 上下文被设置为 “EVENTS”，前面的 Transform (xform) Action 的 OUTPUT 上下文被定义为 “EVENTS”，上述代码段可以使用样式表来执行。</p> <p> 回页首 </p> <h2>通用的 MQ 处理流</h2> <p> 处理 MQ 数据报和请求/回复流量有一些配置需求。对于数据报流量，建议采用以下 <em>最佳实践</em> 配置： </p> \n         <ol> \n          <li> <span>使用不带 units-of-work 的 MPGW 服务来处理数据报流量</span> ：MPGW 服务配置为仅使用请求规则。不需要响应规则，因为数据报流量不会发送任何回复消息。如果应用程序不会处理错误，那么此服务不需要任何错误规则。MPGW 服务的 Advanced 选项卡下的 “Process Backend Errors” 应设置为 “off”。请求类型可以是 “XML”、“SOAP”、“non-XML” 或 “pass-thru”。 &nbsp;响应类型被设置为 “pass-thru”。在处理期间，请求 MQMD 不会修改，后端 MQ URL 仅指定 “RequestQueue”。 </li> \n          <li> <span>使用带 units-of-work 的 MPGW 服务来处理数据报流量：</span> MPGW 服务被配置为仅使用请求规则。不需要响应规则，因为数据报流量不会发送任何回复消息。如果应用程序会处理错误，此服务可能需要错误规则。MPGW 服务的 Advanced 选项卡下的 “Process Backend Errors” 应设置为 “off”。请求类型可以为 “XML”、“SOAP”、“non-XML” 或 “pass-thru”。响应类型设置为 “pass-thru”。在处理期间，请求 MQMD 不会修改，后端 MQ URL 指定了 “RequestQueue” 和 “Transactional=true” 标签。如果配置了错误规则，那么可以使用 Result 操作或 Transform 操作，使用包含 “RequestQueue” 和 “Sync=true” 标签的 MQ URL 来将有害消息路由到一个备用队列。请注意，在将该消息放入备用队列后，MQ 服务器需要提交它。因此，错误规则中使用了 “Sync=true” 标签。在 mq-qm 对象中启用了 “units-of-work” 时，应该将错误规则中的服务变量 “var://service/error-ignore” 设置为 “1” 来处理回滚。 </li> \n          <li> <strong>使用带自定义错误处理的 MPGW 服务来处理数据报流量：</strong> <p>MPGW 服务被配置为使用请求、响应和错误规则。它必须使用 “dp:response-header(\'x-dp-response-code\')” 捕获响应规则中的响应代码，在响应代码具有模式 “2xxx”（其中 “2xxx” 是一个表示 MQ 返回代码 (mqrc) 的 4 位数）时，执行“dp:reject” 来调用错误规则。MPGW 服务的 Advanced 选项卡下的 “Process Backend Errors” 应设置为 “on”。请求类型可以是 “XML”、“SOAP”、“non-XML” 或 “pass-thru”。响应类型被设置为 “non-XML”。在处理期间，请求 MQMD 不会修改，后端 MQ URL 仅指定 “RequestQueue”。</p> <p>如果在 mq-qm 对象中启用了 “units-of-work”，那么应该将错误规则中的服务变量 “var://service/error-ignore” 设置为 “1” 来处理回滚。 &nbsp;同一个 MQ URL 中必须使用额外的标签 “Transactional=true”。</p> <p>清单 4 中的代码段，捕获响应代码，如果 MQ 流量的响应代码为 “2xxx” ，则执行 “dp:reject”。</p> <p>清单 4. 自定义 MQ 错误处理</p> <pre class=\"brush:java;toolbar:false\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n  xmlns:dp=\"http://www.datapower.com/extensions\"\n  extension-element-prefixes=\"dp\"\n  exclude-result-prefixes=\"dp\" version=\"1.0\"&gt;\n &lt;xsl:output method=\"xml\"/&gt;\n &lt;xsl:template match=\"/\"&gt;\n  &lt;xsl:variable name=\"mqrc\" \n  select=\"dp:response-header(\'x-dp-response-code\')\"/&gt;\n  &lt;xsl:variable name=\"ecode\" \n  select=\"dp:variable(\'var://service/error-code\')\"/&gt;\n  &lt;xsl:variable name=\"errMsg\" \n  select=\"concat(\'** The Response Code ** : \', \n  $mqrc, \' and ** Error Code ** :\', $ecode )\"/&gt;\n  &lt;xsl:choose&gt;\n   &lt;xsl:when test=\"(starts-with($mqrc, \'2\')\n    and (string-length(normalize-space($mqrc))= 4)) or \n    ($ecode != \'0x00000000\')\"&gt;\n    &lt;xsl:message dp:priority=\"debug\"&gt;\n     &lt;xsl:value-of select=\"$errMsg\"/&gt;\n    &lt;/xsl:message&gt;\n    &lt;dp:set-variable name=\"\'\n    var://context/ERROR/err-msg\'\" \n    value=\"$errMsg\"/&gt;\n    &lt;dp:reject override=\"true\"&gt;\n    &lt;xsl:value-of select=\"$errMsg\"/&gt;&lt;/dp:reject&gt;\n   &lt;/xsl:when&gt;\n   &lt;xsl:otherwise&gt;\n    &lt;xsl:message dp:priority=\"debug\"&gt;\n     &lt;xsl:value-of select=\"$errMsg\"/&gt;\n    &lt;/xsl:message&gt;\n    &lt;dp:accept/&gt;\n   &lt;/xsl:otherwise&gt;\n  &lt;/xsl:choose&gt;\n  &lt;/xsl:template&gt;\n&lt;/xsl:stylesheet&gt;\n</pre> </li> \n          <li> <span>使用带 units-of-work 的 MPGW 服务来处理请求/回复流量：</span> <p>MPGW 服务被配置为使用请求、响应和错误规则。它必须使用 “dp:response-header(\'x-dp-response-code\')” 捕获响应规则中的响应代码，在响应代码具有模式 “2xxx”（其中 “2xxx” 是一个表示 MQ 返回代码 (mqrc) 的 4 位数）时，可以执行“dp:reject” 来调用错误规则。应该将 MPGW 服务的 Advanced 选项卡下的 “Process Backend Errors” 设置为 “on”。请求和响应类型可以是 “XML”、“SOAP” 或 “non-XML”。在处理期间，请求 MQMD 不会修改，后端 MQ URL 指定了 “RequestQueue”、“ReplyQueue” 和 “setReplyTo=true”。</p> <p>在启用 units-of-work 时，必须在同一个 MQ URL 中指定额外的 “Transactional=true;Sync=true” 标签。请注意，“Sync=true” 标签用于提交请求消息，以便 MQ 应用程序可以使用此消息来为 “ReplyQueue” 准备回复消息。没有这个 “Sync=true” 标签，就无法在 “RequestQueue” 中看到该消息，因为它位于同步点流之下。应该将错误规则中的服务变量 “var://service/error-ignore” 设置为 “1”，以便处理回滚。</p> <p> 备注：确保准备回复消息的应用程序注入了 “Request.MQMD.Msgid in Reply.MQMD.CorrelId”。否则，DataPower <em>不会</em> 在其响应规则中抓取回复消息。 </p> </li> \n          <li> <strong>使用带动态路由的 MPGW 服务处理请求/回复流量</strong> <p>：在处理请求 MQ 消息时，它包含 MQMD.ReplyToQ 和 MQMD.ReplyToQMgr 值，用该值指示回复消息的目标路径。回复消息将基于以下两种方案而路由到最终目标：</p> \n           <ul> \n            <li> <strong>方案 1</strong> ：如果 MQMD.ReplyToQMgr 的值与 mq-qm 对象中配置的 qmgr 名称相同： \n             <ol> \n              <li> 在响应规则中使用样式表将 DataPower 的内部虚拟标头 “ReplyToQ” 设置为空字符串： <code class=\"prettyprint\">&lt;dp:set-response-header name=\"\'ReplyToQ\'\" value=\"\'\'\"/&gt; 。 </code></li>\n              <code class=\"prettyprint\"> <li>将 MQMD.ReplyToQ 保存到请求规则中的一个上下文变量中。</li> <li>将 MQMD.ReplyToQMgr 保存到请求规则中的一个上下文变量中。</li> <li>在前端客户端的响应规则中注入包含这些值的 MQOD 标头。</li> <li>确保本地 MQ 队列管理器 (qmgr) 被配置为根据 MQ 对象描述符 (MQOD) 来处理向远程 qmgr 的消息路由。</li> </code>\n             </ol><code class=\"prettyprint\"> </code></li>\n            <code class=\"prettyprint\"> <li> <strong>方案 2</strong> ：如果 MQMD.ReplyToQMgr 的值不同于 mq-qm 对象中配置的 qmgr 名称： \n              <ol> \n               <li> 在响应规则中使用样式表将 DataPower 的内部虚拟标头 “ReplyToQ” 设置为空字符串： <code class=\"prettyprint\">&lt;dp:set-response-header name=\"\'ReplyToQ\'\" value=\"\'\'\"/&gt; 。 </code></li>\n               <code class=\"prettyprint\"> <li> 在响应规则中使用样式表将 DataPower 的内部虚拟标头 “ReplyToQM” 设置为空字符串： <code class=\"prettyprint\">&lt;dp:set-response-header name=\"\'ReplyToQM\'\" value=\"\'\'\"/&gt; 。 </code></li><code class=\"prettyprint\"> <li>将 MQMD.ReplyToQ 保存到请求规则中的一个上下文变量中。</li> <li>将 MQMD.ReplyToQMgr 保存到请求规则中的一个上下文变量中。</li> <li>在前端客户端的响应规则中注入包含这些值的 MQOD 标头。</li> <li>确保本地 MQ 队列管理器 (qmgr) 被配置为根据 MQ 对象描述符 (MQOD) 来处理向远程 qmgr 的消息路由。</li> </code></code>\n              </ol><code class=\"prettyprint\"><code class=\"prettyprint\"> </code></code></li><code class=\"prettyprint\"><code class=\"prettyprint\"> </code></code></code>\n           </ul><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p>清单 5 给出了将 “ReplyToQ” 和 “ReplyToQMgr” 值保存在请求规则中，并使用 MQOD 结构将这些值注入到响应规则中的样式表示例。</p> <p>清单 5. 使用 MQOD 标头处理自定义 MQ 路由</p> <pre class=\"brush:java;toolbar:false\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;xsl:stylesheet xmlns:xsl\n=\"http://www.w3.org/1999/XSL/Transform\" \nversion=\"1.0\" extension-element-prefixes=\"dp\"\nexclude-result-prefixes=\"dp\"&gt;\n  &lt;xsl:output method=\"xml\"/&gt;\n  &lt;xsl:template match=\"/\"&gt;\n  &lt;xsl:variable name=\"rule-type\" \n  select=\"dp:variable(\'var://service/transaction-rule-type\')\"/&gt;\n  &lt;xsl:choose&gt;\n  &lt;!-- Request Rule only --&gt;\n  &lt;xsl:when test=\"$rule-type = \'request\'\"&gt;\n   &lt;xsl:variable name=\"entries\" \n   select=\"dp:request-header(\'MQMD\')\"/&gt;\n   &lt;xsl:variable name=\"header\"  \n   select=\"dp:parse($entries)\"/&gt;\n   &lt;!-- save ReplyToQ and ReplyToQMgr values --&gt;\n   &lt;dp:set-variable name=\"\'\n   var://context/MYMQMD/ReplyToQ\'\"\n    value=\"\"$header//ReplyToQ\"/&gt;\n   &lt;dp:set-variable name=\"\'var://context/MYMQMD/ReplyToQMgr\'\" \n   value=\"\"$header//ReplyToQMgr\"/&gt;\n   &lt;xsl:message dp:priority=\"debug\"&gt;\n   &lt;xsl:value-of select=\"concat \n   (\'Request MQMD : \', dp:request-header(\'MQMD\'))\"/&gt;\n   &lt;/xsl:message&gt;\n  &lt;/xsl:when&gt;\n  &lt;!-- Response rule only --&gt;\n  &lt;xsl:when test=\"$rule-type = \'response\'\"&gt;\n   &lt;xsl:variable name=\"custMQODStr\"&gt;\n    &lt;MQOD&gt;\n    &lt;Version&gt;2&lt;/Version&gt;\n    &lt;ObjectName&gt;\n     &lt;xsl:value-of\n select=\"dp:variable(\'var://context/MYMQMD/ReplyToQ\')\"/&gt;\n    &lt;/ObjectName&gt;\n    &lt;ObjectQMgrName&gt;\n     &lt;xsl:value-of select=\"\n  dp:variable(\'var://context/MYMQMD/ReplyToQMgr\')\"/&gt;\n    &lt;/ObjectQMgrName&gt;\n    &lt;/MQOD&gt;\n   &lt;/xsl:variable&gt;\n   &lt;xsl:variable name=\"mqodStr\"&gt;\n    &lt;dp:serialize select=\"$custMQODStr\" \n    omit-xml-decl=\"yes\"/&gt;\n   &lt;/xsl:variable&gt;\n   &lt;xsl:message dp:priority=\"debug\"&gt;\n    &lt;xsl:value-of\n    select=\"concat(\'Response MQOD : \', $mqodStr)\"/&gt;\n   &lt;/xsl:message&gt;\n   &lt;dp:set-response-header name=\"\'MQOD\'\" \n   value=\"$mqodStr\"/&gt;\n  &lt;/xsl:when&gt;\n  &lt;/xsl:choose&gt;\n  &lt;/xsl:template&gt;\n&lt;/xsl:stylesheet&gt;\n</pre> <p> 备注：如果后端 MQ 服务器使用了一个集群，则不需要将 MQMD.ReplyToQMgr 注入在 MQOD 中。但是，如果启用了工作负载管理特性，则应注入 MQMD.ReplyToQMgr，以便 MQ 集群可以在指定的远程 qmgr 繁忙时将消息路由到备用 qmgr。 </p> </code></code></code></li>\n          <code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> </code></code></code>\n         </ol><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> <p> 回页首 </p> <h2>单阶段提交需求</h2> <p>DataPower mq-qm 对象启用了 units-of-work 时，它支持单阶段提交（one-phase commit）。要实现有保障的消息传送，必须满足以下条件：</p> \n            <ol> \n             <li>在 MQ 前端处理函数和 MQ URL 打开程序中必须使用同一个 MQ qmgr。</li> \n             <li>所有处理操作必须是同步的。</li> \n             <li>在一个事务中的所有 MQ 操作中共享同一个连接，确保 “有且仅有一次的” 消息传送。</li> \n             <li> <p>在其他所有情况下，采用的都是 “至少一次的” 消息传送。但是，MQ 到 MQ 的流量模式不会丢失消息。这意味着前端和后端都使用了 MQ 协议。</p> <p>存在以下两种方案：</p> \n              <ul> \n               <li> <strong>方案 1</strong> ：在前端处理函数和后端 MQ URL 打开程序中使用同一个 MQ qmgr 时，如果输入连接失败，则会重新发送来自输入队列 (GETQ) 的消息。输出队列 (PUTQ) 中不允许重复。 </li> \n               <li> <strong>方案 2</strong> ：在前端处理函数和后端 MQ URL 打开程序中使用两个不同的 MQ qmgr 时，如果输入连接失败，则会重新发送来自输入队列 (GETQ) 的消息。输出队列 (PUTQ) 中可出现重复消息。不存在消息丢失。 </li> \n              </ul> </li> \n            </ol> <p> 回页首 </p> <h2>结束语</h2> <p>根据最佳实践配置，DataPower 应用程序可以提供经过改进的 MQ 消息处理性能。它为 CPU、内存和连接等设备资源的过度利用创造了安全保护。本教程提供了配置来集成 DataPower 服务与具有各种流量模式的 MQ，这些流量模式涉及到数据报和请求/回复流量。如果应用程序按照这些最佳实践来配置，在 MQ 服务器因为在宕机期间而不可用时，它们可以帮助设备避免重载，还可以减少后端 MQ 服务器的连接错误。</p> <h3>致谢</h3> <p> WebSphere DataPower SQA、开发和支持团队的许多 IBM 同时在本教程的准备工作中提供了帮助。还要特别感谢 <strong>Daniel HT Shih</strong> 和 <strong>John Rasmussen</strong> 审阅本教程。 </p> </code></code></code></code></code></code></code></code></code></code></code>\n</div>\n<p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\">转自：http://www.ibm.com/developerworks/cn/websphere/library/techarticles/1410_sahoo/1410_sahoo.html?ca=drs-</code></code></code></p>\n<code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> </code></code></code>','  简介  IBM WebSphere DataPower SOA Appliances（以下简称 DataPower）是为特定用途而构建的计算设备，它为许多服务提供了集成端点，比如 WebSphere MQ、使用 Java™ Messaging Service (JMS) 的 WebSphere Service Integration Bus、WebSphere Service Registry......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:28:55',0,1,0,0,'http://www.fzqblog.top/upload/201608/1471958931684.jpg|http://www.fzqblog.top/upload/201608/1471958932168.jpg|http://www.fzqblog.top/upload/201608/1471958932687.jpg|http://www.fzqblog.top/upload/201608/1471958933189.jpg|http://www.fzqblog.top/upload/201608/1471958934152.jpg|',NULL,1),(372,1,6,'spring struts hibernate整合问题','<div> \n <p>这是本人在做自己的项目的时候遇到的一些问题,我的项目采用流行的三大开源框架的组合开发即spring,hibernate,struts.刚开始的时候做了一个登陆的业务,可是由于在整合struts和spring的时候出现问题一直报了一个空引用异常,该问题出现在向struts注入一个业务逻辑组件,也就是说spring没有将业务bean注入到action中,后来我在网上页查了查找到了些资料,原来是我在配置struts的时候出错了,其实后来想想也是,我在配置struts的时候还是按以往单个struts的配置思想在做,也就是说在找action类的时候是按照action里面的类名,但是现在由于采用的是spring的ioc依赖注入,将这个职责交给了spring.那么原先是找具体类,现在由于在spring中配置了action的bean,所以只需要将struts配置文件中对应的action的class该成你对应的bean的id进行了.</p> \n <p>第二个错误是由于本人在开发项目的时候使用myeclise工具,在引入struts,spring,hibernate的时候没去检测,是采用工具生成的,结果在进行hql查询的时候报错了,我后来一检查发现工具生成的struts包中和spring包中都有antlr这个jar包,我把struts版本低的antlr.jar给删除后就ok了.</p> \n <p>可能已经由大量的人出现这个错误,但是我只是记录着自己的项目经验而已,以免犯同意的错.</p> \n</div>\n<p>转自：http://yuanlc.iteye.com/blog/2171062</p>','  这是本人在做自己的项目的时候遇到的一些问题,我的项目采用流行的三大开源框架的组合开发即spring,hibernate,struts.刚开始的时候做了一个登陆的业务,可是由于在整合struts和spring的时候出现问题一直报了一个空引用异常,该问题出现在向struts注入一个业务逻辑组件,也就是说spring没有将业务bean注入到action中,后来我在网上页查了查找到了些资料,原来是我在......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:28:55',1,2,0,0,'',NULL,1),(373,1,6,'IBM SPSS Decision Management 和 IBM WebSphere ILOG JRules 集成，第 2 部分: 本地集成方法','<div> \n <h2>引言</h2> \n <p> 在《 <a href=\"http://www.ibm.com/developerworks/cn/data/library/techarticle/dm-1112duw/\" rel=\"nofollow,noindex\">如何集成 IBM SPSS Decision Management 与 IBM WebSphere ILOG JRules</a> 》一文中，我们已针对 IBM Analytical Decision Management 和 IBM WebSphere Operational Decision Management Decision Server Rule 这两个产品基于 Web Services Definition Language (WSDL) 方式的调用集成做了较为详细的介绍。由于之前的文章已针对如何应用 IBM Analytical Decision Management 和 Rule Designer 联合创建 Decision Server Rules 做过详细的介绍，在本文中就不再赘述了，希望把精力集中在如何基于 IBM Analytical Decision Management 本地部署一个可供 Decision Server Rules 执行的 Java 虚拟运行环境。这一实现的目的在于改善过去只能通过 WSDL 远程调用 ODM Execution Server 的方式执行 Decision Server Rules 时性能低下的问题，以提高 ADM 的运行效率和客户体验，特别在对大容量数据批量执行的情况下。 </p> \n <p> 在上一文章发表后短短的两年时间里，上述两个产品都有了全新架构上的调整，细心的读者应该从各产品名称的变化上面见微知著。所以有必要在这里重新对这两个产品做一个简单的介绍。 </p> \n <p> 回页首 </p> \n <h2>IBM Operational Decision Management Decision Server Rule 简介</h2> \n <p>Decision Server Rules 提供用于将决策逻辑自动化的运行时和开发组件。 通过这些组件，您可以对用于控制关键业务系统操作的频繁发生的可重复决策进行自动化和管理。根据您的角色（架构设计师、开发者、QA 测试员、业务用户或策略管理员），您会对开发业务规则应用程序以及将其与进行调用的业务应用程序相集成的不同方面感兴趣。在应用程序开发过程中，了解您的角色以及其他人员的角色很重要。</p> \n <p>（注意，IBM WebSphere ILOG JRules 在 V7.5 版本后命名为 IBM WebSphere Operational Decision Management，到了 V8.5 版本，IBM 将其命名为 IBM Operational Decision Management。）</p> \n <p>本文内容将涉及 ODM 两个元素：</p> \n <ul> \n  <li>Rule Designer：用于在 Rule Designer 中设计、编排、编写和执行规则的任务流。</li> \n  <li>Rule Execution Server：提供了一个运行时执行环境，集成规则引擎在 Java SE 和 Java EE 环境中，这样您就可以动态更改业务逻辑规则。</li> \n </ul> \n <p> 回页首 </p> \n <h2>IBM Analytical Decision Management 简介</h2> \n <p>IBM Analytical Decision Management 可以帮助企业用户进行效益的预测分析以解决其现实的业务问题，允许管理者基于其客户群体或行业背景构建自定义应用程序。</p> \n <p>（注意，最新的 V8.0 版本中，IBM SPSS Decision Management 已重命名为 IBM SPSS Analytical Decision Management。）</p> \n <p>应用程序通常根据实际应用对象配置为解决特定的问题或模拟特定的场景，它需要具备以下一组常见的功能：</p> \n <ul> \n  <li>基于商业规则进行自动化决策。</li> \n  <li>使用预测模型增强商业的洞察力。</li> \n  <li>使用优先级，优化或模拟技术帮助企业做出最优抉择。</li> \n </ul> \n <p> 回页首 </p> \n <h2>ODM 与 IBM Analytical Decision Management 集成过程和方式</h2> \n <p>我们可以使用 IBM ODM 的嵌入式规则引擎——“Rule Execution Server (RES)”，将其与 IBM Analytical Decision Management 的运行环境进行集成。RES 将被打包成一个基于服务器端的模块，是一种可运行于 Modeler Server 端（IBM Analytical Decision Management 的运行需要 Modeler 的支持）的组件框架 (CF) 。该模块将使用 RES 的进程内执行引擎。注意，该嵌入式规则引擎模块必须安装到每个客户希望执行规则实例的 Modeler 服务器。</p> \n <p>图 1. ODM 部署后结构示意图</p> \n <img alt=\"图 1. ODM 部署后结构示意图\" class=\"alignCenter\" data-original=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958936720.png\"> \n <h3>1. 复制 IBM Operational Decision Management 的文件</h3> \n <p>第一步是从安装好的 IBM Operational Decision Management 处拷贝文件，本文以 IBM Operational Decision Management V8.5.0.0 为例进行介绍。</p> \n <p>为了方便用户从 ODM 中找到复制所需的文件，ADM 在安装完成后，会提供一个名叫 rescopy.xml 文件，通常情况下，它会存在于 IBM SPSS Collaboration and Deployment Services server 的安装路径下，例如 C:\\Program Files\\IBM\\SPSS\\Deployment\\6.0\\Server\\components\\decision-management\\Utilities\\RESCopy\\。这个脚本文件可以从 ODM 中自动地找到那些 Local RES 运行所需要的文件，并将它们自动地复制到 C&amp;DS 的路径下。由于一些依赖关系，用户需要将 rescopy.xml 粘贴到 IBM Operational Decision Management V 8.5.0.0 所在的机器才能执行成功。</p> \n <p>使用下面的命令执行 rescopy.xml 脚本，脚本将自动拷贝所需的文件并打包成 DM-rescopy.zip，并将其放置于 C:\\CopiedFiles 路径下。</p> \n <p>清单 1. 使用 rescopy.xml 脚本自动化复制文件执行</p> \n <pre class=\"brush:java;toolbar:false\">CALL \"%ANT_HOME%\\bin\\ant\" -buildfile rescopy.xml \n -Dwodm=\"C:\\Program Files\\IBM\\ODM85\\ODM\\executionserver\" \n -Dtarget=C:\\CopiedFiles</pre> \n <p>值得注意的是，在运行 rescopy.xml 脚本前可以按照需要用户手动调整以下两个参数：</p> \n <ul> \n  <li>-Dwodm ：识别 IBM Operational Decision Management Execution Server 的安装目录。</li> \n  <li>-Dtarget ：定义目标目录以 ZIP 的打包形式用来存放拷贝出来的文件。</li> \n </ul> \n <p>解压 DM-rescopy.zip 文件后显示目录及文件如下：</p> \n <p>清单 2. DM-rescopy.zip 文件解压后的目录文件结构</p> \n <pre class=\"brush:java;toolbar:false\">C:\\CopiedFiles\\rescopy\\lib\\\nasm-3.1.jar\nasm-analysis3.1.jar\nasm-commons-3.1.jar\nasm-tree-3.1.jar\nasm-util.3.1.jar\nj2ee_connector-1_5-fr.jar\njrules-engine.jar\njrules-res-execution.jar\nsam.jar\nra.xml\nC:\\CopiedFiles\\rescopy\\tools\\\njrules-res-tools.jar\nC:\\CopiedFiles\\rescopy\\\nDM-rescopy.zip</pre> \n <h3>2. 安装所需的文件到所有包含 pasw.externalrule 组件的机器上</h3> \n <p>在上一节中复制出来的文件必须安装在 IBM® SPSS® Collaboration and Deployment Services 和 IBM® SPSS® Modeler 这两个产品上，因为这些文件将协调 IBM® Analytical Decision Management 和 IBM® SPSS® Modeler 共同工作去执行本地的 IBM Operational Decision Management rules。其中 Pasw.externalrule 文件夹作为 SPSS Modeler 的扩展应用是在 IBM® Analytical Decision Management 安装过程中生成的。</p> \n <p>如上一节说明，解压 DM-rescopy.zip 文件后，对应将 lib 文件夹内的.jar 文件和 ra.xml 安装在 pasw.externalrule /lib 子文件夹里，tools 文件夹将直接拷贝到 文件夹 pasw.externalrule 里面。下面给出关联产品的安装路径例子。</p> \n <ul> \n  <li>IBM SPSS Collaboration and Deployment Services:</li> \n </ul> \n <pre class=\"brush:java;toolbar:false\">C:\\Program Files\\IBM\\SPSS\\Deployment\\6.0\\Server\\components\\modeler\\ext\\bin\n \\pasw.externalrule\\</pre> \n <ul> \n  <li>IBM® SPSS® Modeler Server:</li> \n </ul> \n <pre class=\"brush:java;toolbar:false\">C:\\Program Files\\IBM\\SPSS\\ModelerServer\\16\\ext\\bin\\pasw.externalrule\\</pre> \n <ul> \n  <li>IBM® SPSS® Modeler (clients):</li> \n </ul> \n <pre class=\"brush:java;toolbar:false\">C:\\Program Files\\IBM\\SPSS|Modeler\\16\\ext\\bin\\pasw.externalrule\\</pre> \n <h3>3. 修改 resdeploy、reslist 和 resundeploy 脚本</h3> \n <p> 以下的三个脚本文件是由 IBM® Analytical Decision Management 提供，用户可以在 IBM®SPSS®Collaboration and Deployment Services 的 pasw.externalrule\\scripts 文件夹下找到这三个脚本，例如： <code class=\"prettyprint\">C:\\Program Files\\IBM\\SPSS\\Deployment\\6.0\\Server\\components\\modeler\\ext\\bin\\pasw.externalrule\\scripts 。产品提供了它们的 Windows(.bat) 版本和 UNIX(.sh) 版本。 </code></p>\n <code class=\"prettyprint\"> \n  <ul> \n   <li>Resdeploy：部署可在本地执行的 IBM Operational Decision Management rules。</li> \n   <li>Reslist：显示已经部署到本地的 IBM Operational Decision Management rules。</li> \n   <li>Resundeploy：删除已经部署到本地的 IBM Operational Decision Management rules。</li> \n  </ul> <p>在执行以上三个脚本之前，用户首先需要修改脚本中 CADS_HOME 这个参数，把它指定到 IBM SPSS Collaboration and Deployment Services 的安装目录。如果是 Windows 平台请编辑.bat 文件，如果是 UNIX 平台请编辑.sh 文件。</p> <p>清单 3. 修改脚本中的 CADS_HOME 参数</p> <pre class=\"brush:java;toolbar:false\">Set CADS_HOME=C:\\ProgramFiles\\IBM\\SPSS\\Deployment\\6.0\\Server</pre> <p>如果机器安装的是 Solaris 操作系统，我们还必须修改脚本的第一行内容，将 #!/bin/sh 修改成 #!/bin/ksh。</p> <h3>4. 修改 Local Rule Execution Server configuration file</h3> <p>在使用本地的 IBM Operational Decision Management rules 之前，还有一个需要修改的文件是 ra.xml，用户可以在 pasw.externalrule\\lib 文件夹里找到它，并且需要在 IBM SPSS Collaboration and Deployment Services，IBM® SPSS® Modeler Server 和 IBM® SPSS® Modeler Server（客户端）三个地方同时进行修改。</p> \n  <ul> \n   <li>修改 persistenceType 的变量为 file, 这意味着 Rule Execution Server 将使用文件系统的持久性</li> \n  </ul> <p>清单 4. 修改 ra.xml 文件中 persistenceType 变量的值</p> <pre class=\"brush:java;toolbar:false\">&lt;config-property-name&gt;persistenceType&lt;/config-property-name&gt;\n&lt;config-property-type&gt;java.lang.String&lt;/config-property-type&gt;\n&lt;config-property-value&gt;file&lt;/config-property-value&gt;\n&lt;/config-property&gt;</pre> <p>注意，如果规则执行服务器使用的是基于数据库系统的持久性，请忽略此步骤，我们将会在后续的文章里进行详细的说明。</p> \n  <ul> \n   <li>修改 persistence Properties 变量为 DIRECTORY=&lt;RESpath&gt;，这样在执行完脚本后部署在本地的 External Rule 将会自动存储在&lt;RESpath&gt;所定义的全路径下。</li> \n  </ul> <p>注意，依照 Java 标准，反斜线将被用于全路径的定义。</p> <p>清单 5. 修改 ra.xml 文件中 persistence Properties 变量的值</p> <pre class=\"brush:java;toolbar:false\">&lt;config-property-name&gt;persistenceProperties&lt;/config-property-name&gt;\n&lt;config-property-type&gt;java.lang.String&lt;/config-property-type&gt;\n&lt;config-property-value&gt;DIRECTORY=C:/RES&lt;/config-property-value</pre> <p> 注意，默认情况下，Persistence Properties 的参数包括： <code class=\"prettyprint\">“XOM_PERSISTENCE_TYPE, XOM_PERSISTENCE_DIRECTORY and DIRECTORY” 。由于 IBM ® Analytical Decision Management 仅支持 DIRECTORY 这一个选项，于是其它的几个选项 <code class=\"prettyprint\">XOM_PERSISTENCE_TYPE and XOM_PERSISTENCE_DIRECTORY 可以直接被手动删除掉。 </code></code></p><code class=\"prettyprint\"><code class=\"prettyprint\"> <p>清单 6. ra.xml 文件中 persistence Properties 变量的默认值</p> <pre class=\"brush:java;toolbar:false\">&lt;config-property-name&gt;persistenceProperties&lt;/config-property-name&gt;\n&lt;config-property-type&gt;java.lang.String&lt;/config-property-type&gt;\n&lt;config-property-value&gt;\nDIRECTORY=res_data, XOM_PERSISTENCE_TYPE=file,XOM_PERSISTENCE_DIRECTORY=res_xom\n&lt;/config-property-value&gt;</pre> <p>如果 BM SPSS Collaboration and Deployment Services，IBM® SPSS® Modeler Server 和 IBM® SPSS® Modeler Server（客户端）安装在三台独立的机器上，用户必须确保存放本地 External Rule 的文件夹&lt;RESpath&gt;可以被每台机器访问到。</p> <p>注意，修改完 ra.xml 文件后，需要重新启动以上三个产品（服务）。</p> <p>5. 应用脚本部署，显示和删除本地 IBM Operational Decision Management rules</p> \n    <ul> \n     <li>部署 IBM Operational Decision Management Rule App archives 到本地的 Rule Execution Server</li> \n    </ul> <p>下载 IBM Operational Decision Management Rule App archive (.jar file) 到本地。用户可以 直接从 Operational Decision Management 的“Workspace”里取得或者从 IBM Operational Decision Management Rule Designer 里直接导出。因为这是一个临时的拷贝，你可以将下载的文件放在任何一个地方。</p> <p>在 command 窗口中用户首先需要将路径指定到包含脚本 resdeploy 的目录下，然后可参考下面的例子去执行 resdeploy.bat。通常我们需要在“ -config”后填写 ra.xml 的全路径；在“-archive”的后面填写将要部署的 RuleApp.jar 的全路径。</p> <p>清单 7. 部署 ODM rules 的脚本</p> <pre class=\"brush:java;toolbar:false\">resdeploy.bat-config\"C:\\ProgramFiles\\IBM\\SPSS\\Deployment\\6.0\\Server\\components\\\n modeler\\ext\\bin\\pasw.externalrule\\lib\\ra.xml\"\n -archive\"C:\\RES\\My_ODM_RuleApp_Name.jar\"</pre> <p>脚本 resdeploy 同时也提供了其它的一些参数用来方便用户去控制部署本地规则的版本信息，如果 Rule Execution Server 包括早期的 RuleApp 版本的话 ，为了避免由于重名导致的一些冲突，在部署的时候可以参考下面的内容。</p> <p>表 1. 部署 ODM rules 脚本的参数</p> \n    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" summary=\"\"> \n     <thead xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> \n      <tr> \n       <th>参数项</th> \n       <th>可以设置的值</th> \n      </tr> \n     </thead> \n     <tbody xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> \n      <tr> \n       <td rowspan=\"4\">-merging</td> \n       <td>add.ruleapp 在保留原有 RuleApp 的基础上，在 Rule Execution Server 中增加并部署新的 RuleApp，新的 RuleApp 的版本号是在原有基础上进行增长。</td> \n      </tr> \n      <tr> \n       <td>replace.ruleapp 用新的 RuleApp 替换在 Rule Execution Server 中原有的 RuleApp，RuleApp 的版本号不变。</td> \n      </tr> \n      <tr> \n       <td>add.ruleset 在保留原有 RuleSet 的基础上，在 Rule Execution Server 中增加并部署新的 RuleSet，新的 RuleSet 的版本号是在原有基础上进行增长。</td> \n      </tr> \n      <tr> \n       <td>replace.ruleset 用新的 RuleSet 替换在 Rule Execution Server 中原有的 RuleSet，RuleSet 的版本号不变。</td> \n      </tr> \n      <tr> \n       <td rowspan=\"2\">-versioning</td> \n       <td>major 应用于主版本号的增长。</td> \n      </tr> \n      <tr> \n       <td>minor 应用于副版本号的增长。</td> \n      </tr> \n     </tbody> \n    </table> \n    <ul> \n     <li>显示已经部署到本地的 IBM Operational Decision Management rules</li> \n    </ul> <p>在 command 窗口中用户首先需要将路径指定到包含脚本 reslist 的目录下，然后可参考下面的例子去执行 reslist.bat。通常我们需要在“ -config”后填写 ra.xml 的全路径。</p> <p>清单 8. 显示已经部署到本地的 ODM rules 的命令</p> <pre class=\"brush:java;toolbar:false\">reslist.bat –config \"C:\\ProgramFiles\\IBM\\SPSS\\Deployment\\6.0\\Server\\\n components\\modeler\\ext\\bin\\pasw.externalrule\\lib\\ra.xml\"</pre> \n    <ul> \n     <li>删除已经部署 到本地的 IBM Operational Decision Management rules</li> \n    </ul> <p>在 command Prompt 窗口中用户首先需要将路径指定到包含脚本 resundeploy 的目录下，然后可参考下面的例子去执行 resundeploy.bat。通常我们需要在“ -config”后填写 ra.xml 的全路径，“-ruleapp”后填写将要删除的 RuleApp 名称。</p> <p>清单 9. 删除已经部署到本地的 ODM rules 的命令</p> <pre class=\"brush:java;toolbar:false\">resundeploy.bat –config \"C:\\ProgramFiles\\IBM\\SPSS\\Deployment\\6.0\\Server\n \\components\\modeler\\ext\\bin\\pasw.externalrule\\lib\\ra.xml\" –ruleapp \"SexF\"</pre> <p>默认情况下，resundeploy 将只删除版本为 1.0 的 RuleApp。如果用户想删除其它版本的 RuleApp 可以通过使用“-version”这个参数。</p> <p>清单 10. 删除已经部署到本地的 Version2.0 的 ODM rules</p> <pre class=\"brush:java;toolbar:false\">resundeploy.bat –config \"C:\\ProgramFiles\\IBM\\SPSS\\Deployment\\6.0\\Server\n \\components\\modeler\\ext\\bin\\pasw.externalrule\\lib\\ra.xml\" –ruleapp \"SexF”–version“2.0”</pre> <p>用户可以在执行 resdeploy 之前用 reslist 查看是否有重名的 RuleApp。在执行 resundeploy 之后可以用 reslist 首先是否对应的 RuleApp 的已被删除。</p> <h3>6. 添加本地的 RuleApp 到 CADS 客户端</h3> <p>打开 Deployment Manager 后，我们可以在 Content Explorer 选项卡中看到 Decision Management 连接的 IBM SPSS Collaboration and Deployment Services 服务器。登录后，我们在需要创建外部规则的文件夹上单击鼠标右键，在右键菜单中单击 New -&gt; External Rule。</p> <p>图 2. 打开 Deployment Manager</p> <img alt=\"图 2. 打开 Deployment Manager\" class=\"alignCenter\" data-original=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958939243.jpg\"> <p>选择 Local(IBM Operational Decision Management rules only)。</p> <p>图 3. 输入本地 rule 的名称</p> <img alt=\"图 3. 输入本地 rule 的名称\" class=\"alignCenter\" data-original=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958940120.png\"> <p>在 Rule Path 中填写部署到本地的外部规则的全路径（reslist.bat 执行后显示的内容）。</p> <p>图 4. 输入本地 rule 的路径</p> <img alt=\"图 4. 输入本地 rule 的路径\" class=\"alignCenter\" data-original=\"\" src=\"http://www.fzqblog.top/upload/201608/1471958940661.png\"> <p>现在我们可以在 Decision Management 中使用这个部署在本地的外部规则。在 Decision Management 中使用外部规则和使用 Decision Management 预测模型是一样的。在任何可以使用 Decision Management 预测模型的地方都可以使用外部规则。</p> <p> 回页首 </p> <h2>结束语</h2> <p>与之前基于 WSDL 方式远程调用 ODM Execution Server 的方式执行 Decision Server Rule 相比，部署在本地执行的外部规则在执行相同的预测模型时的速度会有 40%～60%的提高，这将大大地节省客户的等待时间，提高工作效率。如果客户环境的 Decision Server Rule 需要频繁修改以适应新的工作要求的话，建议使用远程 WSDL 调用方式进行外部规则的集成；当客户的 Decision Server Rule 相对固定的情况下，使用本地的外部规则将是最为明智的选择。</p> </code></code></code>\n</div>\n<p><code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\">转自：http://www.ibm.com/developerworks/cn/data/library/techarticle/dm-1412spssdwij/index.html?ca=drs-</code></code></code></p>\n<code class=\"prettyprint\"><code class=\"prettyprint\"><code class=\"prettyprint\"> </code></code></code>','  引言   在《 如何集成 IBM SPSS Decision Management 与 IBM WebSphere ILOG JRules 》一文中，我们已针对 IBM Analytical Decision Management 和 IBM WebSphere Operational Decision Management Decision Server Rule 这两个产品基于 Web S......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:29:01',0,2,1,1,'http://www.fzqblog.top/upload/201608/1471958936720.png|http://www.fzqblog.top/upload/201608/1471958939243.jpg|http://www.fzqblog.top/upload/201608/1471958940120.png|http://www.fzqblog.top/upload/201608/1471958940661.png|',NULL,1),(374,1,6,'JavaWeb应用开发使用jetty札记','<div> \n <p>应该做点变化了，决定使用Maven来管理工程，并且在Java Web开发中使用Jetty来作为测试容器。</p> \n <p>1.JavaWeb工程配置jetty-maven-plugin插件</p> \n <pre class=\"brush:java;toolbar:false\">&lt;plugin&gt;\n    &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;\n    &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;\n    &lt;version&gt;9.2.6.v20141205&lt;/version&gt;\n    &lt;configuration&gt;\n     &lt;scanIntervalSeconds&gt;10&lt;/scanIntervalSeconds&gt;\n    &lt;/configuration&gt;\n   &lt;/plugin&gt;</pre> \n <p>jetty的Maven插件由org.mortbay.jetty转到了org.eclipse.jetty。在使用最新的jetty-mavevn-plugin需要JRE1.7+，因此在使用的时候需要格外注意执行Maven命令所依赖的JRE版本。</p> \n <p>执行mvn -version,就可以看到具体执行Maven命令时的JRE版本。</p> \n <pre class=\"brush:java;toolbar:false\">Apache Maven 3.1.0 (893ca28a1da9d5f51ac03827af98bb730128f9f2; 2013-06-28 10:15:32+0800)\nMaven home: D:\\__dev\\apache-maven-3.1.0\nJava version: 1.6.0_30, vendor: Sun Microsystems Inc.\nJava home: D:\\__dev\\Java\\jdk1.6.0_30\\jre\nDefault locale: zh_CN, platform encoding: GBK\nOS name: \"windows 7\", version: \"6.1\", arch: \"x86\", family: \"windows\"</pre> \n <p>在如上的环境下执行mvn jetty:run命令时就会发现如下错误：</p> \n <pre class=\"brush:java;toolbar:false\">[ERROR] Failed to execute goal org.eclipse.jetty:jetty-maven-plugin:9.2.6.v20141205:run (default-cli) on project tiles: Execution default-cli of goal org.eclipse.jetty:jetty-maven-plugin:9.2.6.v20141205:run failed: Unable to load the mojo \'run\' in the plugin \'org.eclipse.jetty:jetty-maven-plugin:9.2.6.v20141205\' due to an API incompatibility: org.codehaus.plexus.component.repository.exception.ComponentLookupException: org/eclipse/jetty/maven/plugin/JettyRunMojo : Unsupported major.minor version 51.0</pre> \n <p>这个问题的产生就是我们执行mvn -version命令后看到的Java version并不是1.7+，这里可以在不改变系统的JAVA_HOME设置做个临时性的变动。在命令窗执行:set JAVA_HOME=java_jdk_1.7_的目录。 </p> \n <p>具体操作如下图所示（本机没有现成的JDK7这里使用了JDK8）：</p> \n <p> <img class=\"alignCenter\" data-original=\"\" title=\"jetty_run.png\" alt=\"wKioL1SjV9DRQmZcAAHRSHLLFf0243.jpg\" src=\"http://www.fzqblog.top/upload/201608/1471958941448.jpg\"> </p> \n <p>重新设置完成之后，执行jetty:run命令：</p> \n <p> <img class=\"alignCenter\" data-original=\"\" title=\"jetty_start.png\" alt=\"wKiom1SjV8igIlhwAAHVjMcpZfY916.jpg\" src=\"http://www.fzqblog.top/upload/201608/1471958941798.jpg\"> </p> \n <p>从上图标注可以看到Jetty Server启动成功。</p> \n <p>这一段内容主要说明在使用jetty-maven-plugin是注意的执行Maven命令的JRE环境。</p> \n <p>另外较低版本的jetty-maven-plugin有： </p> \n <pre class=\"brush:java;toolbar:false\">&lt;plugin&gt; \n    &lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt; \n    &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt; \n    &lt;version&gt;7.1.6.v20100715&lt;/version&gt; \n    &lt;configuration&gt; \n     &lt;scanIntervalSeconds&gt;1&lt;/scanIntervalSeconds&gt; \n     &lt;reload&gt;automatic&lt;/reload&gt; \n     &lt;webAppConfig&gt; \n      &lt;contextPath&gt;/tiles&lt;/contextPath&gt; \n     &lt;/webAppConfig&gt; \n    &lt;/configuration&gt; \n   &lt;/plugin&gt;</pre> \n <p>相关文档：</p> \n <p> [org.eclipse.jetty].[jetty-maven-plugin].[9.x]: <a href=\"http://www.eclipse.org/jetty/documentation/current/jetty-maven-plugin.html\" target=\"_blank\" rel=\"nofollow,noindex\">http://www.eclipse.org/jetty/documentation/current/jetty-maven-plugin.html</a> </p> \n <p> [org.mortbay.jetty].[jetty-maven-plugin].[old_version]: <a href=\"http://docs.codehaus.org/display/JETTY/Maven+Jetty+Plugin\" target=\"_blank\" rel=\"nofollow,noindex\">http://docs.codehaus.org/display/JETTY/Maven+Jetty+Plugin</a> </p> \n <p> 建议使用最近发布的版本，关注jetty从 <a href=\"http://eclipse.org/jetty/documentation%E5%BC%80%E5%A7%8B%E3%80%82\" target=\"_blank\" rel=\"nofollow,noindex\">http://eclipse.org/jetty/documentation开始。</a> </p> \n <p>2.基于Jetty可编程开发web应用</p> \n <p>2.0. 添加依赖</p> \n <pre class=\"brush:java;toolbar:false\">&lt;dependency&gt;\n   &lt;groupId&gt;javax.servlet&lt;/groupId&gt;\n   &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;\n   &lt;version&gt;3.1.0&lt;/version&gt;\n   &lt;scope&gt;provided&lt;/scope&gt;\n  &lt;/dependency&gt;\n  &lt;dependency&gt;\n   &lt;groupId&gt;org.eclipse.jetty.aggregate&lt;/groupId&gt;\n   &lt;artifactId&gt;jetty-all&lt;/artifactId&gt;\n   &lt;version&gt;7.6.9.v20130131&lt;/version&gt;\n  &lt;/dependency&gt;</pre> \n <p>如果在应用中使用到jsp的话需要添加jetty-jsp依赖，在jetty-all中并为聚合jetty-jsp模块。</p> \n <p>2.1创建服务</p> \n <pre class=\"brush:java;toolbar:false\">package secondriver.embedded.jetty.app;\n\nimport org.eclipse.jetty.server.Handler;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.server.handler.ContextHandler;\nimport org.eclipse.jetty.server.handler.ContextHandlerCollection;\nimport org.eclipse.jetty.server.handler.DefaultHandler;\nimport org.eclipse.jetty.server.handler.HandlerCollection;\nimport org.eclipse.jetty.server.nio.SelectChannelConnector;\nimport org.eclipse.jetty.util.thread.QueuedThreadPool;\n\nimport secondriver.embedded.jetty.app.servlet.DispatchHandler;\n\npublic class ProgrammableServer {\n\n public static void main(String[] args) throws Exception {\n  // 创建Server\n  Server server = new Server();\n\n  // 添加ThreadPool\n  QueuedThreadPool queuedThreadPool = new QueuedThreadPool();\n  queuedThreadPool.setName(\"queuedTreadPool\");\n  queuedThreadPool.setMinThreads(10);\n  queuedThreadPool.setMaxThreads(200);\n\n  server.setThreadPool(queuedThreadPool);\n\n  // 添加Connector\n  SelectChannelConnector connector = new SelectChannelConnector();\n  connector.setPort(8888);\n  connector.setAcceptors(4);\n  connector.setMaxBuffers(2048);\n  connector.setMaxIdleTime(10000);\n\n  server.addConnector(connector);\n\n  // 添加Handler\n  ContextHandlerCollection context = new ContextHandlerCollection();\n  ContextHandler contextHandler = context.addContext(\"/\", \"/\");\n  contextHandler.setHandler(new DispatchHandler());\n\n  Handler defaults = new DefaultHandler();\n\n  HandlerCollection collection = new HandlerCollection();\n  collection.setHandlers(new Handler[] { context, defaults });\n\n  server.setHandler(collection);\n\n  // 启动服务\n  server.start();\n  while (server.isStarted()) {\n   System.out.println(\"server starting...\");\n   break;\n  }\n  System.out.println(\"server stared...\");\n  System.out.println(\"ContextHandlerCollectio.getServer() = \"\n    + context.getServer().hashCode());\n  System.out.println(\"Server:\" + server.hashCode());\n  server.join();\n }\n}</pre> \n <p>2.2.编写分发处理类DispatchHandler</p> \n <pre class=\"brush:java;toolbar:false\">package secondriver.embedded.jetty.app.servlet;\n\nimport java.io.IOException;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.eclipse.jetty.server.Request;\nimport org.eclipse.jetty.server.handler.AbstractHandler;\n\npublic class DispatchHandler extends AbstractHandler {\n\n public void handle(String target, Request baseRequest,\n   HttpServletRequest request, HttpServletResponse response)\n   throws IOException, ServletException {\n\n  /**\n   * 这里将是根据不同的请求来分发给不同的Handler来处理\n   */\n  if (target.equals(\"/index\")) {\n   new IndexHandler().handle(target, baseRequest, request, response);\n  } else {\n   new HelloHandler().handle(target, baseRequest, request, response);\n  }\n }\n}</pre> \n <p>2.3.编写相应的Handler（IndexHandler和HelloHandler）</p> \n <pre class=\"brush:java;toolbar:false\">public class IndexHandler extends AbstractHandler {\n\n @Override\n public void handle(String target, Request baseRequest,\n   HttpServletRequest request, HttpServletResponse response)\n   throws IOException, ServletException {\n\n  response.setCharacterEncoding(\"UTF-8\");\n  response.setContentType(\"text/html;charset=UTF-8\");\n\n  PrintWriter out = response.getWriter();\n  out.write(\"&lt;h3&gt;Hello World Jetty!&lt;/h3&gt;\");\n  out.write(Calendar.getInstance().getTime().toString());\n  out.flush();\n  out.close();\n }\n}</pre> \n <pre class=\"brush:java;toolbar:false\">public class HelloHandler extends AbstractHandler {\n\n public void handle(String target, Request baseRequest,\n   HttpServletRequest request, HttpServletResponse response)\n   throws IOException, ServletException {\n\n  response.setContentType(\"text/html;charset=UTF-8\");\n  PrintWriter out = response.getWriter();\n  out.write(\"&lt;h3&gt;This is a HelloHandler and contextPath is \'/hello\'.&lt;/h3&gt;\");\n  out.flush();\n  out.close();\n }\n}</pre> \n <p> 2.4.启动服务，通过浏览器访问： <a href=\"http://localhost:8888/index\" target=\"_blank\" rel=\"nofollow,noindex\">http://localhost:8888/index</a> 和 <a href=\"http://localhost:8888/hello\" target=\"_blank\" rel=\"nofollow,noindex\">http://localhost:8888/hello</a> </p> \n <p> <img class=\"alignCenter\" data-original=\"\" title=\"jetty-programming.png\" alt=\"wKioL1SjYRPR5faPAAHFQgzNikk154.jpg\" src=\"http://www.fzqblog.top/upload/201608/1471958942042.jpg\"> </p> \n <p>从通过可以看到访问响应的结果更加请求不同而被分发给不同的Handler来处理了。很多时候可不不这么使用，而是将Jetty作为嵌入式容器集成在应用中。</p> \n <p>3.jetty作为嵌入式容器集成在应用中 </p> \n <p>关于这方面的使用有一个开源项目做的很不错-Sparkjava。</p> \n <p> Sparkjava: <a href=\"http://sparkjava.com/\" target=\"_blank\" rel=\"nofollow,noindex\">http://sparkjava.com/</a> Github:&nbsp; <a href=\"https://github.com/perwendel/spark\" target=\"_blank\" rel=\"nofollow,noindex\">https://github.com/perwendel/spark</a> </p> \n <p>示例可参见：</p> \n <p> <a href=\"http://git.oschina.net/secondriver/Spark-Java-App\" target=\"_blank\" rel=\"nofollow,noindex\">http://git.oschina.net/secondriver/Spark-Java-App</a> </p> \n <p> <a href=\"https://git.oschina.net/secondriver/jetty-app.git\" target=\"_blank\" rel=\"nofollow,noindex\">https://git.oschina.net/secondriver/jetty-app</a> </p> \n</div>\n<p>转自：http://aiilive.blog.51cto.com/1925756/1598025</p>','  应该做点变化了，决定使用Maven来管理工程，并且在Java Web开发中使用Jetty来作为测试容器。  1.JavaWeb工程配置jetty-maven-plugin插件      org.eclipse.jetty    jetty-maven-plugin    9.2.6.v20141205         10         jetty的Maven插件由org.mortbay.j......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:29:03',0,0,0,0,'http://www.fzqblog.top/upload/201608/1471958941448.jpg|http://www.fzqblog.top/upload/201608/1471958941798.jpg|http://www.fzqblog.top/upload/201608/1471958942042.jpg|',NULL,1),(375,1,6,'J2EE的13个标准时什么？','<div> \n <p>J2EE平台由一整套服务（Services）、应用程序接口（APIs）和协议构成，它对开发基于Web的多层应用提供了功能支持，下面对J2EE中的13种技术规范进行简单的描述(限于篇幅，这里只能进行简单的描述)：</p> \n <h4>1.JDBC(Java Database Connectivity):&nbsp;</h4> \n <p>JDBC API为访问不同的数据库提供了一种统一的途径，象ODBC一样，JDBC对开发者屏蔽了一些细节问题，另外，JDBC对数据库的访问也具有平台无关性。</p> \n <h4>2.JNDI(Java Name and Directory Interface):&nbsp;</h4> \n <p>JNDI API被用于执行名字和目录服务。它提供了一致的模型来存取和操作企业级的资源如DNS和LDAP，本地文件系统，或应用服务器中的对象。</p> \n <h4>3.EJB(Enterprise JavaBean):&nbsp;</h4> \n <p>J2EE技术之所以赢得某体广泛重视的原因之一就是EJB。它们提供了一个框架来开发和实施分布式商务逻辑，由此很显著地简化了具有可伸缩性和高度复杂的企业级应用的开发。EJB规范定义了EJB组件在何时如何与它们的容器进行交互作用。容器负责提供公用的服务，例如目录服务、事务管理、安全性、资源缓冲池以及容错性。但这里值得注意的是，EJB并不是实现J2EE的唯一途径。正是由于J2EE的开放性，使得有的厂商能够以一种和EJB平行的方式来达到同样的目的。</p> \n <h4>4.RMI(Remote Method Invoke):&nbsp;</h4> \n <p>正如其名字所表示的那样，RMI协议调用远程对象上方法。它使用了序列化方式在客户端和服务器端传递数据。RMI是一种被EJB使用的更底层的协议。</p> \n <h4>5.Java IDL/CORBA:&nbsp;</h4> \n <p>在Java IDL的支持下，开发人员可以将Java和CORBA集成在一起。他们可以创建Java对象并使之可在CORBA ORB中展开, 或者他们还可以创建Java类并作为和其它ORB一起展开的CORBA对象的客户。后一种方法提供了另外一种途径，通过它Java可以被用于将你的新的应用和旧的系统相集成。</p> \n <h4>6.JSP(Java Server Pages):&nbsp;</h4> \n <p>JSP页面由HTML代码和嵌入其中的Java代码所组成。服务器在页面被客户端所请求以后对这些Java代码进行处理，然后将生成的HTML页面返回给客户端的浏览器。</p> \n <h4>7.Java Servlet:&nbsp;</h4> \n <p>Servlet是一种小型的Java程序，它扩展了Web服务器的功能。作为一种服务器端的应用，当被请求时开始执行，这和CGI Perl脚本很相似。Servlet提供的功能大多与JSP类似，不过实现的方式不同。JSP通常是大多数HTML代码中嵌入少量的Java代码，而servlets全部由Java写成并且生成HTML。</p> \n <h4>8.XML(Extensible Markup Language):&nbsp;</h4> \n <p>XML是一种可以用来定义其它标记语言的语言。它被用来在不同的商务过程中共享数据。XML的发展和Java是相互独立的，但是，它和Java具有的相同目标正是平台独立性。通过将Java和XML的组合，您可以得到一个完美的具有平台独立性的解决方案。</p> \n <h4>9.JMS(Java Message Service):&nbsp;</h4> \n <p>MS是用于和面向消息的中间件相互通信的应用程序接口(API)。它既支持点对点的域，有支持发布/订阅(publish/subscribe)类型的域，并且提供对下列类型的支持：经认可的消息传递,事务型消息的传递，一致性消息和具有持久性的订阅者支持。JMS还提供了另一种方式来对您的应用与旧的后台系统相集成。</p> \n <h4>10.JTA(Java Transaction Architecture):&nbsp;</h4> \n <p>JTA定义了一种标准的API，应用系统由此可以访问各种事务监控。</p> \n <h4>11.JTS(Java Transaction Service):&nbsp;</h4> \n <p>JTS是CORBA OTS事务监控的基本的实现。JTS规定了事务管理器的实现方式。该事务管理器是在高层支持Java Transaction API (JTA)规范，并且在较底层实现OMG OTS specification的Java映像。JTS事务管理器为应用服务器、资源管理器、独立的应用以及通信资源管理器提供了事务服务。</p> \n <h4>12.JavaMail:&nbsp;</h4> \n <p>JavaMail是用于存取邮件服务器的API，它提供了一套邮件服务器的抽象类。不仅支持SMTP服务器，也支持IMAP服务器。</p> \n <h4>13.JAF(JavaBeans Activation Framework):&nbsp;</h4> \n <p>JavaMail利用JAF来处理MIME编码的邮件附件。MIME的字节流可以被转换成Java对象，或者转换自Java对象。大多数应用都可以不需要直接使用JAF。</p> \n</div>\n<p>转自：http://blog.snsgou.com/post-828.html</p>','  J2EE平台由一整套服务（Services）、应用程序接口（APIs）和协议构成，它对开发基于Web的多层应用提供了功能支持，下面对J2EE中的13种技术规范进行简单的描述(限于篇幅，这里只能进行简单的描述)：  1.JDBC(Java Database Connectivity):   JDBC API为访问不同的数据库提供了一种统一的途径，象ODBC一样，JDBC对开发者屏蔽了一些细节问题......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:29:04',0,0,0,0,'',NULL,1),(376,1,6,'Mybatis 通用 Mapper 1.1.0 版发布','<div> \n <p> <a href=\"http://city.oschina.net/guangzhou/event/195924\" target=\"_blank\" rel=\"nofollow,noindex\">#广州# OSC源创会第31期（12月27日）开始报名，OSC自曝家丑！</a> </p> \n <p> <span> </span></p>\n <h2>V1.1.0</h2> \n <ul> \n  <li> <p>完善文档</p> </li> \n  <li> <p>解决主键selectKey的一个bug(已解决，1.1.0版本会发布)</p> </li> \n  <li> <p>解决@Column注解为空时的bug</p> </li> \n  <li> <p>完善自动增长的配置，增加对JDBC的支持</p> </li> \n  <li> <p>增加了一个notEmpty参数，该参数会影响所有使用getAllIfColumnNode方法的地方,具体到Mapper&lt;T&gt;,影响3个方法：select,selectCount,delete。如果设置为true，那么&lt;if ...的条件中会包含String类型property!=\'\'的条件。</p> </li> \n </ul>  \n <p></p> \n <p> <span> </span></p>\n <h3>v1.0.0</h3> \n <ul> \n  <li> <p>增加通用Mapper专用的MyBatis Generator插件，可以自动生成实体类注解以及Mapper接口和一个空的xml文件</p> </li> \n  <li> <p>插件后续可能会增加更多的自动生成代码。</p> </li> \n  <li> <p>有关插件的使用，后续完善文档</p> </li> \n </ul>  \n <p></p> \n <p>项目从1.0.0版本开始上传到Maven中央仓库，你可以使用下面的坐标引入： &nbsp;</p> \n <pre class=\"brush:java;toolbar:false\">&lt;dependency&gt;\n    &lt;groupId&gt;com.github.abel533&lt;/groupId&gt;\n    &lt;artifactId&gt;mapper&lt;/artifactId&gt;\n    &lt;!-- 1.1.0是版本号，推荐使用最新版 --&gt;\n    &lt;version&gt;1.1.0&lt;/version&gt;\n&lt;/dependency&gt;</pre> \n <p>从1.0.0版本后增加了通用Mapper转换的MyBatis Generator插件。</p> \n <p>插件的使用可以下面的第三份文档。其他有关内容请看本项目的gitosc页面文档。</p> \n <p>相关文档：</p> \n <h2> <span>1.&nbsp;</span> <a href=\"http://git.oschina.net/free/Mapper/blob/master/HowToExtendMapper.md\" rel=\"nofollow,noindex\">如何开发自己的通用Mapper</a> </h2> \n <h3> 2.&nbsp; <a href=\"http://git.oschina.net/free/Mapper/blob/master/UseMapperInSpring4.md\" rel=\"nofollow,noindex\">在Spring4中使用通用Mapper</a> </h3> \n <p> 3. <a href=\"http://git.oschina.net/free/Mapper/blob/master/UseMBGInMapper.md\" rel=\"nofollow,noindex\">如何使用Mapper专用的MyBatis Generator插件</a> </p> \n</div>\n<p>转自：http://www.oschina.net/news/58399/mybatis-mapper-1-1-0</p>','   #广州# OSC源创会第31期（12月27日）开始报名，OSC自曝家丑！      V1.1.0      完善文档     解决主键selectKey的一个bug(已解决，1.1.0版本会发布)     解决@Column注解为空时的bug     完善自动增长的配置，增加对JDBC的支持     增加了一个notEmpty参数，该参数会影响所有使用getAllIfColumnNode方法......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:29:05',2,30,2,2,'',NULL,1),(377,1,6,'jetty-maven-plugin静态文件保存不了','<div> \n <h2>起因</h2> \n <p>为maven项目配置jetty-maven-plugin插件，以jetty:run方式运行，会出现静态文件保存不了的问题。原因是jetty内存映射文件来缓存静态文件. 解决方法是将jetty内存映射参数取消掉.</p> \n <h2>解决</h2> \n <h2>找webdefault.xml文件</h2> \n <p>在下面路径找到webdefault.xml文件</p> \n <pre class=\"brush:java;toolbar:false\">C:\\Users\\Administrator\\.m2\\repository\\org\\eclipse\\jetty\\jetty-webapp\\9.2.6.v20141205</pre> \n <p>如果安装了jetty服务器，在它的etc目录下也可以取到webdefault.xml文件</p> \n <h2>useFileMappedBuffer参数值改为false</h2> \n <p>webdefault.xml配置</p> \n <pre class=\"brush:java;toolbar:false\">&lt;init-param&gt;\n  &lt;param-name&gt;useFileMappedBuffer&lt;/param-name&gt;\n  &lt;param-value&gt;false&lt;/param-value&gt;\n&lt;/init-param&gt;</pre> \n <h2>新增defaultsDescriptor配置项</h2> \n <pre class=\"brush:java;toolbar:false\">&lt;plugin&gt;  \n &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;  \n &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;  \n &lt;version&gt;9.2.6.v20141205&lt;/version&gt;  \n &lt;configuration&gt;\n  &lt;scanIntervalSeconds&gt;0&lt;/scanIntervalSeconds&gt;\n  &lt;webAppSourceDirectory&gt;${basedir}/WebRoot&lt;/webAppSourceDirectory&gt;\n  &lt;webApp&gt;  \n   &lt;contextPath&gt;/&lt;/contextPath&gt;\n   &lt;war&gt;${project.build.directory}/${project.build.finalName}.war&lt;/war&gt;\n   &lt;!-- jetty9.2.6的defaultsDescriptor在&lt;webApp&gt;里，早期版本在&lt;configuration&gt;或者&lt;webAppConfig&gt;里 --&gt;\n   &lt;defaultsDescriptor&gt;${basedir}/WebRoot/resources/webdefault.xml&lt;/defaultsDescriptor&gt;\n  &lt;/webApp&gt; \n&lt;/configuration&gt;\n&lt;/plugin&gt;\n</pre> \n <h2>webdefault.xml加载是否成功</h2> \n <p>控制台输出如下，表示加载了webdefualt.xml</p> \n <pre class=\"brush:java;toolbar:false\">[INFO] Web defaults = .... /WebRoot/resources/webdefault.xml</pre> \n <h2>感受</h2> \n <p>上面方法虽然可以解决问题，但是很不好用. 如果jetty-maven-plugin能设计个开发模式设置，在易用性上会有更大提升.</p> \n <h2>参考资料</h2> \n <p>jetty-maven-plugin配置文档</p> \n <p> <a href=\"http://eclipse.org/jetty/documentation/current/jetty-maven-plugin.html\" rel=\"nofollow,noindex\">http://eclipse.org/jetty/documentation/current/jetty-maven-plugin.html</a> </p> \n <p>maven文档</p> \n <p> <a href=\"http://mvnrepository.com/artifact/org.eclipse.jetty/jetty-maven-plugin/9.2.6.v20141205\" rel=\"nofollow,noindex\">http://mvnrepository.com/artifact/org.eclipse.jetty/jetty-maven-plugin/9.2.6.v20141205</a> </p> \n <p> <a href=\"http://www.pk.com.cn\" rel=\"nofollow,noindex\">PK网-消费者说了算的平台</a> </p> \n</div>\n<p>转自：http://yongqing.is-programmer.com/posts/74824.html</p>','  起因  为maven项目配置jetty-maven-plugin插件，以jetty:run方式运行，会出现静态文件保存不了的问题。原因是jetty内存映射文件来缓存静态文件. 解决方法是将jetty内存映射参数取消掉.  解决  找webdefault.xml文件  在下面路径找到webdefault.xml文件  C:\\Users\\Administrator\\.m2\\repository\\o......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-23 21:29:05',0,1,0,0,'',NULL,1),(378,1,6,'LINUX下使用Shell自动监控tomcat并且执行重启操作','<div> \n <div> \n  <p>转自http://my.oschina.net/chinaearl/blog/111830，如有侵权，请通知我，我及时删除。</p> \n  <p>下面的文件名称为monitor.sh，如果没有执行权限请使用chmod 777 monitor.sh</p> \n </div> \n <div> \n  <p> [plain] <a href=\"http://blog.csdn.net/ygh_0912/article/details/11081219\" title=\"view plain\" rel=\"nofollow,noindex\">view plain</a> <a href=\"http://blog.csdn.net/ygh_0912/article/details/11081219\" title=\"copy\" rel=\"nofollow,noindex\">copy</a> </p> \n  <ol> \n   <li>#!/bin/sh&nbsp;&nbsp;</li> \n   <li></li> \n   <li>#&nbsp;func:自动监控tomcat脚本并且执行重启操作&nbsp;&nbsp;</li> \n   <li>#&nbsp;author:danny&nbsp;&nbsp;</li> \n   <li>#&nbsp;date:02/20/2013&nbsp;&nbsp;</li> \n   <li>#&nbsp;DEFINE&nbsp;&nbsp;</li> \n   <li></li> \n   <li>#&nbsp;获取tomcat进程ID&nbsp;&nbsp;</li> \n   <li>TomcatID=$(ps&nbsp;-ef&nbsp;|grep&nbsp;tomcat&nbsp;|grep&nbsp;-w&nbsp;\'dw\\/apache-tomcat-7.0.34\\/conf\'|grep&nbsp;-v&nbsp;\'grep\'|awk&nbsp;\'{print&nbsp;$2}\')&nbsp;&nbsp;</li> \n   <li></li> \n   <li>#&nbsp;tomcat启动程序(这里注意tomcat实际安装的路径)&nbsp;&nbsp;</li> \n   <li>StartTomcat=/home/dw/apache-tomcat-7.0.34/bin/startup.sh&nbsp;&nbsp;</li> \n   <li>#TomcatCache=/usr/apache-tomcat-5.5.23/work&nbsp;&nbsp;</li> \n   <li></li> \n   <li>#&nbsp;定义要监控的页面地址&nbsp;&nbsp;</li> \n   <li>WebUrl=http://haoyayi.eyar.com&nbsp;&nbsp;</li> \n   <li></li> \n   <li>#&nbsp;日志输出&nbsp;&nbsp;</li> \n   <li>GetPageInfo=/dev/null&nbsp;&nbsp;</li> \n   <li>TomcatMonitorLog=/tmp/TomcatMonitor.log&nbsp;&nbsp;</li> \n   <li></li> \n   <li>Monitor()&nbsp;&nbsp;</li> \n   <li>{&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;echo&nbsp;\"[info]开始监控tomcat...[$(date&nbsp;+\'%F&nbsp;%H:%M:%S\')]\"&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;if&nbsp;[[&nbsp;$TomcatID&nbsp;]];then&nbsp;#&nbsp;这里判断TOMCAT进程是否存在&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"[info]当前tomcat进程ID为:$TomcatID,继续检测页面...\"&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;检测是否启动成功(成功的话页面会返回状态\"200\")&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;TomcatServiceCode=$(curl&nbsp;-s&nbsp;-o&nbsp;$GetPageInfo&nbsp;-m&nbsp;10&nbsp;--connect-timeout&nbsp;10&nbsp;$WebUrl&nbsp;-w&nbsp;%{http_code})&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;[&nbsp;$TomcatServiceCode&nbsp;-eq&nbsp;200&nbsp;];then&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"[info]页面返回码为$TomcatServiceCode,tomcat启动成功,测试页面正常......\"&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"[error]tomcat页面出错,请注意......状态码为$TomcatServiceCode,错误日志已输出到$GetPageInfo\"&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"[error]页面访问出错,开始重启tomcat\"&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#kill&nbsp;-9&nbsp;$TomcatID&nbsp;&nbsp;#&nbsp;杀掉原tomcat进程&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#sleep&nbsp;3&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#rm&nbsp;-rf&nbsp;$TomcatCache&nbsp;#&nbsp;清理tomcat缓存&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#$StartTomcat&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;fi&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;else&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"[error]tomcat进程不存在!tomcat开始自动重启...\"&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"[info]$StartTomcat,请稍候......\"&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;#rm&nbsp;-rf&nbsp;$TomcatCache&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;#$StartTomcat&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;fi&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;echo&nbsp;\"------------------------------\"&nbsp;&nbsp;</li> \n   <li>}&nbsp;&nbsp;</li> \n   <li>Monitor&gt;&gt;$TomcatMonitorLog&nbsp;&nbsp;</li> \n  </ol> \n </div> \n <p>下面是的这段代码是监控tomcat是否运行，如果运行，则将其停止.文件名称本人叫做shutdown.sh </p> \n <div> \n  <p> [plain] <a href=\"http://blog.csdn.net/ygh_0912/article/details/11081219\" title=\"view plain\" rel=\"nofollow,noindex\">view plain</a> <a href=\"http://blog.csdn.net/ygh_0912/article/details/11081219\" title=\"copy\" rel=\"nofollow,noindex\">copy</a> </p> \n  <ol> \n   <li>#!/bin/sh&nbsp;&nbsp;</li> \n   <li>TomcatID=$(ps&nbsp;-ef&nbsp;|grep&nbsp;hudson-3.01&nbsp;|grep&nbsp;java&nbsp;|&nbsp;awk&nbsp;\'&nbsp;{&nbsp;print&nbsp;$2&nbsp;}&nbsp;\')&nbsp;&nbsp;</li> \n   <li>echo&nbsp;\"tomcat的pid为$TomcatID\"&nbsp;&nbsp;</li> \n   <li>Monitor(){&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"[info]开始监控tomcat...[$(date&nbsp;+\'%F&nbsp;%H:%M:%S\')]\"&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;[[&nbsp;$TomcatID&nbsp;]]&nbsp;&nbsp;</li> \n   <li>#&nbsp;这里判断TOMCAT进程是否存在&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;then&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"tomca启动正常\"&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kill&nbsp;-9&nbsp;$TomcatID&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempTomcatID=$(ps&nbsp;-ef&nbsp;|grep&nbsp;hudson-3.01&nbsp;|grep&nbsp;java&nbsp;|&nbsp;awk&nbsp;\'&nbsp;{&nbsp;print&nbsp;$2&nbsp;}&nbsp;\')&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;[[&nbsp;$tempTomcatID&nbsp;]]&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;then&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"停止失败\"&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"成功停止\"&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fi&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"tomcat没有启动\"&nbsp;&nbsp;</li> \n   <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fi&nbsp;&nbsp;</li> \n   <li>}&nbsp;&nbsp;</li> \n   <li></li> \n   <li></li> \n   <li>Monitor&nbsp;&nbsp;</li> \n  </ol> \n </div> \n <h2>下面的代码是启动tomca并将其日志显示出来,文件名称本人叫做startup.sh </h2> \n <div> \n  <p> [plain] <a href=\"http://blog.csdn.net/ygh_0912/article/details/11081219\" title=\"view plain\" rel=\"nofollow,noindex\">view plain</a> <a href=\"http://blog.csdn.net/ygh_0912/article/details/11081219\" title=\"copy\" rel=\"nofollow,noindex\">copy</a> </p> \n  <ol> \n   <li>cd&nbsp;/home/test/hudson-3.01/bin&nbsp;&amp;&amp;&nbsp;./startup.sh&nbsp;&amp;&amp;&nbsp;tail&nbsp;-f&nbsp;../logs/catalina.out &nbsp;</li> \n  </ol> \n </div> \n</div>\n<p>转自：http://itindex.net/detail/52327-linux-shell-tomcat</p>','     转自http://my.oschina.net/chinaearl/blog/111830，如有侵权，请通知我，我及时删除。   下面的文件名称为monitor.sh，如果没有执行权限请使用chmod 777 monitor.sh        [plain] view plain copy        #!/bin/sh          # func:自动监控tomcat脚本并且执......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-24 20:28:32',0,0,0,0,'',NULL,0),(379,1,6,'struts2 返回 json','<div> \n <p>1、action 片段</p> \n <pre class=\"brush:java;toolbar:false\">public Map responseJson;   \n    public Map getResponseJson() {   \n        return responseJson;   \n    }   \n    public void setResponseJson(Map responseJson) {   \n        this.responseJson = responseJson;   \n    }</pre> \n <pre class=\"brush:java;toolbar:false\">Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();  \n  List&lt;Map&lt;String, Object&gt;&gt; list = new ArrayList&lt;Map&lt;String, Object&gt;&gt;();  \n  \n  \n   Map&lt;String, Object&gt; m = new HashMap&lt;String, Object&gt;();  \n   m.put(\"m0001\",m0005.getM0001()); \n   m.put(\"m0002\",m0005.getM0002()); \n   \n   list.add(m); \n\n  map.put(\"status\", 1);\n  map.put(\"M0005List\", list);\n  this.setResponseJson(map);</pre> \n <p>2、struts2 XML</p> \n <pre class=\"brush:java;toolbar:false\">&lt;package name=\"shopManagerJson\" extends=\"json-default\" namespace=\"/shopManagerJson\"&gt;\n  &lt;action name=\"*\"\n   class=\"com.mall.shop.action.ShopAction\" method=\"{1}\"&gt;\n   &lt;result type=\"json\"&gt;\n    &lt;!-- 这里指定将被Struts2序列化的属性，该属性在action中必须有对应的getter方法 --&gt;\n    &lt;param name=\"root\"&gt;responseJson&lt;/param&gt;\n   &lt;/result&gt;\n   &lt;/action&gt;\n &lt;/package&gt;</pre> \n <p>3、js</p> \n <pre class=\"brush:java;toolbar:false\">$.post(postUrl,{gid:goodsId,num:goodsNum,sid:shopid},function(data){\n             \n             if(data.status){\n\n              tdTemp.empty();\n              \n              $.each(data.M0005List,function(i, item){\n                       \n                       tdTemp.append(\'&lt;td bgcolor=\"#ffffff\" align=\"center\" style=\"width:250px;\" valign=\"middle\"&gt;&lt;a href=\"&lt;%=basePath%&gt;goodsManager/toFindGoodsPage.do?id=\'+item.m0003+\'\" target=\"_blank\"&gt;&lt;img style=\"width:50px; height:50px;\" class=\"lazy-load\" data-original=\"&lt;%=basePath%&gt;photo/\'+item.m0010+\'\" border=\"0\"&gt;&lt;br&gt;\'+item.m0007+\'&lt;/a&gt; &lt;/td&gt;\');\n                      tdTemp.append(\'&lt;input name=\"goodsId\" type=\"hidden\" value=\"\'+item.m0003+\'\"&gt;&lt;input name=\"sid\" type=\"hidden\" value=\"\'+item.m0001+\'\"&gt;\');\n                     tdTemp.append(\'&lt;td bgcolor=\"#ffffff\" align=\"center\"&gt;\'+item.m0004+\' &lt;br&gt;&lt;/td&gt;\');\n                     tdTemp.append(\'&lt;td align=\"center\" bgcolor=\"#ffffff\"&gt;&lt;span class=\"price\"&gt;\'+item.m0008.toFixed(1)+\'&lt;/span&gt;&lt;/td&gt;\');\n                     tdTemp.append(\'&lt;td align=\"center\" bgcolor=\"#ffffff\"&gt;&lt;input class=\"min\" name=\"\" type=\"button\" value=\"-\"&gt; &lt;input type=\"text\" name=\"\" id=\"goods_number\" readonly=\"readonly\" value=\"\'+item.m0005+\'\" size=\"4\" class=\"text_box\" style=\"text-align:center \"&gt; &lt;input class=\"add\" name=\"\" type=\"button\" value=\"+\"&gt; &lt;/td&gt;\');\n                    tdTemp.append(\'&lt;td align=\"center\" bgcolor=\"#ffffff\"&gt;&lt;span class=\"priceSmallTotal\"&gt;\'+item.m0006.toFixed(1)+\'&lt;/span&gt;&lt;/td&gt;\');\n                   tdTemp.append(\'&lt;td align=\"center\" bgcolor=\"#ffffff\"&gt;&lt;a href=\"javascript:if (confirm(\\\'您确实要把该商品移出购物车吗？\\\')) location.href=\\\'&lt;%=basePath%&gt;shopManager/delM0005.do?id=\'+item.m0001+\'\\\';\"&gt;删除&lt;/a&gt;&lt;/td&gt;\');\n                      \n\n                    \n                    });\n                    \n              \n             }else{\n              alert(\'获取失败！\');\n              window.location.reload();\n             }\n             \n            },\'json\');</pre> \n</div>\n<p>转自：http://chang8536.iteye.com/blog/2170455</p>','  1、action 片段  public Map responseJson;       public Map getResponseJson() {           return responseJson;       }       public void setResponseJson(Map responseJson) {           this.responseJson = ......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-24 20:28:32',0,0,0,0,'',NULL,0),(380,1,6,'jsp Cookie记住用户的登录状态','<div> \n <h2>jsp Cookie记住用户的登录状态 </h2> \n <p> 2014-12-29 10:53:40&nbsp;&nbsp;www.hackbase.com&nbsp;&nbsp;来源：互联网 </p> \n <p>Login.jsp[html] view plaincopy&lt;%@ page language=\"java\" import=\"java.util.*,java.net.*\" contentType=\"text/html; charset=utf-8\"%&gt; &lt;% String path = request.getContextPath(); String basePath ...</p> \n <div> \n  <p>Login.jsp</p> \n  <div> \n   <p> <b>[html]</b> <a href=\"http://blog.csdn.net/u012079603/article/details/42234459#\" title=\"view plain\" rel=\"nofollow,noindex\">view plain</a> <a href=\"http://blog.csdn.net/u012079603/article/details/42234459#\" title=\"copy\" rel=\"nofollow,noindex\">copy</a> <img class=\"lazy-load\" data-original=\"\" width=\"12\" height=\"12\" alt=\"在CODE上查看代码片\" src=\"http://www.fzqblog.top/upload/201608/1472041714089.png\"> <img class=\"lazy-load\" data-original=\"\" width=\"12\" height=\"12\" alt=\"派生到我的代码片\" src=\"http://www.fzqblog.top/upload/201608/1472041714824.jpg\"> </p> \n   <ol start=\"1\"> \n    <li> <span> <span>&lt;</span> <span>%@&nbsp;page&nbsp;</span> <span>language</span> <span>=</span> <span>\"java\"</span> <span>&nbsp;</span> <span>import</span> <span>=</span> <span>\"java.util.*,java.net.*\"</span> <span>&nbsp;</span> <span>contentType</span> <span>=</span> <span>\"text/html;&nbsp;charset=utf-8\"</span> <span>%</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> <span>&lt;</span> <span>%&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> String&nbsp; <span>path</span> <span>&nbsp;=&nbsp;</span> <span>request</span> <span>.getContextPath();&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> String&nbsp; <span>basePath</span> <span>&nbsp;=&nbsp;</span> <span>request</span> <span>.getScheme()+\"://\"+request.getServerName()+\":\"+request.getServerPort()+path+\"/\";&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> % <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;</span> </li> \n    <li> <span> &lt;!DOCTYPE&nbsp;HTML&nbsp;PUBLIC&nbsp;\"-//W3C//DTD&nbsp;HTML&nbsp;4.01&nbsp;Transitional//EN\" <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> <span>&lt;</span> <span>html</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp; <span>&lt;</span> <span>head</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>base</span> <span>&nbsp;</span> <span>href</span> <span>=</span> <span>\"&lt;%=basePath%&gt;\"</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>title</span> <span>&gt;</span> <span>My&nbsp;JSP&nbsp;\'index.jsp\'&nbsp;starting&nbsp;page</span> <span>&lt;/</span> <span>title</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>meta</span> <span>&nbsp;</span> <span>http-equiv</span> <span>=</span> <span>\"pragma\"</span> <span>&nbsp;</span> <span>content</span> <span>=</span> <span>\"no-cache\"</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>meta</span> <span>&nbsp;</span> <span>http-equiv</span> <span>=</span> <span>\"cache-control\"</span> <span>&nbsp;</span> <span>content</span> <span>=</span> <span>\"no-cache\"</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>meta</span> <span>&nbsp;</span> <span>http-equiv</span> <span>=</span> <span>\"expires\"</span> <span>&nbsp;</span> <span>content</span> <span>=</span> <span>\"0\"</span> <span>&gt;</span> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>meta</span> <span>&nbsp;</span> <span>http-equiv</span> <span>=</span> <span>\"keywords\"</span> <span>&nbsp;</span> <span>content</span> <span>=</span> <span>\"keyword1,keyword2,keyword3\"</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>meta</span> <span>&nbsp;</span> <span>http-equiv</span> <span>=</span> <span>\"description\"</span> <span>&nbsp;</span> <span>content</span> <span>=</span> <span>\"This&nbsp;is&nbsp;my&nbsp;page\"</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;!--</span> &nbsp; </span> </li> \n    <li> <span> <span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;link&nbsp;rel=\"stylesheet\"&nbsp;type=\"text/css\"&nbsp;href=\"styles.css\"&gt;</span> &nbsp; </span> </li> \n    <li> <span> <span>&nbsp;&nbsp;&nbsp;&nbsp;--&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp; <span>&lt;/</span> <span>head</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp; <span>&lt;</span> <span>body</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>h1</span> <span>&gt;</span> <span>用户登录</span> <span>&lt;/</span> <span>h1</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>hr</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>%&nbsp;&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;request.setCharacterEncoding(\"utf-8\");&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp; <span>username</span> <span>=</span> <span>\"\"</span> <span>;&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp; <span>password</span> <span>&nbsp;=&nbsp;</span> <span>\"\"</span> <span>;&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Cookie[]&nbsp; <span>cookies</span> <span>&nbsp;=&nbsp;</span> <span>request</span> <span>.getCookies();&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(cookies!=null&amp;&amp;cookies.length <span>&gt;</span> <span>0)&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(Cookie&nbsp;c:cookies)&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(c.getName().equals(\"username\"))&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span>username</span> <span>&nbsp;=&nbsp;&nbsp;</span> <span>URLDecoder</span> <span>.decode(c.getValue(),\"utf-8\");&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(c.getName().equals(\"password\"))&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span>password</span> <span>&nbsp;=&nbsp;&nbsp;</span> <span>URLDecoder</span> <span>.decode(c.getValue(),\"utf-8\");&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;% <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>form</span> <span>&nbsp;</span> <span>name</span> <span>=</span> <span>\"loginForm\"</span> <span>&nbsp;</span> <span>action</span> <span>=</span> <span>\"dologin.jsp\"</span> <span>&nbsp;</span> <span>method</span> <span>=</span> <span>\"post\"</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>table</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>tr</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>td</span> <span>&gt;</span> <span>用户名：</span> <span>&lt;/</span> <span>td</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>td</span> <span>&gt;</span> <span>&lt;</span> <span>input</span> <span>&nbsp;</span> <span>type</span> <span>=</span> <span>\"text\"</span> <span>&nbsp;</span> <span>name</span> <span>=</span> <span>\"username\"</span> <span>&nbsp;</span> <span>value</span> <span>=</span> <span>\"&lt;%=username&nbsp;%&gt;\"</span> <span>/&gt;</span> <span>&lt;/</span> <span>td</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;/</span> <span>tr</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>tr</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>td</span> <span>&gt;</span> <span>密码：</span> <span>&lt;/</span> <span>td</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>td</span> <span>&gt;</span> <span>&lt;</span> <span>input</span> <span>&nbsp;</span> <span>type</span> <span>=</span> <span>\"password\"</span> <span>&nbsp;</span> <span>name</span> <span>=</span> <span>\"password\"</span> <span>&nbsp;</span> <span>value</span> <span>=</span> <span>\"&lt;%=password&nbsp;%&gt;\"</span> <span>&nbsp;</span> <span>/&gt;</span> <span>&lt;/</span> <span>td</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;/</span> <span>tr</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>tr</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>td</span> <span>&nbsp;</span> <span>colspan</span> <span>=</span> <span>\"2\"</span> <span>&gt;</span> <span>&lt;</span> <span>input</span> <span>&nbsp;</span> <span>type</span> <span>=</span> <span>\"checkbox\"</span> <span>&nbsp;</span> <span>name</span> <span>=</span> <span>\"isUseCookie\"</span> <span>&nbsp;</span> <span>checked</span> <span>=</span> <span>\"checked\"</span> <span>/&gt;</span> <span>十天内记住我的登录状态</span> <span>&lt;/</span> <span>td</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;/</span> <span>tr</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>tr</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>td</span> <span>&nbsp;</span> <span>colspan</span> <span>=</span> <span>\"2\"</span> <span>&nbsp;</span> <span>align</span> <span>=</span> <span>\"center\"</span> <span>&gt;</span> <span>&lt;</span> <span>input</span> <span>&nbsp;</span> <span>type</span> <span>=</span> <span>\"submit\"</span> <span>&nbsp;</span> <span>value</span> <span>=</span> <span>\"登录\"</span> <span>/&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>input</span> <span>&nbsp;</span> <span>type</span> <span>=</span> <span>\"reset\"</span> <span>&nbsp;</span> <span>value</span> <span>=</span> <span>\"取消\"</span> <span>/&gt;</span> <span>&lt;/</span> <span>td</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;/</span> <span>tr</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;/</span> <span>table</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;/</span> <span>form</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp; <span>&lt;/</span> <span>body</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> <span>&lt;/</span> <span>html</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n   </ol> \n  </div> \n  <p>doLogin.jsp</p> \n  <div> \n   <p> <b>[html]</b> <a href=\"http://blog.csdn.net/u012079603/article/details/42234459#\" title=\"view plain\" rel=\"nofollow,noindex\">view plain</a> <a href=\"http://blog.csdn.net/u012079603/article/details/42234459#\" title=\"copy\" rel=\"nofollow,noindex\">copy</a> <img class=\"lazy-load\" data-original=\"\" width=\"12\" height=\"12\" alt=\"在CODE上查看代码片\" src=\"http://www.fzqblog.top/upload/201608/1472041715090.png\"> <img class=\"lazy-load\" data-original=\"\" width=\"12\" height=\"12\" alt=\"派生到我的代码片\" src=\"http://www.fzqblog.top/upload/201608/1472041716797.jpg\"> </p> \n   <ol start=\"1\"> \n    <li> <span> <span>&lt;</span> <span>%@&nbsp;page&nbsp;</span> <span>language</span> <span>=</span> <span>\"java\"</span> <span>&nbsp;</span> <span>import</span> <span>=</span> <span>\"java.util.*,java.net.*\"</span> <span>&nbsp;</span> <span>contentType</span> <span>=</span> <span>\"text/html;&nbsp;charset=utf-8\"</span> <span>%</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> <span>&lt;</span> <span>%&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> String&nbsp; <span>path</span> <span>&nbsp;=&nbsp;</span> <span>request</span> <span>.getContextPath();&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> String&nbsp; <span>basePath</span> <span>&nbsp;=&nbsp;</span> <span>request</span> <span>.getScheme()+\"://\"+request.getServerName()+\":\"+request.getServerPort()+path+\"/\";&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> % <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;</span> </li> \n    <li> <span> &lt;!DOCTYPE&nbsp;HTML&nbsp;PUBLIC&nbsp;\"-//W3C//DTD&nbsp;HTML&nbsp;4.01&nbsp;Transitional//EN\" <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> <span>&lt;</span> <span>html</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp; <span>&lt;</span> <span>head</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>base</span> <span>&nbsp;</span> <span>href</span> <span>=</span> <span>\"&lt;%=basePath%&gt;\"</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>title</span> <span>&gt;</span> <span>My&nbsp;JSP&nbsp;\'dologin.jsp\'&nbsp;starting&nbsp;page</span> <span>&lt;/</span> <span>title</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>meta</span> <span>&nbsp;</span> <span>http-equiv</span> <span>=</span> <span>\"pragma\"</span> <span>&nbsp;</span> <span>content</span> <span>=</span> <span>\"no-cache\"</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>meta</span> <span>&nbsp;</span> <span>http-equiv</span> <span>=</span> <span>\"cache-control\"</span> <span>&nbsp;</span> <span>content</span> <span>=</span> <span>\"no-cache\"</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>meta</span> <span>&nbsp;</span> <span>http-equiv</span> <span>=</span> <span>\"expires\"</span> <span>&nbsp;</span> <span>content</span> <span>=</span> <span>\"0\"</span> <span>&gt;</span> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>meta</span> <span>&nbsp;</span> <span>http-equiv</span> <span>=</span> <span>\"keywords\"</span> <span>&nbsp;</span> <span>content</span> <span>=</span> <span>\"keyword1,keyword2,keyword3\"</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>meta</span> <span>&nbsp;</span> <span>http-equiv</span> <span>=</span> <span>\"description\"</span> <span>&nbsp;</span> <span>content</span> <span>=</span> <span>\"This&nbsp;is&nbsp;my&nbsp;page\"</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;!--</span> &nbsp; </span> </li> \n    <li> <span> <span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;link&nbsp;rel=\"stylesheet\"&nbsp;type=\"text/css\"&nbsp;href=\"styles.css\"&gt;</span> &nbsp; </span> </li> \n    <li> <span> <span>&nbsp;&nbsp;&nbsp;&nbsp;--&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp; <span>&lt;/</span> <span>head</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp; <span>&lt;</span> <span>body</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>h1</span> <span>&gt;</span> <span>登录成功</span> <span>&lt;/</span> <span>h1</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>hr</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>br</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>br</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>br</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>%&nbsp;&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;request.setCharacterEncoding(\"utf-8\");&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//首先判断用户是否选择了记住登录状态&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String[]&nbsp; <span>isUseCookies</span> <span>&nbsp;=&nbsp;</span> <span>request</span> <span>.getParameterValues(\"isUseCookie\");&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(isUseCookies!=null&amp;&amp;isUseCookies.length <span>&gt;</span> <span>0)&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//把用户名和密码保存在Cookie对象里面&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp; <span>username</span> <span>&nbsp;=&nbsp;</span> <span>URLEncoder</span> <span>.encode(request.getParameter(\"username\"),\"utf-8\");&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//使用URLEncoder解决无法在Cookie当中保存中文字符串问题&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp; <span>password</span> <span>&nbsp;=&nbsp;</span> <span>URLEncoder</span> <span>.encode(request.getParameter(\"password\"),\"utf-8\");&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Cookie&nbsp; <span>usernameCookie</span> <span>&nbsp;=&nbsp;</span> <span>new</span> <span>&nbsp;Cookie(\"username\",username);&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Cookie&nbsp; <span>passwordCookie</span> <span>&nbsp;=&nbsp;</span> <span>new</span> <span>&nbsp;Cookie(\"password\",password);&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;usernameCookie.setMaxAge(864000);&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;passwordCookie.setMaxAge(864000);//设置最大生存期限为10天&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.addCookie(usernameCookie);&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.addCookie(passwordCookie);&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Cookie[]&nbsp; <span>cookies</span> <span>&nbsp;=&nbsp;</span> <span>request</span> <span>.getCookies();&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(cookies!=null&amp;&amp;cookies.length <span>&gt;</span> <span>0)&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(Cookie&nbsp;c:cookies)&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(c.getName().equals(\"username\")||c.getName().equals(\"password\"))&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c.setMaxAge(0);&nbsp;//设置Cookie失效&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.addCookie(c);&nbsp;//重新保存。&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;% <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>a</span> <span>&nbsp;</span> <span>href</span> <span>=</span> <span>\"users.jsp\"</span> <span>&nbsp;</span> <span>target</span> <span>=</span> <span>\"_blank\"</span> <span>&gt;</span> <span>查看用户信息</span> <span>&lt;/</span> <span>a</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp; <span>&lt;/</span> <span>body</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> <span>&lt;/</span> <span>html</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n   </ol> \n  </div> \n  <p>user.jsp</p> \n  <div> \n   <p> <b>[html]</b> <a href=\"http://blog.csdn.net/u012079603/article/details/42234459#\" title=\"view plain\" rel=\"nofollow,noindex\">view plain</a> <a href=\"http://blog.csdn.net/u012079603/article/details/42234459#\" title=\"copy\" rel=\"nofollow,noindex\">copy</a> <img class=\"lazy-load\" data-original=\"\" width=\"12\" height=\"12\" alt=\"在CODE上查看代码片\" src=\"http://www.fzqblog.top/upload/201608/1472041718337.png\"> <img class=\"lazy-load\" data-original=\"\" width=\"12\" height=\"12\" alt=\"派生到我的代码片\" src=\"http://www.fzqblog.top/upload/201608/1472041720496.jpg\"> </p> \n   <ol start=\"1\"> \n    <li> <span> <span>&lt;</span> <span>%@&nbsp;page&nbsp;</span> <span>language</span> <span>=</span> <span>\"java\"</span> <span>&nbsp;</span> <span>import</span> <span>=</span> <span>\"java.util.*,java.net.*\"</span> <span>&nbsp;</span> <span>contentType</span> <span>=</span> <span>\"text/html;&nbsp;charset=utf-8\"</span> <span>%</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> <span>&lt;</span> <span>%&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> String&nbsp; <span>path</span> <span>&nbsp;=&nbsp;</span> <span>request</span> <span>.getContextPath();&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> String&nbsp; <span>basePath</span> <span>&nbsp;=&nbsp;</span> <span>request</span> <span>.getScheme()+\"://\"+request.getServerName()+\":\"+request.getServerPort()+path+\"/\";&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> % <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;</span> </li> \n    <li> <span> &lt;!DOCTYPE&nbsp;HTML&nbsp;PUBLIC&nbsp;\"-//W3C//DTD&nbsp;HTML&nbsp;4.01&nbsp;Transitional//EN\" <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> <span>&lt;</span> <span>html</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp; <span>&lt;</span> <span>head</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>base</span> <span>&nbsp;</span> <span>href</span> <span>=</span> <span>\"&lt;%=basePath%&gt;\"</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>title</span> <span>&gt;</span> <span>My&nbsp;JSP&nbsp;\'users.jsp\'&nbsp;starting&nbsp;page</span> <span>&lt;/</span> <span>title</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>meta</span> <span>&nbsp;</span> <span>http-equiv</span> <span>=</span> <span>\"pragma\"</span> <span>&nbsp;</span> <span>content</span> <span>=</span> <span>\"no-cache\"</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>meta</span> <span>&nbsp;</span> <span>http-equiv</span> <span>=</span> <span>\"cache-control\"</span> <span>&nbsp;</span> <span>content</span> <span>=</span> <span>\"no-cache\"</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>meta</span> <span>&nbsp;</span> <span>http-equiv</span> <span>=</span> <span>\"expires\"</span> <span>&nbsp;</span> <span>content</span> <span>=</span> <span>\"0\"</span> <span>&gt;</span> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>meta</span> <span>&nbsp;</span> <span>http-equiv</span> <span>=</span> <span>\"keywords\"</span> <span>&nbsp;</span> <span>content</span> <span>=</span> <span>\"keyword1,keyword2,keyword3\"</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>meta</span> <span>&nbsp;</span> <span>http-equiv</span> <span>=</span> <span>\"description\"</span> <span>&nbsp;</span> <span>content</span> <span>=</span> <span>\"This&nbsp;is&nbsp;my&nbsp;page\"</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;!--</span> &nbsp; </span> </li> \n    <li> <span> <span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;link&nbsp;rel=\"stylesheet\"&nbsp;type=\"text/css\"&nbsp;href=\"styles.css\"&gt;</span> &nbsp; </span> </li> \n    <li> <span> <span>&nbsp;&nbsp;&nbsp;&nbsp;--&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp; <span>&lt;/</span> <span>head</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp; <span>&lt;</span> <span>body</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>h1</span> <span>&gt;</span> <span>用户信息</span> <span>&lt;/</span> <span>h1</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>hr</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>%&nbsp;&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;request.setCharacterEncoding(\"utf-8\");&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp; <span>username</span> <span>=</span> <span>\"\"</span> <span>;&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp; <span>password</span> <span>&nbsp;=&nbsp;</span> <span>\"\"</span> <span>;&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Cookie[]&nbsp; <span>cookies</span> <span>&nbsp;=&nbsp;</span> <span>request</span> <span>.getCookies();&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(cookies!=null&amp;&amp;cookies.length <span>&gt;</span> <span>0)&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(Cookie&nbsp;c:cookies)&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(c.getName().equals(\"username\"))&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span>username</span> <span>&nbsp;=&nbsp;</span> <span>URLDecoder</span> <span>.decode(c.getValue(),\"utf-8\");&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(c.getName().equals(\"password\"))&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span>password</span> <span>&nbsp;=&nbsp;</span> <span>URLDecoder</span> <span>.decode(c.getValue(),\"utf-8\");&nbsp;&nbsp;</span> </span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span> </li> \n    <li> <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;% <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>BR</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>BR</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp; <span>&lt;</span> <span>BR</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用户名： <span>&lt;</span> <span>%=username&nbsp;%</span> <span>&gt;</span> <span>&lt;</span> <span>br</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;密码： <span>&lt;</span> <span>%=password&nbsp;%</span> <span>&gt;</span> <span>&lt;</span> <span>br</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> &nbsp;&nbsp; <span>&lt;/</span> <span>body</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n    <li> <span> <span>&lt;/</span> <span>html</span> <span>&gt;</span> <span>&nbsp;&nbsp;</span> </span> </li> \n   </ol> \n  </div> \n </div> \n <table border=\"0\" width=\"100%\" cellspacing=\"4\" cellpadding=\"0\"> \n  <tbody>\n   <tr> \n    <td> <p>免责声明：本文仅代表作者个人观点，与本站无关。其原创性以及文中陈述文字和内容未经本站证实，对本文以及其中全部或者部分内容、文字的真实性、完整性、及时性本站不作任何保证或承诺，请读者仅作参考，并请自行核实相关内容。</p> </td> \n   </tr> \n  </tbody>\n </table> \n <h3> 责任编辑：blacksnake </h3> \n <p> <span>本文引用网址：</span> </p> \n</div>\n<p>转自：http://www.hackbase.com/tech/2014-12-29/70233.html</p>','  jsp Cookie记住用户的登录状态    2014-12-29 10:53:40  www.hackbase.com  来源：互联网   Login.jsp[html] view plaincopy <% String path = request.getContextPath(); String basePath ...     Login.jsp        [html] view ......',10000,'user_icon/10000.jpg','JAVABLOG小编','2016-08-24 20:28:40',0,0,0,0,'http://www.fzqblog.top/upload/201608/1472041714089.png|http://www.fzqblog.top/upload/201608/1472041714824.jpg|http://www.fzqblog.top/upload/201608/1472041715090.png|http://www.fzqblog.top/upload/201608/1472041716797.jpg|http://www.fzqblog.top/upload/201608/1472041718337.png|http://www.fzqblog.top/upload/201608/1472041720496.jpg|',NULL,0);

/*Table structure for table `fzqblog_like` */

DROP TABLE IF EXISTS `fzqblog_like`;

CREATE TABLE `fzqblog_like` (
  `article_id` int(11) NOT NULL DEFAULT '0',
  `article_type` char(1) NOT NULL,
  `user_id` int(11) NOT NULL,
  `title` varchar(300) DEFAULT NULL,
  `create_time` datetime DEFAULT NULL,
  PRIMARY KEY (`article_id`,`article_type`,`user_id`),
  KEY `like_index_articleid` (`article_id`),
  KEY `like_index_userid` (`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `fzqblog_like` */

insert  into `fzqblog_like`(`article_id`,`article_type`,`user_id`,`title`,`create_time`) values (95,'T',10034,'弄个solr中文网怎么样','2016-09-22 09:52:31'),(95,'T',10041,'弄个solr中文网怎么样','2016-10-05 01:34:05'),(96,'T',10034,'时间显示应该改为中文的','2016-09-22 17:27:10'),(96,'T',10041,'时间显示应该改为中文的','2016-10-08 22:53:05'),(167,'B',10035,'lucene的IndexWriter对象创建和索引策略的选择','2016-09-11 03:34:20'),(373,'K',10034,'IBM SPSS Decision Management 和 IBM WebSphere ILOG JRules 集成，第 2 部分: 本地集成方法','2016-09-27 10:17:43'),(376,'K',10034,'Mybatis 通用 Mapper 1.1.0 版发布','2016-09-19 15:40:56'),(376,'K',10035,'Mybatis 通用 Mapper 1.1.0 版发布','2016-09-01 12:38:01');

/*Table structure for table `fzqblog_message` */

DROP TABLE IF EXISTS `fzqblog_message`;

CREATE TABLE `fzqblog_message` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `received_user_id` int(11) DEFAULT NULL COMMENT '接收人ID',
  `create_time` datetime DEFAULT NULL,
  `status` int(1) DEFAULT '0',
  `description` varchar(500) DEFAULT NULL,
  `url` varchar(500) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `idx_id` (`id`),
  KEY `idx_received_userid` (`received_user_id`),
  KEY `idx_status` (`status`)
) ENGINE=InnoDB AUTO_INCREMENT=111 DEFAULT CHARSET=utf8;

/*Data for the table `fzqblog_message` */

insert  into `fzqblog_message`(`id`,`received_user_id`,`create_time`,`status`,`description`,`url`) values (92,10000,'2016-08-24 00:18:39',1,'<span>fan220</span>在【说说】中提到了你','http://localhost/user/10034/shuoshuo/188'),(93,10034,'2016-08-24 00:25:36',1,'<span>1</span>在【说说】中提到了你','http://localhost/user/10035/shuoshuo/189'),(94,10033,'2016-08-24 00:28:20',0,'<span>1</span>在【说说】中提到了你','http://localhost/user/10035/shuoshuo/190'),(95,10034,'2016-08-24 00:32:03',1,'<span>1</span>在【说说】中提到了你','http://localhost/user/10035/shuoshuo/192'),(96,10034,'2016-09-01 12:40:59',1,'<span>1</span>在【说说】中提到了你','http://localhost/user/10035/shuoshuo/196'),(97,10034,'2016-09-01 12:47:55',1,'<span>1</span>在【说说】中提到了你','http://localhost/user/10035/shuoshuo/197'),(98,10000,'2016-09-11 03:24:26',1,'<span>1</span>在【知识库】&nbsp;&nbsp;(Mybatis 通用 Mapper 1.1.0 版发布)中回复了你','http://www.fzqblog.top/knowledge/376#1_1'),(99,10000,'2016-09-11 03:30:44',1,'<span>时光</span>在【知识库】&nbsp;&nbsp;(spring struts hibernate整合问题)中回复了你','http://www.fzqblog.top/knowledge/372#1_2'),(101,10034,'2016-09-11 13:58:54',1,'<span>1</span>在【说说】中提到了你','http://www.fzqblog.top/user/10035/shuoshuo/204'),(102,10035,'2016-09-29 15:14:24',1,'<span>fan220</span>在【论坛】&nbsp;&nbsp;(啊啊啊啊)中回复了你','http://www.fzqblog.top/bbs/92#1_6'),(103,10035,'2016-09-29 15:16:41',1,'<span>fan220</span>在【说说】中提到了你','http://www.fzqblog.top/user/10034/shuoshuo/207'),(104,10034,'2016-10-08 22:55:19',1,'<span>抽离</span>在【说说】中提到了你','http://www.fzqblog.top/user/10041/shuoshuo/208'),(105,10000,'2016-10-09 11:30:56',0,'<span>fan220</span>在【说说】中提到了你','http://www.fzqblog.top/user/10034/shuoshuo/209'),(106,10035,'2016-10-10 15:58:58',1,'<span>fan220</span>在【论坛】&nbsp;&nbsp;(时间显示应该改为中文的)中回复了你','http://www.fzqblog.top/bbs/96#1_7'),(107,10035,'2016-10-10 16:08:30',1,'<span>fan220</span>在【说说】&nbsp;&nbsp;(<a href=\"http://localhost/user/10000\"  class=\"referer\"  target=\"_blank\">@官方小编</a> &nbsp;[熊猫])中回复了你','http://www.fzqblog.top/user/10034/shuoshuo/188'),(108,10035,'2016-10-13 14:45:01',1,'<span>fan220</span>在【论坛】&nbsp;&nbsp;(啊啊啊啊)中回复了你','http://www.fzqblog.top/bbs/92#1_11'),(109,10034,'2016-10-13 15:28:58',1,'<span>1</span>在【论坛】&nbsp;&nbsp;(啊啊啊啊)中回复了你','http://www.fzqblog.top/bbs/92#1_12'),(110,10034,'2016-10-27 10:54:57',0,'<span>sbfqz</span>在【论坛】&nbsp;&nbsp;(段其妙是个智障)中回复了你','http://www.fzqblog.top/bbs/97#1_14');

/*Table structure for table `fzqblog_shuoshuo` */

DROP TABLE IF EXISTS `fzqblog_shuoshuo`;

CREATE TABLE `fzqblog_shuoshuo` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT NULL,
  `user_icon` varchar(50) DEFAULT NULL,
  `user_name` varchar(50) DEFAULT NULL,
  `image_url` varchar(500) DEFAULT NULL,
  `image_url_small` varchar(600) DEFAULT NULL,
  `music_url` varchar(300) DEFAULT NULL,
  `content` text,
  `create_time` datetime DEFAULT NULL,
  `comment_count` int(11) DEFAULT '0',
  `like_count` int(11) DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `shuoshuo_index_userid` (`user_id`),
  KEY `shuoshuo_index_id` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=213 DEFAULT CHARSET=utf8;

/*Data for the table `fzqblog_shuoshuo` */

insert  into `fzqblog_shuoshuo`(`id`,`user_id`,`user_icon`,`user_name`,`image_url`,`image_url_small`,`music_url`,`content`,`create_time`,`comment_count`,`like_count`) values (188,10034,'user_icon/10034.jpg','fan220','201608/1471969113175.jpg','201608/1471969113175.jpg_s.jpg|',NULL,'<a href=\"http://localhost/user/10000\"  class=\"referer\"  target=\"_blank\">@官方小编</a> &nbsp;[熊猫]','2016-08-24 00:18:39',2,1),(189,10035,'user_icon/10035.jpg','1','','',NULL,'<a href=\"http://localhost/user/10034\"  class=\"referer\"  target=\"_blank\">@fan220</a> &nbsp;[兔子]','2016-08-24 00:25:36',0,0),(190,10035,'user_icon/10035.jpg','1','201608/1471969698838.jpg','201608/1471969698838.jpg_s.jpg|',NULL,'<a href=\"http://localhost/user/10033\"  class=\"referer\"  target=\"_blank\">@抽离2</a>','2016-08-24 00:28:20',0,0),(191,10035,'user_icon/10035.jpg','1','','',NULL,'发发呆','2016-08-24 00:31:34',0,0),(192,10035,'user_icon/10035.jpg','1','201608/1471969920501.jpg','201608/1471969920501.jpg_s.jpg|',NULL,'发士大夫<a href=\"http://localhost/user/10034\"  class=\"referer\"  target=\"_blank\">@fan220</a>','2016-08-24 00:32:03',1,1),(193,10000,'user_icon/10000.jpg','官方小编','','',NULL,'[哈哈]','2016-08-24 01:03:03',0,1),(194,10034,NULL,'劫',NULL,'',NULL,'无形之刃，最为致命','2016-08-24 20:28:46',0,1),(195,10038,'user_icon/10038.jgp','fan','','',NULL,'000','2016-08-24 21:17:04',0,0),(196,10035,'user_icon/10035.jpg','1','','',NULL,'<a href=\"http://localhost/user/10034\"  class=\"referer\"  target=\"_blank\">@fan220</a> &nbsp;[晕]是是是','2016-09-01 12:40:59',0,1),(197,10035,'user_icon/10035.jpg','1','','',NULL,'<a href=\"http://localhost/user/10034\"  class=\"referer\"  target=\"_blank\">@fan220</a> &nbsp;[爱你]','2016-09-01 12:47:55',0,0),(198,10000,'user_icon/10000.jpg','官方小编','201609/1473528252683.jpg','201609/1473528252683.jpg_s.jpg|',NULL,'[奥特曼]','2016-09-11 01:24:20',0,0),(199,10000,'user_icon/10000.jpg','官方小编','201609/1473534338833.jpg','201609/1473534338833.jpg_s.jpg|',NULL,'[晕]','2016-09-11 03:05:39',0,0),(200,10000,'user_icon/10000.jpg','官方小编','','',NULL,'[浮云]','2016-09-11 03:15:45',0,1),(201,10035,'user_icon/10035.jpg','1','201609/1473534988411.png','201609/1473534988411.png_s.jpg|',NULL,'1','2016-09-11 03:16:40',0,0),(202,10035,'user_icon/10035.jpg','1','','',NULL,'[汗]','2016-09-11 03:23:37',0,2),(203,10035,'user_icon/10035.jpg','1','','',NULL,'[给力]','2016-09-11 13:58:49',0,2),(204,10035,'user_icon/10035.jpg','1','','',NULL,'<a href=\"http://www.fzqblog.top/user/10034\"  class=\"referer\"  target=\"_blank\">@fan220</a>','2016-09-11 13:58:54',0,2),(205,10041,'user_icon/10041.jgp','抽离','','',NULL,'啊','2016-09-24 22:22:54',0,0),(206,10041,'user_icon/10041.jgp','抽离','','',NULL,'&lt;b&gt;afsdf&lt;/b&gt;','2016-09-29 00:00:50',0,1),(207,10034,'user_icon/10034.jpg','fan220','','',NULL,'时间[熊猫]<a href=\"http://www.fzqblog.top/user/10035\"  class=\"referer\"  target=\"_blank\">@1</a>','2016-09-29 15:16:41',0,2),(208,10041,'user_icon/10041.jgp','抽离','','',NULL,'<a href=\"http://www.fzqblog.top/user/10034\"  class=\"referer\"  target=\"_blank\">@fan220</a> &nbsp;[爱你]','2016-10-08 22:55:19',0,2),(209,10034,'user_icon/10034.jpg','fan220','','',NULL,'<a href=\"http://www.fzqblog.top/user/10000\"  class=\"referer\"  target=\"_blank\">@官方小编</a> &nbsp;[酷]','2016-10-09 11:30:56',0,0),(210,10034,'user_icon/10034.jpg','fan220','','',NULL,'&lt;/b&gt;aaaaaaa&lt;/b&gt;','2016-10-11 10:24:26',1,0),(211,10034,'user_icon/10034.jpg','fan220','','',NULL,'&amp;lt&nbsp;=&nbsp;&lt;','2016-10-17 16:14:49',0,0),(212,10034,'user_icon/10034.jpg','fan220','','',NULL,'&lt;b&gt;fasdfaf&lt;/b&gt;','2016-10-17 16:15:18',0,0);

/*Table structure for table `fzqblog_shuoshuo_comment` */

DROP TABLE IF EXISTS `fzqblog_shuoshuo_comment`;

CREATE TABLE `fzqblog_shuoshuo_comment` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `shuoshuo_id` int(11) DEFAULT NULL,
  `content` varchar(1000) DEFAULT NULL,
  `create_time` datetime DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `user_icon` varchar(50) DEFAULT NULL,
  `user_name` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `index_shuoshuo_id` (`shuoshuo_id`)
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8;

/*Data for the table `fzqblog_shuoshuo_comment` */

insert  into `fzqblog_shuoshuo_comment`(`id`,`shuoshuo_id`,`content`,`create_time`,`user_id`,`user_icon`,`user_name`) values (9,192,'。。。。','2016-08-24 00:33:43',10035,'user_icon/10035.jpg','1'),(10,188,'<a href=\"http://www.fzqblog.top/user/10035\"  class=\"referer\"  target=\"_blank\">@1</a>  傻逼','2016-10-10 16:08:30',10034,'user_icon/10034.jpg','fan220'),(11,188,'<a href=\"http://www.fzqblog.top/user/10034\"  class=\"referer\"  target=\"_blank\">@fan220</a>   [奥特曼]','2016-10-10 16:08:48',10034,'user_icon/10034.jpg','fan220'),(12,210,'&lt;b&gt;fgadfasf&lt;/b&gt;','2016-10-17 16:12:31',10034,'user_icon/10034.jpg','fan220');

/*Table structure for table `fzqblog_shuoshuo_like` */

DROP TABLE IF EXISTS `fzqblog_shuoshuo_like`;

CREATE TABLE `fzqblog_shuoshuo_like` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `shuoshuo_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `user_icon` varchar(50) DEFAULT NULL,
  `user_name` varchar(50) DEFAULT NULL,
  `create_time` datetime DEFAULT NULL,
  PRIMARY KEY (`id`,`shuoshuo_id`,`user_id`),
  KEY `index_shuoshuo_id` (`shuoshuo_id`)
) ENGINE=InnoDB AUTO_INCREMENT=19 DEFAULT CHARSET=utf8;

/*Data for the table `fzqblog_shuoshuo_like` */

insert  into `fzqblog_shuoshuo_like`(`id`,`shuoshuo_id`,`user_id`,`user_icon`,`user_name`,`create_time`) values (1,128,10034,NULL,NULL,'2016-08-24 20:28:46'),(2,196,10035,'user_icon/10035.jpg','1','2016-09-01 12:45:16'),(3,202,10040,'user_icon/10040.jgp','时光','2016-09-11 03:27:59'),(4,200,10035,'user_icon/10035.jpg','1','2016-09-11 12:43:03'),(5,203,10034,'user_icon/10034.jpg','fan220','2016-09-14 15:56:50'),(6,204,10034,'user_icon/10034.jpg','fan220','2016-09-14 15:56:53'),(7,204,10041,'user_icon/10041.jgp','抽离','2016-09-18 21:40:20'),(8,203,10041,'user_icon/10041.jgp','抽离','2016-09-18 21:40:23'),(9,202,10034,'user_icon/10034.jpg','fan220','2016-09-19 15:33:13'),(10,194,10034,'user_icon/10034.jpg','fan220','2016-09-29 15:17:53'),(11,193,10034,'user_icon/10034.jpg','fan220','2016-09-29 15:17:57'),(12,192,10034,'user_icon/10034.jpg','fan220','2016-09-29 15:18:02'),(13,207,10041,'user_icon/10041.jgp','抽离','2016-10-05 01:28:21'),(14,206,10041,'user_icon/10041.jgp','抽离','2016-10-05 01:28:24'),(15,208,10041,'user_icon/10041.jgp','抽离','2016-10-08 22:56:29'),(16,208,10034,'user_icon/10034.jpg','fan220','2016-10-09 01:58:45'),(17,207,10034,'user_icon/10034.jpg','fan220','2016-10-10 16:08:01'),(18,188,10034,'user_icon/10034.jpg','fan220','2016-10-10 16:08:11');

/*Table structure for table `fzqblog_sign_in` */

DROP TABLE IF EXISTS `fzqblog_sign_in`;

CREATE TABLE `fzqblog_sign_in` (
  `userid` int(11) NOT NULL AUTO_INCREMENT,
  `user_icon` varchar(50) DEFAULT NULL,
  `user_name` varchar(50) DEFAULT NULL,
  `sign_date` date NOT NULL,
  `sign_time` datetime DEFAULT NULL,
  UNIQUE KEY `idx_userid_signdate` (`userid`,`sign_date`),
  KEY `signin_index_userid` (`userid`),
  KEY `signin_index_signdate` (`sign_date`)
) ENGINE=InnoDB AUTO_INCREMENT=10043 DEFAULT CHARSET=utf8;

/*Data for the table `fzqblog_sign_in` */

insert  into `fzqblog_sign_in`(`userid`,`user_icon`,`user_name`,`sign_date`,`sign_time`) values (10000,'user_icon/10000.jpg','官方小编','2016-09-11','2016-09-11 01:24:04'),(10034,'user_icon/10034.jpg','fan220','2016-09-01','2016-09-01 12:49:56'),(10034,'user_icon/10034.jpg','fan220','2016-09-14','2016-09-14 15:56:25'),(10034,'user_icon/10034.jpg','fan220','2016-09-19','2016-09-19 15:22:27'),(10034,'user_icon/10034.jpg','fan220','2016-09-20','2016-09-20 10:23:41'),(10034,'user_icon/10034.jpg','fan220','2016-09-22','2016-09-22 09:52:56'),(10034,'user_icon/10034.jpg','fan220','2016-09-26','2016-09-26 08:42:09'),(10034,'user_icon/10034.jpg','fan220','2016-09-27','2016-09-27 10:17:10'),(10034,'user_icon/10034.jpg','fan220','2016-10-08','2016-10-08 15:44:18'),(10034,'user_icon/10034.jpg','fan220','2016-10-09','2016-10-09 01:58:29'),(10034,'user_icon/10034.jpg','fan220','2016-10-10','2016-10-10 16:04:11'),(10034,'user_icon/10034.jpg','fan220','2016-10-11','2016-10-11 15:42:42'),(10034,'user_icon/10034.jpg','fan220','2016-10-17','2016-10-17 16:16:17'),(10034,'user_icon/10034.jpg','fan220','2016-10-18','2016-10-18 16:46:24'),(10034,'user_icon/10034.jpg','fan220','2016-10-19','2016-10-19 10:33:55'),(10035,'user_icon/10035.jpg','1','2016-09-11','2016-09-11 03:16:48'),(10035,'user_icon/10035.jpg','1','2016-09-12','2016-09-12 00:00:21'),(10035,'user_icon/10035.jpg','1','2016-09-13','2016-09-13 15:59:35'),(10035,'user_icon/10035.jpg','1','2016-10-13','2016-10-13 14:48:36'),(10035,'user_icon/10035.jpg','1','2016-11-11','2016-11-11 12:01:05'),(10040,'user_icon/10040.jgp','时光','2016-09-11','2016-09-11 03:26:21'),(10041,'user_icon/10041.jgp','抽离','2016-09-12','2016-09-12 23:41:48'),(10041,'user_icon/10041.jgp','抽离','2016-09-13','2016-09-13 00:12:06'),(10041,'user_icon/10041.jgp','抽离','2016-09-17','2016-09-17 17:33:04'),(10041,'user_icon/10041.jgp','抽离','2016-09-18','2016-09-18 21:40:16'),(10041,'user_icon/10041.jgp','抽离','2016-09-24','2016-09-24 11:34:21'),(10041,'user_icon/10041.jgp','抽离','2016-09-25','2016-09-25 00:16:32'),(10041,'user_icon/10041.jgp','抽离','2016-09-28','2016-09-28 23:56:09'),(10041,'user_icon/10041.jgp','抽离','2016-10-02','2016-10-02 17:16:00'),(10041,'user_icon/10041.jgp','抽离','2016-10-03','2016-10-03 01:38:52'),(10041,'user_icon/10041.jgp','抽离','2016-10-05','2016-10-05 01:15:03'),(10041,'user_icon/10041.jgp','抽离','2016-10-06','2016-10-06 14:06:50'),(10041,'user_icon/10041.jgp','抽离','2016-10-08','2016-10-08 22:51:27'),(10042,'user_icon/10042.jgp','sbfqz','2016-10-27','2016-10-27 10:54:09');

/*Table structure for table `fzqblog_topic` */

DROP TABLE IF EXISTS `fzqblog_topic`;

CREATE TABLE `fzqblog_topic` (
  `topic_id` int(11) NOT NULL AUTO_INCREMENT,
  `topic_type` int(1) DEFAULT '0' COMMENT '0是普通贴 1是投票贴',
  `p_category_id` int(11) DEFAULT NULL COMMENT '组ID',
  `category_id` int(11) DEFAULT NULL COMMENT '类型ID',
  `title` varchar(100) DEFAULT '' COMMENT '标题',
  `content` longtext COMMENT '内容',
  `summary` text COMMENT '内容摘要',
  `user_id` int(11) DEFAULT NULL COMMENT '作者ID',
  `user_icon` varchar(50) DEFAULT NULL COMMENT '作者头像',
  `user_name` varchar(50) DEFAULT NULL COMMENT '作者名字',
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '发表时间',
  `last_comment_time` datetime DEFAULT NULL COMMENT '最后评论时间',
  `comment_count` int(11) DEFAULT '0' COMMENT '评论人数',
  `read_count` int(11) DEFAULT '0' COMMENT '阅读人数',
  `collection_count` int(11) DEFAULT '0' COMMENT '收藏人数',
  `like_count` int(11) DEFAULT '0' COMMENT '喜欢人数',
  `grade` int(2) DEFAULT '0' COMMENT '0是普通帖 1是置顶帖',
  `essence` int(1) DEFAULT '0' COMMENT '0是非精华 1是精华',
  `topic_image` mediumtext,
  `topic_image_thum` mediumtext COMMENT '文章缩列图',
  PRIMARY KEY (`topic_id`),
  KEY `topic_index_id` (`topic_id`),
  KEY `topic_index_gid` (`p_category_id`),
  KEY `topic_index_id_gid` (`topic_id`,`p_category_id`)
) ENGINE=InnoDB AUTO_INCREMENT=100 DEFAULT CHARSET=utf8;

/*Data for the table `fzqblog_topic` */

insert  into `fzqblog_topic`(`topic_id`,`topic_type`,`p_category_id`,`category_id`,`title`,`content`,`summary`,`user_id`,`user_icon`,`user_name`,`create_time`,`last_comment_time`,`comment_count`,`read_count`,`collection_count`,`like_count`,`grade`,`essence`,`topic_image`,`topic_image_thum`) values (92,0,1,6,'啊啊啊啊','<p>啊啊啊<br/></p>','啊啊啊',10035,'user_icon/10035.jpg','1','2016-08-24 00:28:39','2016-08-24 00:28:39',5,39,0,0,0,0,'',''),(93,0,10,11,'javabug','<p>javabug</p>','javabug',10034,'user_icon/10034.jpg','fan220','2016-08-24 18:12:29','2016-08-24 18:12:29',0,30,0,0,0,0,'',''),(94,0,1,7,'solr怎么这么屌','<p>solr怎么这么屌</p>','solr怎么这么屌',10034,'user_icon/10034.jpg','fan220','2016-08-31 11:43:06','2016-08-31 11:43:06',0,26,0,0,0,0,'',''),(95,1,1,7,'弄个solr中文网怎么样','<p>会有人浏览吗<br/></p>','会有人浏览吗',10034,'user_icon/10034.jpg','fan220','2016-08-31 16:11:17','2016-08-31 16:11:17',0,41,2,2,0,0,'',''),(96,0,10,11,'时间显示应该改为中文的','<p>时间显示应该改为中文的</p>','时间显示应该改为中文的',10035,'user_icon/10035.jpg','1','2016-09-11 03:32:25','2016-09-11 03:32:25',4,52,2,2,0,0,'',''),(97,1,10,11,'段其妙是个智障','<p>段其妙是个智障</p>','段其妙是个智障',10034,'user_icon/10034.jpg','fan220','2016-10-18 16:45:04','2016-10-18 16:45:04',1,23,0,0,0,0,'',''),(98,0,1,7,'发到付','<p>飞洒地方</p>','飞洒地方',10034,'user_icon/10034.jpg','fan220','2016-10-19 10:27:16','2016-10-19 10:27:16',0,24,0,0,0,0,'',''),(99,0,1,6,'辣鸡抽离','<p><img src=\"http://www.fzqblog.top/upload/201611/1477968365750.jpg\"/></p><p><img src=\"http://www.fzqblog.top/upload/201611/1477968395972.jpg\"/></p><p>你还知道你菜</p><p>预览都没有</p><p>学别人做什么网站</p>','你还知道你菜预览都没有学别人做什么网站',10043,'user_icon/10043.jgp','shyer','2016-11-01 10:47:00','2016-11-01 10:47:00',2,3,0,0,0,0,'http://www.fzqblog.top/upload/201611/1477968365750.jpg|http://www.fzqblog.top/upload/201611/1477968395972.jpg|','upload/201611/1477968365750.jpg_s.jpg|upload/201611/1477968395972.jpg_s.jpg|');

/*Table structure for table `fzqblog_topic_vote` */

DROP TABLE IF EXISTS `fzqblog_topic_vote`;

CREATE TABLE `fzqblog_topic_vote` (
  `vote_id` int(11) NOT NULL AUTO_INCREMENT,
  `topic_id` int(11) NOT NULL,
  `vote_type` int(1) NOT NULL COMMENT '1是单选 2是多选',
  `end_date` date NOT NULL,
  PRIMARY KEY (`vote_id`),
  KEY `idx_topic_id` (`topic_id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

/*Data for the table `fzqblog_topic_vote` */

insert  into `fzqblog_topic_vote`(`vote_id`,`topic_id`,`vote_type`,`end_date`) values (1,95,1,'2016-12-31'),(2,97,1,'2016-11-05');

/*Table structure for table `fzqblog_topic_vote_detail` */

DROP TABLE IF EXISTS `fzqblog_topic_vote_detail`;

CREATE TABLE `fzqblog_topic_vote_detail` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `vote_id` int(11) DEFAULT NULL,
  `topic_id` int(11) DEFAULT NULL,
  `title` varchar(300) DEFAULT NULL,
  `count` int(11) DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `idx_topic_id` (`topic_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

/*Data for the table `fzqblog_topic_vote_detail` */

insert  into `fzqblog_topic_vote_detail`(`id`,`vote_id`,`topic_id`,`title`,`count`) values (1,1,NULL,'可以啊',1),(2,1,NULL,'不行的',1),(3,2,NULL,'段其妙是个智障',2),(4,2,NULL,'段其妙不是个智障',0);

/*Table structure for table `fzqblog_topic_vote_user` */

DROP TABLE IF EXISTS `fzqblog_topic_vote_user`;

CREATE TABLE `fzqblog_topic_vote_user` (
  `vote_detail_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL DEFAULT '0',
  `vote_date` datetime NOT NULL,
  KEY `idx_user_id` (`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `fzqblog_topic_vote_user` */

insert  into `fzqblog_topic_vote_user`(`vote_detail_id`,`user_id`,`vote_date`) values (2,10034,'2016-09-01 00:18:51'),(1,10041,'2016-10-01 18:30:58'),(3,10034,'2016-10-18 16:45:12'),(3,10042,'2016-10-27 10:54:57');

/*Table structure for table `fzqblog_user` */

DROP TABLE IF EXISTS `fzqblog_user`;

CREATE TABLE `fzqblog_user` (
  `userid` int(11) NOT NULL AUTO_INCREMENT,
  `email` varchar(100) NOT NULL,
  `user_name` varchar(50) DEFAULT NULL,
  `password` varchar(50) NOT NULL,
  `user_icon` varchar(50) DEFAULT NULL,
  `user_bg` varchar(100) DEFAULT NULL,
  `age` varchar(10) DEFAULT NULL,
  `sex` varchar(1) DEFAULT NULL,
  `characters` varchar(200) DEFAULT NULL,
  `mark` int(11) DEFAULT '0',
  `address` varchar(50) DEFAULT NULL,
  `work` varchar(50) DEFAULT NULL,
  `birthday` datetime DEFAULT NULL,
  `register_time` datetime DEFAULT NULL,
  `last_login_time` datetime DEFAULT NULL,
  `activation_code` varchar(25) DEFAULT NULL,
  PRIMARY KEY (`userid`),
  KEY `user_index_username` (`user_name`),
  KEY `user_index_email` (`email`),
  KEY `user_index_userid` (`userid`)
) ENGINE=InnoDB AUTO_INCREMENT=10044 DEFAULT CHARSET=utf8;

/*Data for the table `fzqblog_user` */

insert  into `fzqblog_user`(`userid`,`email`,`user_name`,`password`,`user_icon`,`user_bg`,`age`,`sex`,`characters`,`mark`,`address`,`work`,`birthday`,`register_time`,`last_login_time`,`activation_code`) values (10000,'fzqblog@sina.com','官方小编','7506e6d179b562585c29e5e261cf7386','user_icon/10000.jpg','user_bg/bg3.jpg','10','男',NULL,3319,'泉州',NULL,NULL,'2016-08-11 17:37:33','2016-09-11 12:25:18',NULL),(10033,'fan520@qq.com','抽离2','7506e6d179b562585c29e5e261cf7386','user_icon/10033.jpg','user_bg/bg5.jpg','6','女','码农',166,'北京','码农','2016-08-26 00:00:00','2016-07-16 20:05:57','2016-08-24 20:28:46',NULL),(10034,'fan220@qq.com','fan220','29e291199bb95392c555798e02b14909','user_icon/10034.jpg','user_bg/bg7.jpg','7','男','不骄不傲不膨胀、不再犹豫。',265,'永春','程序猿','2016-08-17 21:20:50','2016-07-16 20:32:46','2016-10-24 10:40:58',NULL),(10035,'fan@qq.com','1','7506e6d179b562585c29e5e261cf7386','user_icon/10035.jpg','user_bg/bg9.jpg',NULL,'男','',112,'','',NULL,'2016-08-19 19:41:11','2016-11-11 12:00:58',NULL),(10036,'552@qq.com','等','7506e6d179b562585c29e5e261cf7386','user_icon/10036.jgp','user_bg/bg10.jpg',NULL,NULL,NULL,0,NULL,NULL,NULL,'2016-08-22 15:53:34','2016-08-22 15:53:34',NULL),(10037,'2770@qq.com','fan52000','e10adc3949ba59abbe56e057f20f883e','user_icon/10037.jgp','user_bg/bg1.jpg',NULL,NULL,NULL,0,NULL,NULL,NULL,'2016-08-24 20:28:45','2016-08-24 20:28:45','BPSV8N'),(10038,'fan@fan.com','fan','7506e6d179b562585c29e5e261cf7386','user_icon/10038.jgp','user_bg/bg6.jpg',NULL,NULL,NULL,8,NULL,NULL,NULL,'2016-08-24 21:16:16','2016-08-24 21:16:16',NULL),(10039,'faaa@aa.com','aaa','7506e6d179b562585c29e5e261cf7386','user_icon/10039.jgp','user_bg/bg10.jpg',NULL,NULL,NULL,0,NULL,NULL,NULL,'2016-08-24 21:28:40','2016-08-24 21:28:40',NULL),(10040,'2770832@qq.com','时光','7506e6d179b562585c29e5e261cf7386','user_icon/10040.jpg','user_bg/bg2.jpg',NULL,NULL,NULL,7,NULL,NULL,NULL,'2016-09-11 03:25:53','2016-09-11 22:00:43',NULL),(10041,'27708324@qq.com','抽离','7506e6d179b562585c29e5e261cf7386','user_icon/10041.jgp','user_bg/bg10.jpg',NULL,'男','不骄不傲不膨胀，不再犹豫。',79,'','',NULL,'2016-09-12 23:41:44','2016-10-08 22:51:11','BCZ8LX'),(10042,'1150249582@qq.com','sbfqz','6af5a5d75600c7ab83194b8dcd8aa91c','user_icon/10042.jgp','user_bg/bg6.jpg',NULL,NULL,NULL,7,NULL,NULL,NULL,'2016-10-27 10:53:02','2016-10-27 10:53:02',NULL),(10043,'fge@qq.com','shyer','ab44bd43d6b18fcd5cd928d6faab1b8','user_icon/10043.jgp','user_bg/bg10.jpg',NULL,NULL,NULL,3,NULL,NULL,NULL,'2016-11-01 10:44:41','2016-11-01 22:29:20',NULL);

/*Table structure for table `fzqblog_user_friend` */

DROP TABLE IF EXISTS `fzqblog_user_friend`;

CREATE TABLE `fzqblog_user_friend` (
  `user_id` int(50) NOT NULL,
  `friend_user_id` int(50) NOT NULL,
  `user_icon` varchar(50) DEFAULT NULL,
  `user_name` varchar(50) DEFAULT NULL,
  `friend_user_icon` varchar(50) DEFAULT NULL,
  `friend_user_name` varchar(50) DEFAULT NULL,
  `create_time` datetime DEFAULT NULL,
  PRIMARY KEY (`user_id`,`friend_user_id`),
  KEY `friend_index_userid` (`user_id`),
  KEY `friend_index_friendid` (`friend_user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `fzqblog_user_friend` */

insert  into `fzqblog_user_friend`(`user_id`,`friend_user_id`,`user_icon`,`user_name`,`friend_user_icon`,`friend_user_name`,`create_time`) values (10034,10000,'user_icon/10034.jpg','fan220','user_icon/10000.jpg','官方小编','2016-08-31 19:30:15'),(10034,10033,'user_icon/10034.jpg','fan220','user_icon/10033.jpg','抽离2','2016-10-10 16:00:14'),(10034,10035,'user_icon/10034.jpg','fan220','user_icon/10035.jpg','1','2016-09-19 15:28:23'),(10034,10040,'user_icon/10034.jpg','fan220','user_icon/10040.jpg','时光','2016-09-19 15:33:28'),(10035,10033,'user_icon/10035.jpg','1','user_icon/10033.jpg','抽离2','2016-08-23 13:32:01'),(10035,10034,'user_icon/10035.jpg','1','user_icon/10034.jpg','fan220','2016-09-11 03:33:54'),(10041,10034,'user_icon/10041.jgp','抽离','user_icon/10034.jpg','fan220','2016-10-08 22:54:59');

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
